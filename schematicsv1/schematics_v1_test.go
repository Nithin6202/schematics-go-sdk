/**
 * (C) Copyright IBM Corp. 2023.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package schematicsv1_test

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"os"
	"time"

	"github.com/IBM/go-sdk-core/v5/core"
	"github.com/IBM/schematics-go-sdk/schematicsv1"
	"github.com/go-openapi/strfmt"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe(`SchematicsV1`, func() {
	var testServer *httptest.Server
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(schematicsService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL: "https://schematicsv1/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(schematicsService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
					URL: "https://testService/api",
				})
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				})
				err := schematicsService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := schematicsService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != schematicsService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(schematicsService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(schematicsService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_URL": "https://schematicsv1/api",
				"SCHEMATICS_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"SCHEMATICS_AUTH_TYPE":   "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			schematicsService, serviceErr := schematicsv1.NewSchematicsV1UsingExternalConfig(&schematicsv1.SchematicsV1Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(schematicsService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = schematicsv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListSchematicsLocation(listSchematicsLocationOptions *ListSchematicsLocationOptions) - Operation response error`, func() {
		listSchematicsLocationPath := "/v1/locations"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSchematicsLocationPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSchematicsLocation with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListSchematicsLocationOptions model
				listSchematicsLocationOptionsModel := new(schematicsv1.ListSchematicsLocationOptions)
				listSchematicsLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListSchematicsLocation(listSchematicsLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListSchematicsLocation(listSchematicsLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSchematicsLocation(listSchematicsLocationOptions *ListSchematicsLocationOptions)`, func() {
		listSchematicsLocationPath := "/v1/locations"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSchematicsLocationPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"name": "Name", "id": "ID", "country": "Country", "geography": "Geography", "geography_code": "GeographyCode", "metro": "Metro", "multizone_metro": "MultizoneMetro", "kind": "Kind", "paired_region": ["PairedRegion"], "restricted": true}]`)
				}))
			})
			It(`Invoke ListSchematicsLocation successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListSchematicsLocationOptions model
				listSchematicsLocationOptionsModel := new(schematicsv1.ListSchematicsLocationOptions)
				listSchematicsLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListSchematicsLocationWithContext(ctx, listSchematicsLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListSchematicsLocation(listSchematicsLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListSchematicsLocationWithContext(ctx, listSchematicsLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSchematicsLocationPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"name": "Name", "id": "ID", "country": "Country", "geography": "Geography", "geography_code": "GeographyCode", "metro": "Metro", "multizone_metro": "MultizoneMetro", "kind": "Kind", "paired_region": ["PairedRegion"], "restricted": true}]`)
				}))
			})
			It(`Invoke ListSchematicsLocation successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListSchematicsLocation(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSchematicsLocationOptions model
				listSchematicsLocationOptionsModel := new(schematicsv1.ListSchematicsLocationOptions)
				listSchematicsLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListSchematicsLocation(listSchematicsLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListSchematicsLocation with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListSchematicsLocationOptions model
				listSchematicsLocationOptionsModel := new(schematicsv1.ListSchematicsLocationOptions)
				listSchematicsLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListSchematicsLocation(listSchematicsLocationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListSchematicsLocation successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListSchematicsLocationOptions model
				listSchematicsLocationOptionsModel := new(schematicsv1.ListSchematicsLocationOptions)
				listSchematicsLocationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ListSchematicsLocation(listSchematicsLocationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLocations(listLocationsOptions *ListLocationsOptions) - Operation response error`, func() {
		listLocationsPath := "/v2/locations"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLocationsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLocations with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(schematicsv1.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLocations(listLocationsOptions *ListLocationsOptions)`, func() {
		listLocationsPath := "/v2/locations"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLocationsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"locations": [{"region": "Region", "metro": "Metro", "geography_code": "GeographyCode", "geography": "Geography", "country": "Country", "kind": "Kind", "paired_region": ["PairedRegion"], "restricted": true, "display_name": "DisplayName", "schematics_regional_public_endpoint": "SchematicsRegionalPublicEndpoint", "schematics_regional_private_endpoint": "SchematicsRegionalPrivateEndpoint"}]}`)
				}))
			})
			It(`Invoke ListLocations successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(schematicsv1.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListLocationsWithContext(ctx, listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListLocationsWithContext(ctx, listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLocationsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"locations": [{"region": "Region", "metro": "Metro", "geography_code": "GeographyCode", "geography": "Geography", "country": "Country", "kind": "Kind", "paired_region": ["PairedRegion"], "restricted": true, "display_name": "DisplayName", "schematics_regional_public_endpoint": "SchematicsRegionalPublicEndpoint", "schematics_regional_private_endpoint": "SchematicsRegionalPrivateEndpoint"}]}`)
				}))
			})
			It(`Invoke ListLocations successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListLocations(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(schematicsv1.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListLocations with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(schematicsv1.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListLocations successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := new(schematicsv1.ListLocationsOptions)
				listLocationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ListLocations(listLocationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListResourceGroup(listResourceGroupOptions *ListResourceGroupOptions) - Operation response error`, func() {
		listResourceGroupPath := "/v1/resource_groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listResourceGroupPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListResourceGroup with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListResourceGroupOptions model
				listResourceGroupOptionsModel := new(schematicsv1.ListResourceGroupOptions)
				listResourceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListResourceGroup(listResourceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListResourceGroup(listResourceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListResourceGroup(listResourceGroupOptions *ListResourceGroupOptions)`, func() {
		listResourceGroupPath := "/v1/resource_groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listResourceGroupPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"account_id": "AccountID", "crn": "Crn", "default": false, "name": "Name", "resource_group_id": "ResourceGroupID", "state": "State"}]`)
				}))
			})
			It(`Invoke ListResourceGroup successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListResourceGroupOptions model
				listResourceGroupOptionsModel := new(schematicsv1.ListResourceGroupOptions)
				listResourceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListResourceGroupWithContext(ctx, listResourceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListResourceGroup(listResourceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListResourceGroupWithContext(ctx, listResourceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listResourceGroupPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"account_id": "AccountID", "crn": "Crn", "default": false, "name": "Name", "resource_group_id": "ResourceGroupID", "state": "State"}]`)
				}))
			})
			It(`Invoke ListResourceGroup successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListResourceGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListResourceGroupOptions model
				listResourceGroupOptionsModel := new(schematicsv1.ListResourceGroupOptions)
				listResourceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListResourceGroup(listResourceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListResourceGroup with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListResourceGroupOptions model
				listResourceGroupOptionsModel := new(schematicsv1.ListResourceGroupOptions)
				listResourceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListResourceGroup(listResourceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListResourceGroup successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListResourceGroupOptions model
				listResourceGroupOptionsModel := new(schematicsv1.ListResourceGroupOptions)
				listResourceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ListResourceGroup(listResourceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSchematicsVersion(getSchematicsVersionOptions *GetSchematicsVersionOptions) - Operation response error`, func() {
		getSchematicsVersionPath := "/v1/version"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSchematicsVersionPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSchematicsVersion with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetSchematicsVersionOptions model
				getSchematicsVersionOptionsModel := new(schematicsv1.GetSchematicsVersionOptions)
				getSchematicsVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetSchematicsVersion(getSchematicsVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetSchematicsVersion(getSchematicsVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSchematicsVersion(getSchematicsVersionOptions *GetSchematicsVersionOptions)`, func() {
		getSchematicsVersionPath := "/v1/version"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSchematicsVersionPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"builddate": "Builddate", "buildno": "Buildno", "commitsha": "Commitsha", "helm_provider_version": "HelmProviderVersion", "helm_version": "HelmVersion", "supported_template_types": {"anyKey": "anyValue"}, "terraform_provider_version": "TerraformProviderVersion", "terraform_version": "TerraformVersion"}`)
				}))
			})
			It(`Invoke GetSchematicsVersion successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetSchematicsVersionOptions model
				getSchematicsVersionOptionsModel := new(schematicsv1.GetSchematicsVersionOptions)
				getSchematicsVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetSchematicsVersionWithContext(ctx, getSchematicsVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetSchematicsVersion(getSchematicsVersionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetSchematicsVersionWithContext(ctx, getSchematicsVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSchematicsVersionPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"builddate": "Builddate", "buildno": "Buildno", "commitsha": "Commitsha", "helm_provider_version": "HelmProviderVersion", "helm_version": "HelmVersion", "supported_template_types": {"anyKey": "anyValue"}, "terraform_provider_version": "TerraformProviderVersion", "terraform_version": "TerraformVersion"}`)
				}))
			})
			It(`Invoke GetSchematicsVersion successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetSchematicsVersion(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSchematicsVersionOptions model
				getSchematicsVersionOptionsModel := new(schematicsv1.GetSchematicsVersionOptions)
				getSchematicsVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetSchematicsVersion(getSchematicsVersionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSchematicsVersion with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetSchematicsVersionOptions model
				getSchematicsVersionOptionsModel := new(schematicsv1.GetSchematicsVersionOptions)
				getSchematicsVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetSchematicsVersion(getSchematicsVersionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetSchematicsVersion successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetSchematicsVersionOptions model
				getSchematicsVersionOptionsModel := new(schematicsv1.GetSchematicsVersionOptions)
				getSchematicsVersionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetSchematicsVersion(getSchematicsVersionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ProcessTemplateMetaData(processTemplateMetaDataOptions *ProcessTemplateMetaDataOptions) - Operation response error`, func() {
		processTemplateMetaDataPath := "/v2/template_metadata_processor"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(processTemplateMetaDataPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ProcessTemplateMetaData with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the ProcessTemplateMetaDataOptions model
				processTemplateMetaDataOptionsModel := new(schematicsv1.ProcessTemplateMetaDataOptions)
				processTemplateMetaDataOptionsModel.TemplateType = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Source = externalSourceModel
				processTemplateMetaDataOptionsModel.Region = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.SourceType = core.StringPtr("local")
				processTemplateMetaDataOptionsModel.XGithubToken = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ProcessTemplateMetaData(processTemplateMetaDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ProcessTemplateMetaData(processTemplateMetaDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ProcessTemplateMetaData(processTemplateMetaDataOptions *ProcessTemplateMetaDataOptions)`, func() {
		processTemplateMetaDataPath := "/v2/template_metadata_processor"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(processTemplateMetaDataPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "Type", "variables": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}`)
				}))
			})
			It(`Invoke ProcessTemplateMetaData successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the ProcessTemplateMetaDataOptions model
				processTemplateMetaDataOptionsModel := new(schematicsv1.ProcessTemplateMetaDataOptions)
				processTemplateMetaDataOptionsModel.TemplateType = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Source = externalSourceModel
				processTemplateMetaDataOptionsModel.Region = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.SourceType = core.StringPtr("local")
				processTemplateMetaDataOptionsModel.XGithubToken = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ProcessTemplateMetaDataWithContext(ctx, processTemplateMetaDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ProcessTemplateMetaData(processTemplateMetaDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ProcessTemplateMetaDataWithContext(ctx, processTemplateMetaDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(processTemplateMetaDataPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "Type", "variables": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}`)
				}))
			})
			It(`Invoke ProcessTemplateMetaData successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ProcessTemplateMetaData(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the ProcessTemplateMetaDataOptions model
				processTemplateMetaDataOptionsModel := new(schematicsv1.ProcessTemplateMetaDataOptions)
				processTemplateMetaDataOptionsModel.TemplateType = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Source = externalSourceModel
				processTemplateMetaDataOptionsModel.Region = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.SourceType = core.StringPtr("local")
				processTemplateMetaDataOptionsModel.XGithubToken = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ProcessTemplateMetaData(processTemplateMetaDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ProcessTemplateMetaData with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the ProcessTemplateMetaDataOptions model
				processTemplateMetaDataOptionsModel := new(schematicsv1.ProcessTemplateMetaDataOptions)
				processTemplateMetaDataOptionsModel.TemplateType = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Source = externalSourceModel
				processTemplateMetaDataOptionsModel.Region = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.SourceType = core.StringPtr("local")
				processTemplateMetaDataOptionsModel.XGithubToken = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ProcessTemplateMetaData(processTemplateMetaDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ProcessTemplateMetaDataOptions model with no property values
				processTemplateMetaDataOptionsModelNew := new(schematicsv1.ProcessTemplateMetaDataOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ProcessTemplateMetaData(processTemplateMetaDataOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ProcessTemplateMetaData successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the ProcessTemplateMetaDataOptions model
				processTemplateMetaDataOptionsModel := new(schematicsv1.ProcessTemplateMetaDataOptions)
				processTemplateMetaDataOptionsModel.TemplateType = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Source = externalSourceModel
				processTemplateMetaDataOptionsModel.Region = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.SourceType = core.StringPtr("local")
				processTemplateMetaDataOptionsModel.XGithubToken = core.StringPtr("testString")
				processTemplateMetaDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ProcessTemplateMetaData(processTemplateMetaDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListWorkspaces(listWorkspacesOptions *ListWorkspacesOptions) - Operation response error`, func() {
		listWorkspacesPath := "/v1/workspaces"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspacesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					Expect(req.URL.Query()["resource_group"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListWorkspaces with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListWorkspacesOptions model
				listWorkspacesOptionsModel := new(schematicsv1.ListWorkspacesOptions)
				listWorkspacesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspacesOptionsModel.Limit = core.Int64Ptr(int64(100))
				listWorkspacesOptionsModel.Profile = core.StringPtr("ids")
				listWorkspacesOptionsModel.ResourceGroup = core.StringPtr("testString")
				listWorkspacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListWorkspaces(listWorkspacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListWorkspaces(listWorkspacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListWorkspaces(listWorkspacesOptions *ListWorkspacesOptions)`, func() {
		listWorkspacesPath := "/v1/workspaces"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspacesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					Expect(req.URL.Query()["resource_group"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"count": 5, "limit": 5, "offset": 6, "workspaces": [{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion", "service_extensions": [{"name": "flavor", "value": "anyValue", "type": "string"}]}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "dependencies": {"parents": ["Parents"], "children": ["Children"]}, "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "cart_id": "CartID", "project_id": "ProjectID", "last_action_name": "LastActionName", "last_activity_id": "LastActivityID", "last_job": {"job_id": "JobID", "job_name": "JobName", "job_status": "JobStatus"}, "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}, "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}]}`)
				}))
			})
			It(`Invoke ListWorkspaces successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListWorkspacesOptions model
				listWorkspacesOptionsModel := new(schematicsv1.ListWorkspacesOptions)
				listWorkspacesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspacesOptionsModel.Limit = core.Int64Ptr(int64(100))
				listWorkspacesOptionsModel.Profile = core.StringPtr("ids")
				listWorkspacesOptionsModel.ResourceGroup = core.StringPtr("testString")
				listWorkspacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListWorkspacesWithContext(ctx, listWorkspacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListWorkspaces(listWorkspacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListWorkspacesWithContext(ctx, listWorkspacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspacesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					Expect(req.URL.Query()["resource_group"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"count": 5, "limit": 5, "offset": 6, "workspaces": [{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion", "service_extensions": [{"name": "flavor", "value": "anyValue", "type": "string"}]}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "dependencies": {"parents": ["Parents"], "children": ["Children"]}, "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "cart_id": "CartID", "project_id": "ProjectID", "last_action_name": "LastActionName", "last_activity_id": "LastActivityID", "last_job": {"job_id": "JobID", "job_name": "JobName", "job_status": "JobStatus"}, "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}, "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}]}`)
				}))
			})
			It(`Invoke ListWorkspaces successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListWorkspaces(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListWorkspacesOptions model
				listWorkspacesOptionsModel := new(schematicsv1.ListWorkspacesOptions)
				listWorkspacesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspacesOptionsModel.Limit = core.Int64Ptr(int64(100))
				listWorkspacesOptionsModel.Profile = core.StringPtr("ids")
				listWorkspacesOptionsModel.ResourceGroup = core.StringPtr("testString")
				listWorkspacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListWorkspaces(listWorkspacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListWorkspaces with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListWorkspacesOptions model
				listWorkspacesOptionsModel := new(schematicsv1.ListWorkspacesOptions)
				listWorkspacesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspacesOptionsModel.Limit = core.Int64Ptr(int64(100))
				listWorkspacesOptionsModel.Profile = core.StringPtr("ids")
				listWorkspacesOptionsModel.ResourceGroup = core.StringPtr("testString")
				listWorkspacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListWorkspaces(listWorkspacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListWorkspaces successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListWorkspacesOptions model
				listWorkspacesOptionsModel := new(schematicsv1.ListWorkspacesOptions)
				listWorkspacesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspacesOptionsModel.Limit = core.Int64Ptr(int64(100))
				listWorkspacesOptionsModel.Profile = core.StringPtr("ids")
				listWorkspacesOptionsModel.ResourceGroup = core.StringPtr("testString")
				listWorkspacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ListWorkspaces(listWorkspacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateWorkspace(createWorkspaceOptions *CreateWorkspaceOptions) - Operation response error`, func() {
		createWorkspacePath := "/v1/workspaces"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspacePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateWorkspace with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoRequest model
				templateRepoRequestModel := new(schematicsv1.TemplateRepoRequest)
				templateRepoRequestModel.Branch = core.StringPtr("testString")
				templateRepoRequestModel.Release = core.StringPtr("testString")
				templateRepoRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusRequest model
				workspaceStatusRequestModel := new(schematicsv1.WorkspaceStatusRequest)
				workspaceStatusRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the CreateWorkspaceOptions model
				createWorkspaceOptionsModel := new(schematicsv1.CreateWorkspaceOptions)
				createWorkspaceOptionsModel.AppliedShareddataIds = []string{"testString"}
				createWorkspaceOptionsModel.CatalogRef = catalogRefModel
				createWorkspaceOptionsModel.Dependencies = dependenciesModel
				createWorkspaceOptionsModel.Description = core.StringPtr("testString")
				createWorkspaceOptionsModel.Location = core.StringPtr("testString")
				createWorkspaceOptionsModel.Name = core.StringPtr("testString")
				createWorkspaceOptionsModel.ResourceGroup = core.StringPtr("testString")
				createWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				createWorkspaceOptionsModel.Tags = []string{"testString"}
				createWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				createWorkspaceOptionsModel.TemplateRef = core.StringPtr("testString")
				createWorkspaceOptionsModel.TemplateRepo = templateRepoRequestModel
				createWorkspaceOptionsModel.Type = []string{"testString"}
				createWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusRequestModel
				createWorkspaceOptionsModel.AgentID = core.StringPtr("testString")
				createWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				createWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.CreateWorkspace(createWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.CreateWorkspace(createWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateWorkspace(createWorkspaceOptions *CreateWorkspaceOptions)`, func() {
		createWorkspacePath := "/v1/workspaces"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspacePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion", "service_extensions": [{"name": "flavor", "value": "anyValue", "type": "string"}]}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "dependencies": {"parents": ["Parents"], "children": ["Children"]}, "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "cart_id": "CartID", "project_id": "ProjectID", "last_action_name": "LastActionName", "last_activity_id": "LastActivityID", "last_job": {"job_id": "JobID", "job_name": "JobName", "job_status": "JobStatus"}, "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}, "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}`)
				}))
			})
			It(`Invoke CreateWorkspace successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoRequest model
				templateRepoRequestModel := new(schematicsv1.TemplateRepoRequest)
				templateRepoRequestModel.Branch = core.StringPtr("testString")
				templateRepoRequestModel.Release = core.StringPtr("testString")
				templateRepoRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusRequest model
				workspaceStatusRequestModel := new(schematicsv1.WorkspaceStatusRequest)
				workspaceStatusRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the CreateWorkspaceOptions model
				createWorkspaceOptionsModel := new(schematicsv1.CreateWorkspaceOptions)
				createWorkspaceOptionsModel.AppliedShareddataIds = []string{"testString"}
				createWorkspaceOptionsModel.CatalogRef = catalogRefModel
				createWorkspaceOptionsModel.Dependencies = dependenciesModel
				createWorkspaceOptionsModel.Description = core.StringPtr("testString")
				createWorkspaceOptionsModel.Location = core.StringPtr("testString")
				createWorkspaceOptionsModel.Name = core.StringPtr("testString")
				createWorkspaceOptionsModel.ResourceGroup = core.StringPtr("testString")
				createWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				createWorkspaceOptionsModel.Tags = []string{"testString"}
				createWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				createWorkspaceOptionsModel.TemplateRef = core.StringPtr("testString")
				createWorkspaceOptionsModel.TemplateRepo = templateRepoRequestModel
				createWorkspaceOptionsModel.Type = []string{"testString"}
				createWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusRequestModel
				createWorkspaceOptionsModel.AgentID = core.StringPtr("testString")
				createWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				createWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.CreateWorkspaceWithContext(ctx, createWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.CreateWorkspace(createWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.CreateWorkspaceWithContext(ctx, createWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspacePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion", "service_extensions": [{"name": "flavor", "value": "anyValue", "type": "string"}]}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "dependencies": {"parents": ["Parents"], "children": ["Children"]}, "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "cart_id": "CartID", "project_id": "ProjectID", "last_action_name": "LastActionName", "last_activity_id": "LastActivityID", "last_job": {"job_id": "JobID", "job_name": "JobName", "job_status": "JobStatus"}, "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}, "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}`)
				}))
			})
			It(`Invoke CreateWorkspace successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.CreateWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoRequest model
				templateRepoRequestModel := new(schematicsv1.TemplateRepoRequest)
				templateRepoRequestModel.Branch = core.StringPtr("testString")
				templateRepoRequestModel.Release = core.StringPtr("testString")
				templateRepoRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusRequest model
				workspaceStatusRequestModel := new(schematicsv1.WorkspaceStatusRequest)
				workspaceStatusRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the CreateWorkspaceOptions model
				createWorkspaceOptionsModel := new(schematicsv1.CreateWorkspaceOptions)
				createWorkspaceOptionsModel.AppliedShareddataIds = []string{"testString"}
				createWorkspaceOptionsModel.CatalogRef = catalogRefModel
				createWorkspaceOptionsModel.Dependencies = dependenciesModel
				createWorkspaceOptionsModel.Description = core.StringPtr("testString")
				createWorkspaceOptionsModel.Location = core.StringPtr("testString")
				createWorkspaceOptionsModel.Name = core.StringPtr("testString")
				createWorkspaceOptionsModel.ResourceGroup = core.StringPtr("testString")
				createWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				createWorkspaceOptionsModel.Tags = []string{"testString"}
				createWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				createWorkspaceOptionsModel.TemplateRef = core.StringPtr("testString")
				createWorkspaceOptionsModel.TemplateRepo = templateRepoRequestModel
				createWorkspaceOptionsModel.Type = []string{"testString"}
				createWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusRequestModel
				createWorkspaceOptionsModel.AgentID = core.StringPtr("testString")
				createWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				createWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.CreateWorkspace(createWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateWorkspace with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoRequest model
				templateRepoRequestModel := new(schematicsv1.TemplateRepoRequest)
				templateRepoRequestModel.Branch = core.StringPtr("testString")
				templateRepoRequestModel.Release = core.StringPtr("testString")
				templateRepoRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusRequest model
				workspaceStatusRequestModel := new(schematicsv1.WorkspaceStatusRequest)
				workspaceStatusRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the CreateWorkspaceOptions model
				createWorkspaceOptionsModel := new(schematicsv1.CreateWorkspaceOptions)
				createWorkspaceOptionsModel.AppliedShareddataIds = []string{"testString"}
				createWorkspaceOptionsModel.CatalogRef = catalogRefModel
				createWorkspaceOptionsModel.Dependencies = dependenciesModel
				createWorkspaceOptionsModel.Description = core.StringPtr("testString")
				createWorkspaceOptionsModel.Location = core.StringPtr("testString")
				createWorkspaceOptionsModel.Name = core.StringPtr("testString")
				createWorkspaceOptionsModel.ResourceGroup = core.StringPtr("testString")
				createWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				createWorkspaceOptionsModel.Tags = []string{"testString"}
				createWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				createWorkspaceOptionsModel.TemplateRef = core.StringPtr("testString")
				createWorkspaceOptionsModel.TemplateRepo = templateRepoRequestModel
				createWorkspaceOptionsModel.Type = []string{"testString"}
				createWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusRequestModel
				createWorkspaceOptionsModel.AgentID = core.StringPtr("testString")
				createWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				createWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.CreateWorkspace(createWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateWorkspace successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoRequest model
				templateRepoRequestModel := new(schematicsv1.TemplateRepoRequest)
				templateRepoRequestModel.Branch = core.StringPtr("testString")
				templateRepoRequestModel.Release = core.StringPtr("testString")
				templateRepoRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusRequest model
				workspaceStatusRequestModel := new(schematicsv1.WorkspaceStatusRequest)
				workspaceStatusRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the CreateWorkspaceOptions model
				createWorkspaceOptionsModel := new(schematicsv1.CreateWorkspaceOptions)
				createWorkspaceOptionsModel.AppliedShareddataIds = []string{"testString"}
				createWorkspaceOptionsModel.CatalogRef = catalogRefModel
				createWorkspaceOptionsModel.Dependencies = dependenciesModel
				createWorkspaceOptionsModel.Description = core.StringPtr("testString")
				createWorkspaceOptionsModel.Location = core.StringPtr("testString")
				createWorkspaceOptionsModel.Name = core.StringPtr("testString")
				createWorkspaceOptionsModel.ResourceGroup = core.StringPtr("testString")
				createWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				createWorkspaceOptionsModel.Tags = []string{"testString"}
				createWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				createWorkspaceOptionsModel.TemplateRef = core.StringPtr("testString")
				createWorkspaceOptionsModel.TemplateRepo = templateRepoRequestModel
				createWorkspaceOptionsModel.Type = []string{"testString"}
				createWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusRequestModel
				createWorkspaceOptionsModel.AgentID = core.StringPtr("testString")
				createWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				createWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.CreateWorkspace(createWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspace(getWorkspaceOptions *GetWorkspaceOptions) - Operation response error`, func() {
		getWorkspacePath := "/v1/workspaces/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspacePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspace with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceOptions model
				getWorkspaceOptionsModel := new(schematicsv1.GetWorkspaceOptions)
				getWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspace(getWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspace(getWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspace(getWorkspaceOptions *GetWorkspaceOptions)`, func() {
		getWorkspacePath := "/v1/workspaces/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspacePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion", "service_extensions": [{"name": "flavor", "value": "anyValue", "type": "string"}]}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "dependencies": {"parents": ["Parents"], "children": ["Children"]}, "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "cart_id": "CartID", "project_id": "ProjectID", "last_action_name": "LastActionName", "last_activity_id": "LastActivityID", "last_job": {"job_id": "JobID", "job_name": "JobName", "job_status": "JobStatus"}, "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}, "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}`)
				}))
			})
			It(`Invoke GetWorkspace successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceOptions model
				getWorkspaceOptionsModel := new(schematicsv1.GetWorkspaceOptions)
				getWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceWithContext(ctx, getWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspace(getWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceWithContext(ctx, getWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspacePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion", "service_extensions": [{"name": "flavor", "value": "anyValue", "type": "string"}]}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "dependencies": {"parents": ["Parents"], "children": ["Children"]}, "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "cart_id": "CartID", "project_id": "ProjectID", "last_action_name": "LastActionName", "last_activity_id": "LastActivityID", "last_job": {"job_id": "JobID", "job_name": "JobName", "job_status": "JobStatus"}, "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}, "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}`)
				}))
			})
			It(`Invoke GetWorkspace successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceOptions model
				getWorkspaceOptionsModel := new(schematicsv1.GetWorkspaceOptions)
				getWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspace(getWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspace with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceOptions model
				getWorkspaceOptionsModel := new(schematicsv1.GetWorkspaceOptions)
				getWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspace(getWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceOptions model with no property values
				getWorkspaceOptionsModelNew := new(schematicsv1.GetWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspace(getWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetWorkspace successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceOptions model
				getWorkspaceOptionsModel := new(schematicsv1.GetWorkspaceOptions)
				getWorkspaceOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetWorkspace(getWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceWorkspace(replaceWorkspaceOptions *ReplaceWorkspaceOptions) - Operation response error`, func() {
		replaceWorkspacePath := "/v1/workspaces/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceWorkspace with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceOptions model
				replaceWorkspaceOptionsModel := new(schematicsv1.ReplaceWorkspaceOptions)
				replaceWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.CatalogRef = catalogRefModel
				replaceWorkspaceOptionsModel.Description = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Dependencies = dependenciesModel
				replaceWorkspaceOptionsModel.Name = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				replaceWorkspaceOptionsModel.Tags = []string{"testString"}
				replaceWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				replaceWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				replaceWorkspaceOptionsModel.Type = []string{"testString"}
				replaceWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				replaceWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				replaceWorkspaceOptionsModel.AgentID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ReplaceWorkspace(replaceWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ReplaceWorkspace(replaceWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceWorkspace(replaceWorkspaceOptions *ReplaceWorkspaceOptions)`, func() {
		replaceWorkspacePath := "/v1/workspaces/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion", "service_extensions": [{"name": "flavor", "value": "anyValue", "type": "string"}]}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "dependencies": {"parents": ["Parents"], "children": ["Children"]}, "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "cart_id": "CartID", "project_id": "ProjectID", "last_action_name": "LastActionName", "last_activity_id": "LastActivityID", "last_job": {"job_id": "JobID", "job_name": "JobName", "job_status": "JobStatus"}, "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}, "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}`)
				}))
			})
			It(`Invoke ReplaceWorkspace successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceOptions model
				replaceWorkspaceOptionsModel := new(schematicsv1.ReplaceWorkspaceOptions)
				replaceWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.CatalogRef = catalogRefModel
				replaceWorkspaceOptionsModel.Description = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Dependencies = dependenciesModel
				replaceWorkspaceOptionsModel.Name = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				replaceWorkspaceOptionsModel.Tags = []string{"testString"}
				replaceWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				replaceWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				replaceWorkspaceOptionsModel.Type = []string{"testString"}
				replaceWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				replaceWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				replaceWorkspaceOptionsModel.AgentID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ReplaceWorkspaceWithContext(ctx, replaceWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ReplaceWorkspace(replaceWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ReplaceWorkspaceWithContext(ctx, replaceWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWorkspacePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion", "service_extensions": [{"name": "flavor", "value": "anyValue", "type": "string"}]}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "dependencies": {"parents": ["Parents"], "children": ["Children"]}, "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "cart_id": "CartID", "project_id": "ProjectID", "last_action_name": "LastActionName", "last_activity_id": "LastActivityID", "last_job": {"job_id": "JobID", "job_name": "JobName", "job_status": "JobStatus"}, "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}, "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}`)
				}))
			})
			It(`Invoke ReplaceWorkspace successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ReplaceWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceOptions model
				replaceWorkspaceOptionsModel := new(schematicsv1.ReplaceWorkspaceOptions)
				replaceWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.CatalogRef = catalogRefModel
				replaceWorkspaceOptionsModel.Description = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Dependencies = dependenciesModel
				replaceWorkspaceOptionsModel.Name = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				replaceWorkspaceOptionsModel.Tags = []string{"testString"}
				replaceWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				replaceWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				replaceWorkspaceOptionsModel.Type = []string{"testString"}
				replaceWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				replaceWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				replaceWorkspaceOptionsModel.AgentID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ReplaceWorkspace(replaceWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceWorkspace with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceOptions model
				replaceWorkspaceOptionsModel := new(schematicsv1.ReplaceWorkspaceOptions)
				replaceWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.CatalogRef = catalogRefModel
				replaceWorkspaceOptionsModel.Description = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Dependencies = dependenciesModel
				replaceWorkspaceOptionsModel.Name = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				replaceWorkspaceOptionsModel.Tags = []string{"testString"}
				replaceWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				replaceWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				replaceWorkspaceOptionsModel.Type = []string{"testString"}
				replaceWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				replaceWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				replaceWorkspaceOptionsModel.AgentID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ReplaceWorkspace(replaceWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceWorkspaceOptions model with no property values
				replaceWorkspaceOptionsModelNew := new(schematicsv1.ReplaceWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ReplaceWorkspace(replaceWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceWorkspace successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceOptions model
				replaceWorkspaceOptionsModel := new(schematicsv1.ReplaceWorkspaceOptions)
				replaceWorkspaceOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.CatalogRef = catalogRefModel
				replaceWorkspaceOptionsModel.Description = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Dependencies = dependenciesModel
				replaceWorkspaceOptionsModel.Name = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				replaceWorkspaceOptionsModel.Tags = []string{"testString"}
				replaceWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				replaceWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				replaceWorkspaceOptionsModel.Type = []string{"testString"}
				replaceWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				replaceWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				replaceWorkspaceOptionsModel.AgentID = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.XGithubToken = core.StringPtr("testString")
				replaceWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ReplaceWorkspace(replaceWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteWorkspace(deleteWorkspaceOptions *DeleteWorkspaceOptions)`, func() {
		deleteWorkspacePath := "/v1/workspaces/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteWorkspacePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["destroy_resources"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke DeleteWorkspace successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the DeleteWorkspaceOptions model
				deleteWorkspaceOptionsModel := new(schematicsv1.DeleteWorkspaceOptions)
				deleteWorkspaceOptionsModel.RefreshToken = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.DestroyResources = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.DeleteWorkspaceWithContext(ctx, deleteWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.DeleteWorkspace(deleteWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.DeleteWorkspaceWithContext(ctx, deleteWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteWorkspacePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.URL.Query()["destroy_resources"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke DeleteWorkspace successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.DeleteWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DeleteWorkspaceOptions model
				deleteWorkspaceOptionsModel := new(schematicsv1.DeleteWorkspaceOptions)
				deleteWorkspaceOptionsModel.RefreshToken = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.DestroyResources = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.DeleteWorkspace(deleteWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke DeleteWorkspace with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteWorkspaceOptions model
				deleteWorkspaceOptionsModel := new(schematicsv1.DeleteWorkspaceOptions)
				deleteWorkspaceOptionsModel.RefreshToken = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.DestroyResources = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.DeleteWorkspace(deleteWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the DeleteWorkspaceOptions model with no property values
				deleteWorkspaceOptionsModelNew := new(schematicsv1.DeleteWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.DeleteWorkspace(deleteWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke DeleteWorkspace successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteWorkspaceOptions model
				deleteWorkspaceOptionsModel := new(schematicsv1.DeleteWorkspaceOptions)
				deleteWorkspaceOptionsModel.RefreshToken = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.DestroyResources = core.StringPtr("testString")
				deleteWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.DeleteWorkspace(deleteWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateWorkspace(updateWorkspaceOptions *UpdateWorkspaceOptions) - Operation response error`, func() {
		updateWorkspacePath := "/v1/workspaces/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateWorkspacePath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateWorkspace with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the UpdateWorkspaceOptions model
				updateWorkspaceOptionsModel := new(schematicsv1.UpdateWorkspaceOptions)
				updateWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.CatalogRef = catalogRefModel
				updateWorkspaceOptionsModel.Description = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Dependencies = dependenciesModel
				updateWorkspaceOptionsModel.Name = core.StringPtr("testString")
				updateWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				updateWorkspaceOptionsModel.Tags = []string{"testString"}
				updateWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				updateWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				updateWorkspaceOptionsModel.Type = []string{"testString"}
				updateWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				updateWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				updateWorkspaceOptionsModel.AgentID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.UpdateWorkspace(updateWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.UpdateWorkspace(updateWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateWorkspace(updateWorkspaceOptions *UpdateWorkspaceOptions)`, func() {
		updateWorkspacePath := "/v1/workspaces/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateWorkspacePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion", "service_extensions": [{"name": "flavor", "value": "anyValue", "type": "string"}]}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "dependencies": {"parents": ["Parents"], "children": ["Children"]}, "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "cart_id": "CartID", "project_id": "ProjectID", "last_action_name": "LastActionName", "last_activity_id": "LastActivityID", "last_job": {"job_id": "JobID", "job_name": "JobName", "job_status": "JobStatus"}, "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}, "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}`)
				}))
			})
			It(`Invoke UpdateWorkspace successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the UpdateWorkspaceOptions model
				updateWorkspaceOptionsModel := new(schematicsv1.UpdateWorkspaceOptions)
				updateWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.CatalogRef = catalogRefModel
				updateWorkspaceOptionsModel.Description = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Dependencies = dependenciesModel
				updateWorkspaceOptionsModel.Name = core.StringPtr("testString")
				updateWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				updateWorkspaceOptionsModel.Tags = []string{"testString"}
				updateWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				updateWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				updateWorkspaceOptionsModel.Type = []string{"testString"}
				updateWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				updateWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				updateWorkspaceOptionsModel.AgentID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.UpdateWorkspaceWithContext(ctx, updateWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.UpdateWorkspace(updateWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.UpdateWorkspaceWithContext(ctx, updateWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateWorkspacePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"applied_shareddata_ids": ["AppliedShareddataIds"], "catalog_ref": {"dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL", "offering_version": "OfferingVersion", "service_extensions": [{"name": "flavor", "value": "anyValue", "type": "string"}]}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "crn": "Crn", "dependencies": {"parents": ["Parents"], "children": ["Children"]}, "description": "Description", "id": "ID", "last_health_check_at": "2019-01-01T12:00:00.000Z", "location": "Location", "name": "Name", "resource_group": "ResourceGroup", "runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_id": "ClusterID", "cluster_name": "ClusterName", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID"}, "status": "Status", "tags": ["Tags"], "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}], "template_ref": "TemplateRef", "template_repo": {"branch": "Branch", "full_url": "FullURL", "has_uploadedgitrepotar": false, "release": "Release", "repo_sha_value": "RepoShaValue", "repo_url": "RepoURL", "url": "URL"}, "type": ["Type"], "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "cart_id": "CartID", "project_id": "ProjectID", "last_action_name": "LastActionName", "last_activity_id": "LastActivityID", "last_job": {"job_id": "JobID", "job_name": "JobName", "job_status": "JobStatus"}, "workspace_status": {"frozen": true, "frozen_at": "2019-01-01T12:00:00.000Z", "frozen_by": "FrozenBy", "locked": true, "locked_by": "LockedBy", "locked_time": "2019-01-01T12:00:00.000Z"}, "workspace_status_msg": {"status_code": "StatusCode", "status_msg": "StatusMsg"}, "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}`)
				}))
			})
			It(`Invoke UpdateWorkspace successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.UpdateWorkspace(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the UpdateWorkspaceOptions model
				updateWorkspaceOptionsModel := new(schematicsv1.UpdateWorkspaceOptions)
				updateWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.CatalogRef = catalogRefModel
				updateWorkspaceOptionsModel.Description = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Dependencies = dependenciesModel
				updateWorkspaceOptionsModel.Name = core.StringPtr("testString")
				updateWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				updateWorkspaceOptionsModel.Tags = []string{"testString"}
				updateWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				updateWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				updateWorkspaceOptionsModel.Type = []string{"testString"}
				updateWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				updateWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				updateWorkspaceOptionsModel.AgentID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.UpdateWorkspace(updateWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateWorkspace with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the UpdateWorkspaceOptions model
				updateWorkspaceOptionsModel := new(schematicsv1.UpdateWorkspaceOptions)
				updateWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.CatalogRef = catalogRefModel
				updateWorkspaceOptionsModel.Description = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Dependencies = dependenciesModel
				updateWorkspaceOptionsModel.Name = core.StringPtr("testString")
				updateWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				updateWorkspaceOptionsModel.Tags = []string{"testString"}
				updateWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				updateWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				updateWorkspaceOptionsModel.Type = []string{"testString"}
				updateWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				updateWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				updateWorkspaceOptionsModel.AgentID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.UpdateWorkspace(updateWorkspaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateWorkspaceOptions model with no property values
				updateWorkspaceOptionsModelNew := new(schematicsv1.UpdateWorkspaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.UpdateWorkspace(updateWorkspaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateWorkspace successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")

				// Construct an instance of the UpdateWorkspaceOptions model
				updateWorkspaceOptionsModel := new(schematicsv1.UpdateWorkspaceOptions)
				updateWorkspaceOptionsModel.WID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.CatalogRef = catalogRefModel
				updateWorkspaceOptionsModel.Description = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Dependencies = dependenciesModel
				updateWorkspaceOptionsModel.Name = core.StringPtr("testString")
				updateWorkspaceOptionsModel.SharedData = sharedTargetDataModel
				updateWorkspaceOptionsModel.Tags = []string{"testString"}
				updateWorkspaceOptionsModel.TemplateData = []schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}
				updateWorkspaceOptionsModel.TemplateRepo = templateRepoUpdateRequestModel
				updateWorkspaceOptionsModel.Type = []string{"testString"}
				updateWorkspaceOptionsModel.WorkspaceStatus = workspaceStatusUpdateRequestModel
				updateWorkspaceOptionsModel.WorkspaceStatusMsg = workspaceStatusMessageModel
				updateWorkspaceOptionsModel.AgentID = core.StringPtr("testString")
				updateWorkspaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.UpdateWorkspace(updateWorkspaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceReadme(getWorkspaceReadmeOptions *GetWorkspaceReadmeOptions) - Operation response error`, func() {
		getWorkspaceReadmePath := "/v1/workspaces/testString/templates/readme"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceReadmePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["ref"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["formatted"]).To(Equal([]string{"markdown"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceReadme with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceReadmeOptions model
				getWorkspaceReadmeOptionsModel := new(schematicsv1.GetWorkspaceReadmeOptions)
				getWorkspaceReadmeOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Ref = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Formatted = core.StringPtr("markdown")
				getWorkspaceReadmeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceReadme(getWorkspaceReadmeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceReadme(getWorkspaceReadmeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceReadme(getWorkspaceReadmeOptions *GetWorkspaceReadmeOptions)`, func() {
		getWorkspaceReadmePath := "/v1/workspaces/testString/templates/readme"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceReadmePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["ref"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["formatted"]).To(Equal([]string{"markdown"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"readme": "Readme"}`)
				}))
			})
			It(`Invoke GetWorkspaceReadme successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceReadmeOptions model
				getWorkspaceReadmeOptionsModel := new(schematicsv1.GetWorkspaceReadmeOptions)
				getWorkspaceReadmeOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Ref = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Formatted = core.StringPtr("markdown")
				getWorkspaceReadmeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceReadmeWithContext(ctx, getWorkspaceReadmeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceReadme(getWorkspaceReadmeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceReadmeWithContext(ctx, getWorkspaceReadmeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceReadmePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["ref"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["formatted"]).To(Equal([]string{"markdown"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"readme": "Readme"}`)
				}))
			})
			It(`Invoke GetWorkspaceReadme successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceReadme(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceReadmeOptions model
				getWorkspaceReadmeOptionsModel := new(schematicsv1.GetWorkspaceReadmeOptions)
				getWorkspaceReadmeOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Ref = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Formatted = core.StringPtr("markdown")
				getWorkspaceReadmeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceReadme(getWorkspaceReadmeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceReadme with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceReadmeOptions model
				getWorkspaceReadmeOptionsModel := new(schematicsv1.GetWorkspaceReadmeOptions)
				getWorkspaceReadmeOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Ref = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Formatted = core.StringPtr("markdown")
				getWorkspaceReadmeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceReadme(getWorkspaceReadmeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceReadmeOptions model with no property values
				getWorkspaceReadmeOptionsModelNew := new(schematicsv1.GetWorkspaceReadmeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceReadme(getWorkspaceReadmeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetWorkspaceReadme successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceReadmeOptions model
				getWorkspaceReadmeOptionsModel := new(schematicsv1.GetWorkspaceReadmeOptions)
				getWorkspaceReadmeOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Ref = core.StringPtr("testString")
				getWorkspaceReadmeOptionsModel.Formatted = core.StringPtr("markdown")
				getWorkspaceReadmeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetWorkspaceReadme(getWorkspaceReadmeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`TemplateRepoUpload(templateRepoUploadOptions *TemplateRepoUploadOptions) - Operation response error`, func() {
		templateRepoUploadPath := "/v1/workspaces/testString/template_data/testString/template_repo_upload"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(templateRepoUploadPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke TemplateRepoUpload with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the TemplateRepoUploadOptions model
				templateRepoUploadOptionsModel := new(schematicsv1.TemplateRepoUploadOptions)
				templateRepoUploadOptionsModel.WID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.TID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.File = CreateMockReader("This is a mock file.")
				templateRepoUploadOptionsModel.FileContentType = core.StringPtr("testString")
				templateRepoUploadOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.TemplateRepoUpload(templateRepoUploadOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.TemplateRepoUpload(templateRepoUploadOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`TemplateRepoUpload(templateRepoUploadOptions *TemplateRepoUploadOptions)`, func() {
		templateRepoUploadPath := "/v1/workspaces/testString/template_data/testString/template_repo_upload"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(templateRepoUploadPath))
					Expect(req.Method).To(Equal("PUT"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"file_value": "FileValue", "has_received_file": false, "id": "ID"}`)
				}))
			})
			It(`Invoke TemplateRepoUpload successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the TemplateRepoUploadOptions model
				templateRepoUploadOptionsModel := new(schematicsv1.TemplateRepoUploadOptions)
				templateRepoUploadOptionsModel.WID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.TID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.File = CreateMockReader("This is a mock file.")
				templateRepoUploadOptionsModel.FileContentType = core.StringPtr("testString")
				templateRepoUploadOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.TemplateRepoUploadWithContext(ctx, templateRepoUploadOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.TemplateRepoUpload(templateRepoUploadOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.TemplateRepoUploadWithContext(ctx, templateRepoUploadOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(templateRepoUploadPath))
					Expect(req.Method).To(Equal("PUT"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"file_value": "FileValue", "has_received_file": false, "id": "ID"}`)
				}))
			})
			It(`Invoke TemplateRepoUpload successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.TemplateRepoUpload(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the TemplateRepoUploadOptions model
				templateRepoUploadOptionsModel := new(schematicsv1.TemplateRepoUploadOptions)
				templateRepoUploadOptionsModel.WID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.TID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.File = CreateMockReader("This is a mock file.")
				templateRepoUploadOptionsModel.FileContentType = core.StringPtr("testString")
				templateRepoUploadOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.TemplateRepoUpload(templateRepoUploadOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke TemplateRepoUpload with error: Param validation error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:  testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the TemplateRepoUploadOptions model
				templateRepoUploadOptionsModel := new(schematicsv1.TemplateRepoUploadOptions)
				// Invoke operation with invalid options model (negative test)
				result, response, operationErr := schematicsService.TemplateRepoUpload(templateRepoUploadOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			It(`Invoke TemplateRepoUpload with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the TemplateRepoUploadOptions model
				templateRepoUploadOptionsModel := new(schematicsv1.TemplateRepoUploadOptions)
				templateRepoUploadOptionsModel.WID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.TID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.File = CreateMockReader("This is a mock file.")
				templateRepoUploadOptionsModel.FileContentType = core.StringPtr("testString")
				templateRepoUploadOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.TemplateRepoUpload(templateRepoUploadOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the TemplateRepoUploadOptions model with no property values
				templateRepoUploadOptionsModelNew := new(schematicsv1.TemplateRepoUploadOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.TemplateRepoUpload(templateRepoUploadOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke TemplateRepoUpload successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the TemplateRepoUploadOptions model
				templateRepoUploadOptionsModel := new(schematicsv1.TemplateRepoUploadOptions)
				templateRepoUploadOptionsModel.WID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.TID = core.StringPtr("testString")
				templateRepoUploadOptionsModel.File = CreateMockReader("This is a mock file.")
				templateRepoUploadOptionsModel.FileContentType = core.StringPtr("testString")
				templateRepoUploadOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.TemplateRepoUpload(templateRepoUploadOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceInputs(getWorkspaceInputsOptions *GetWorkspaceInputsOptions) - Operation response error`, func() {
		getWorkspaceInputsPath := "/v1/workspaces/testString/template_data/testString/values"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceInputsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceInputs with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceInputsOptions model
				getWorkspaceInputsOptionsModel := new(schematicsv1.GetWorkspaceInputsOptions)
				getWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceInputs(getWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceInputs(getWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceInputs(getWorkspaceInputsOptions *GetWorkspaceInputsOptions)`, func() {
		getWorkspaceInputsPath := "/v1/workspaces/testString/template_data/testString/values"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceInputsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"values_metadata": [{"anyKey": "anyValue"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceInputs successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceInputsOptions model
				getWorkspaceInputsOptionsModel := new(schematicsv1.GetWorkspaceInputsOptions)
				getWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceInputsWithContext(ctx, getWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceInputs(getWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceInputsWithContext(ctx, getWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceInputsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"values_metadata": [{"anyKey": "anyValue"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceInputs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceInputs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceInputsOptions model
				getWorkspaceInputsOptionsModel := new(schematicsv1.GetWorkspaceInputsOptions)
				getWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceInputs(getWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceInputs with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceInputsOptions model
				getWorkspaceInputsOptionsModel := new(schematicsv1.GetWorkspaceInputsOptions)
				getWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceInputs(getWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceInputsOptions model with no property values
				getWorkspaceInputsOptionsModelNew := new(schematicsv1.GetWorkspaceInputsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceInputs(getWorkspaceInputsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetWorkspaceInputs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceInputsOptions model
				getWorkspaceInputsOptionsModel := new(schematicsv1.GetWorkspaceInputsOptions)
				getWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetWorkspaceInputs(getWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceWorkspaceInputs(replaceWorkspaceInputsOptions *ReplaceWorkspaceInputsOptions) - Operation response error`, func() {
		replaceWorkspaceInputsPath := "/v1/workspaces/testString/template_data/testString/values"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWorkspaceInputsPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceWorkspaceInputs with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceInputsOptions model
				replaceWorkspaceInputsOptionsModel := new(schematicsv1.ReplaceWorkspaceInputsOptions)
				replaceWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				replaceWorkspaceInputsOptionsModel.Values = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}
				replaceWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ReplaceWorkspaceInputs(replaceWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ReplaceWorkspaceInputs(replaceWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceWorkspaceInputs(replaceWorkspaceInputsOptions *ReplaceWorkspaceInputsOptions)`, func() {
		replaceWorkspaceInputsPath := "/v1/workspaces/testString/template_data/testString/values"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWorkspaceInputsPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"env_values": [{"anyKey": "anyValue"}], "env_values_map": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "values": "Values", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}`)
				}))
			})
			It(`Invoke ReplaceWorkspaceInputs successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceInputsOptions model
				replaceWorkspaceInputsOptionsModel := new(schematicsv1.ReplaceWorkspaceInputsOptions)
				replaceWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				replaceWorkspaceInputsOptionsModel.Values = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}
				replaceWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ReplaceWorkspaceInputsWithContext(ctx, replaceWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ReplaceWorkspaceInputs(replaceWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ReplaceWorkspaceInputsWithContext(ctx, replaceWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceWorkspaceInputsPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"env_values": [{"anyKey": "anyValue"}], "env_values_map": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "values": "Values", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}`)
				}))
			})
			It(`Invoke ReplaceWorkspaceInputs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ReplaceWorkspaceInputs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceInputsOptions model
				replaceWorkspaceInputsOptionsModel := new(schematicsv1.ReplaceWorkspaceInputsOptions)
				replaceWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				replaceWorkspaceInputsOptionsModel.Values = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}
				replaceWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ReplaceWorkspaceInputs(replaceWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceWorkspaceInputs with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceInputsOptions model
				replaceWorkspaceInputsOptionsModel := new(schematicsv1.ReplaceWorkspaceInputsOptions)
				replaceWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				replaceWorkspaceInputsOptionsModel.Values = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}
				replaceWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ReplaceWorkspaceInputs(replaceWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceWorkspaceInputsOptions model with no property values
				replaceWorkspaceInputsOptionsModelNew := new(schematicsv1.ReplaceWorkspaceInputsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ReplaceWorkspaceInputs(replaceWorkspaceInputsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceWorkspaceInputs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")

				// Construct an instance of the ReplaceWorkspaceInputsOptions model
				replaceWorkspaceInputsOptionsModel := new(schematicsv1.ReplaceWorkspaceInputsOptions)
				replaceWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.TID = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				replaceWorkspaceInputsOptionsModel.Values = core.StringPtr("testString")
				replaceWorkspaceInputsOptionsModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}
				replaceWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ReplaceWorkspaceInputs(replaceWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAllWorkspaceInputs(getAllWorkspaceInputsOptions *GetAllWorkspaceInputsOptions) - Operation response error`, func() {
		getAllWorkspaceInputsPath := "/v1/workspaces/testString/templates/values"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAllWorkspaceInputsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAllWorkspaceInputs with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetAllWorkspaceInputsOptions model
				getAllWorkspaceInputsOptionsModel := new(schematicsv1.GetAllWorkspaceInputsOptions)
				getAllWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getAllWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetAllWorkspaceInputs(getAllWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetAllWorkspaceInputs(getAllWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAllWorkspaceInputs(getAllWorkspaceInputsOptions *GetAllWorkspaceInputsOptions)`, func() {
		getAllWorkspaceInputsPath := "/v1/workspaces/testString/templates/values"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAllWorkspaceInputsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_created_on": "ClusterCreatedOn", "cluster_id": "ClusterID", "cluster_name": "ClusterName", "cluster_type": "ClusterType", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID", "worker_count": 11, "worker_machine_type": "WorkerMachineType"}, "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}]}`)
				}))
			})
			It(`Invoke GetAllWorkspaceInputs successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetAllWorkspaceInputsOptions model
				getAllWorkspaceInputsOptionsModel := new(schematicsv1.GetAllWorkspaceInputsOptions)
				getAllWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getAllWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetAllWorkspaceInputsWithContext(ctx, getAllWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetAllWorkspaceInputs(getAllWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetAllWorkspaceInputsWithContext(ctx, getAllWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAllWorkspaceInputsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"runtime_data": [{"engine_cmd": "EngineCmd", "engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL", "output_values": [{"anyKey": "anyValue"}], "resources": [[{"anyKey": "anyValue"}]], "state_store_url": "StateStoreURL"}], "shared_data": {"cluster_created_on": "ClusterCreatedOn", "cluster_id": "ClusterID", "cluster_name": "ClusterName", "cluster_type": "ClusterType", "entitlement_keys": [{"anyKey": "anyValue"}], "namespace": "Namespace", "region": "Region", "resource_group_id": "ResourceGroupID", "worker_count": 11, "worker_machine_type": "WorkerMachineType"}, "template_data": [{"env_values": [{"hidden": true, "name": "Name", "secure": true, "value": "Value"}], "folder": "Folder", "compact": false, "has_githubtoken": true, "id": "ID", "type": "Type", "uninstall_script_name": "UninstallScriptName", "values": "Values", "values_metadata": [{"anyKey": "anyValue"}], "values_url": "ValuesURL", "variablestore": [{"description": "Description", "name": "Name", "secure": true, "type": "Type", "value": "Value"}]}]}`)
				}))
			})
			It(`Invoke GetAllWorkspaceInputs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetAllWorkspaceInputs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAllWorkspaceInputsOptions model
				getAllWorkspaceInputsOptionsModel := new(schematicsv1.GetAllWorkspaceInputsOptions)
				getAllWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getAllWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetAllWorkspaceInputs(getAllWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAllWorkspaceInputs with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetAllWorkspaceInputsOptions model
				getAllWorkspaceInputsOptionsModel := new(schematicsv1.GetAllWorkspaceInputsOptions)
				getAllWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getAllWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetAllWorkspaceInputs(getAllWorkspaceInputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetAllWorkspaceInputsOptions model with no property values
				getAllWorkspaceInputsOptionsModelNew := new(schematicsv1.GetAllWorkspaceInputsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetAllWorkspaceInputs(getAllWorkspaceInputsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetAllWorkspaceInputs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetAllWorkspaceInputsOptions model
				getAllWorkspaceInputsOptionsModel := new(schematicsv1.GetAllWorkspaceInputsOptions)
				getAllWorkspaceInputsOptionsModel.WID = core.StringPtr("testString")
				getAllWorkspaceInputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetAllWorkspaceInputs(getAllWorkspaceInputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceInputMetadata(getWorkspaceInputMetadataOptions *GetWorkspaceInputMetadataOptions)`, func() {
		getWorkspaceInputMetadataPath := "/v1/workspaces/testString/template_data/testString/values_metadata"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceInputMetadataPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"anyKey": "anyValue"}]`)
				}))
			})
			It(`Invoke GetWorkspaceInputMetadata successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceInputMetadataOptions model
				getWorkspaceInputMetadataOptionsModel := new(schematicsv1.GetWorkspaceInputMetadataOptions)
				getWorkspaceInputMetadataOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputMetadataOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceInputMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceInputMetadataWithContext(ctx, getWorkspaceInputMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceInputMetadata(getWorkspaceInputMetadataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceInputMetadataWithContext(ctx, getWorkspaceInputMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceInputMetadataPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"anyKey": "anyValue"}]`)
				}))
			})
			It(`Invoke GetWorkspaceInputMetadata successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceInputMetadata(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceInputMetadataOptions model
				getWorkspaceInputMetadataOptionsModel := new(schematicsv1.GetWorkspaceInputMetadataOptions)
				getWorkspaceInputMetadataOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputMetadataOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceInputMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceInputMetadata(getWorkspaceInputMetadataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceInputMetadata with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceInputMetadataOptions model
				getWorkspaceInputMetadataOptionsModel := new(schematicsv1.GetWorkspaceInputMetadataOptions)
				getWorkspaceInputMetadataOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputMetadataOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceInputMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceInputMetadata(getWorkspaceInputMetadataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceInputMetadataOptions model with no property values
				getWorkspaceInputMetadataOptionsModelNew := new(schematicsv1.GetWorkspaceInputMetadataOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceInputMetadata(getWorkspaceInputMetadataOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetWorkspaceInputMetadata successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceInputMetadataOptions model
				getWorkspaceInputMetadataOptionsModel := new(schematicsv1.GetWorkspaceInputMetadataOptions)
				getWorkspaceInputMetadataOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceInputMetadataOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceInputMetadataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetWorkspaceInputMetadata(getWorkspaceInputMetadataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceOutputs(getWorkspaceOutputsOptions *GetWorkspaceOutputsOptions) - Operation response error`, func() {
		getWorkspaceOutputsPath := "/v1/workspaces/testString/output_values"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceOutputsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceOutputs with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceOutputsOptions model
				getWorkspaceOutputsOptionsModel := new(schematicsv1.GetWorkspaceOutputsOptions)
				getWorkspaceOutputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceOutputs(getWorkspaceOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceOutputs(getWorkspaceOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceOutputs(getWorkspaceOutputsOptions *GetWorkspaceOutputsOptions)`, func() {
		getWorkspaceOutputsPath := "/v1/workspaces/testString/output_values"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceOutputsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"folder": "Folder", "id": "ID", "output_values": [{"anyKey": "anyValue"}], "value_type": "ValueType"}]`)
				}))
			})
			It(`Invoke GetWorkspaceOutputs successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceOutputsOptions model
				getWorkspaceOutputsOptionsModel := new(schematicsv1.GetWorkspaceOutputsOptions)
				getWorkspaceOutputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceOutputsWithContext(ctx, getWorkspaceOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceOutputs(getWorkspaceOutputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceOutputsWithContext(ctx, getWorkspaceOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceOutputsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"folder": "Folder", "id": "ID", "output_values": [{"anyKey": "anyValue"}], "value_type": "ValueType"}]`)
				}))
			})
			It(`Invoke GetWorkspaceOutputs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceOutputs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceOutputsOptions model
				getWorkspaceOutputsOptionsModel := new(schematicsv1.GetWorkspaceOutputsOptions)
				getWorkspaceOutputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceOutputs(getWorkspaceOutputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceOutputs with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceOutputsOptions model
				getWorkspaceOutputsOptionsModel := new(schematicsv1.GetWorkspaceOutputsOptions)
				getWorkspaceOutputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceOutputs(getWorkspaceOutputsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceOutputsOptions model with no property values
				getWorkspaceOutputsOptionsModelNew := new(schematicsv1.GetWorkspaceOutputsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceOutputs(getWorkspaceOutputsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetWorkspaceOutputs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceOutputsOptions model
				getWorkspaceOutputsOptionsModel := new(schematicsv1.GetWorkspaceOutputsOptions)
				getWorkspaceOutputsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceOutputsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetWorkspaceOutputs(getWorkspaceOutputsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceResources(getWorkspaceResourcesOptions *GetWorkspaceResourcesOptions) - Operation response error`, func() {
		getWorkspaceResourcesPath := "/v1/workspaces/testString/resources"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceResourcesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceResources with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceResourcesOptions model
				getWorkspaceResourcesOptionsModel := new(schematicsv1.GetWorkspaceResourcesOptions)
				getWorkspaceResourcesOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceResources(getWorkspaceResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceResources(getWorkspaceResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceResources(getWorkspaceResourcesOptions *GetWorkspaceResourcesOptions)`, func() {
		getWorkspaceResourcesPath := "/v1/workspaces/testString/resources"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceResourcesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"folder": "Folder", "id": "ID", "generated_at": "2019-01-01T12:00:00.000Z", "null_resources": [{"anyKey": "anyValue"}], "related_resources": [{"anyKey": "anyValue"}], "resources": [{"anyKey": "anyValue"}], "resources_count": 14, "type": "Type"}]`)
				}))
			})
			It(`Invoke GetWorkspaceResources successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceResourcesOptions model
				getWorkspaceResourcesOptionsModel := new(schematicsv1.GetWorkspaceResourcesOptions)
				getWorkspaceResourcesOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceResourcesWithContext(ctx, getWorkspaceResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceResources(getWorkspaceResourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceResourcesWithContext(ctx, getWorkspaceResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceResourcesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `[{"folder": "Folder", "id": "ID", "generated_at": "2019-01-01T12:00:00.000Z", "null_resources": [{"anyKey": "anyValue"}], "related_resources": [{"anyKey": "anyValue"}], "resources": [{"anyKey": "anyValue"}], "resources_count": 14, "type": "Type"}]`)
				}))
			})
			It(`Invoke GetWorkspaceResources successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceResources(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceResourcesOptions model
				getWorkspaceResourcesOptionsModel := new(schematicsv1.GetWorkspaceResourcesOptions)
				getWorkspaceResourcesOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceResources(getWorkspaceResourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceResources with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceResourcesOptions model
				getWorkspaceResourcesOptionsModel := new(schematicsv1.GetWorkspaceResourcesOptions)
				getWorkspaceResourcesOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceResources(getWorkspaceResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceResourcesOptions model with no property values
				getWorkspaceResourcesOptionsModelNew := new(schematicsv1.GetWorkspaceResourcesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceResources(getWorkspaceResourcesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetWorkspaceResources successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceResourcesOptions model
				getWorkspaceResourcesOptionsModel := new(schematicsv1.GetWorkspaceResourcesOptions)
				getWorkspaceResourcesOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetWorkspaceResources(getWorkspaceResourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceState(getWorkspaceStateOptions *GetWorkspaceStateOptions) - Operation response error`, func() {
		getWorkspaceStatePath := "/v1/workspaces/testString/state_stores"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceStatePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceState with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceStateOptions model
				getWorkspaceStateOptionsModel := new(schematicsv1.GetWorkspaceStateOptions)
				getWorkspaceStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceState(getWorkspaceStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceState(getWorkspaceStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceState(getWorkspaceStateOptions *GetWorkspaceStateOptions)`, func() {
		getWorkspaceStatePath := "/v1/workspaces/testString/state_stores"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceStatePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"runtime_data": [{"engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "state_store_url": "StateStoreURL"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceState successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceStateOptions model
				getWorkspaceStateOptionsModel := new(schematicsv1.GetWorkspaceStateOptions)
				getWorkspaceStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceStateWithContext(ctx, getWorkspaceStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceState(getWorkspaceStateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceStateWithContext(ctx, getWorkspaceStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceStatePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"runtime_data": [{"engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "state_store_url": "StateStoreURL"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceState successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceState(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceStateOptions model
				getWorkspaceStateOptionsModel := new(schematicsv1.GetWorkspaceStateOptions)
				getWorkspaceStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceState(getWorkspaceStateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceState with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceStateOptions model
				getWorkspaceStateOptionsModel := new(schematicsv1.GetWorkspaceStateOptions)
				getWorkspaceStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceState(getWorkspaceStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceStateOptions model with no property values
				getWorkspaceStateOptionsModelNew := new(schematicsv1.GetWorkspaceStateOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceState(getWorkspaceStateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetWorkspaceState successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceStateOptions model
				getWorkspaceStateOptionsModel := new(schematicsv1.GetWorkspaceStateOptions)
				getWorkspaceStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetWorkspaceState(getWorkspaceStateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceTemplateState(getWorkspaceTemplateStateOptions *GetWorkspaceTemplateStateOptions) - Operation response error`, func() {
		getWorkspaceTemplateStatePath := "/v1/workspaces/testString/runtime_data/testString/state_store"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceTemplateStatePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceTemplateState with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceTemplateStateOptions model
				getWorkspaceTemplateStateOptionsModel := new(schematicsv1.GetWorkspaceTemplateStateOptions)
				getWorkspaceTemplateStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceTemplateState(getWorkspaceTemplateStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceTemplateState(getWorkspaceTemplateStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceTemplateState(getWorkspaceTemplateStateOptions *GetWorkspaceTemplateStateOptions)`, func() {
		getWorkspaceTemplateStatePath := "/v1/workspaces/testString/runtime_data/testString/state_store"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceTemplateStatePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"version": 7, "terraform_version": "TerraformVersion", "serial": 6, "lineage": "Lineage", "modules": [{"anyKey": "anyValue"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceTemplateState successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceTemplateStateOptions model
				getWorkspaceTemplateStateOptionsModel := new(schematicsv1.GetWorkspaceTemplateStateOptions)
				getWorkspaceTemplateStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceTemplateStateWithContext(ctx, getWorkspaceTemplateStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceTemplateState(getWorkspaceTemplateStateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceTemplateStateWithContext(ctx, getWorkspaceTemplateStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceTemplateStatePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"version": 7, "terraform_version": "TerraformVersion", "serial": 6, "lineage": "Lineage", "modules": [{"anyKey": "anyValue"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceTemplateState successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceTemplateState(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceTemplateStateOptions model
				getWorkspaceTemplateStateOptionsModel := new(schematicsv1.GetWorkspaceTemplateStateOptions)
				getWorkspaceTemplateStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceTemplateState(getWorkspaceTemplateStateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceTemplateState with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceTemplateStateOptions model
				getWorkspaceTemplateStateOptionsModel := new(schematicsv1.GetWorkspaceTemplateStateOptions)
				getWorkspaceTemplateStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceTemplateState(getWorkspaceTemplateStateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceTemplateStateOptions model with no property values
				getWorkspaceTemplateStateOptionsModelNew := new(schematicsv1.GetWorkspaceTemplateStateOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceTemplateState(getWorkspaceTemplateStateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetWorkspaceTemplateState successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceTemplateStateOptions model
				getWorkspaceTemplateStateOptionsModel := new(schematicsv1.GetWorkspaceTemplateStateOptions)
				getWorkspaceTemplateStateOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.TID = core.StringPtr("testString")
				getWorkspaceTemplateStateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetWorkspaceTemplateState(getWorkspaceTemplateStateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptions *GetWorkspaceActivityLogsOptions) - Operation response error`, func() {
		getWorkspaceActivityLogsPath := "/v1/workspaces/testString/actions/testString/logs"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceActivityLogsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceActivityLogs with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceActivityLogsOptions model
				getWorkspaceActivityLogsOptionsModel := new(schematicsv1.GetWorkspaceActivityLogsOptions)
				getWorkspaceActivityLogsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptions *GetWorkspaceActivityLogsOptions)`, func() {
		getWorkspaceActivityLogsPath := "/v1/workspaces/testString/actions/testString/logs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceActivityLogsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action_id": "ActionID", "name": "Name", "templates": [{"log_url": "LogURL", "template_id": "TemplateID", "template_type": "TemplateType"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceActivityLogs successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceActivityLogsOptions model
				getWorkspaceActivityLogsOptionsModel := new(schematicsv1.GetWorkspaceActivityLogsOptions)
				getWorkspaceActivityLogsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceActivityLogsWithContext(ctx, getWorkspaceActivityLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceActivityLogsWithContext(ctx, getWorkspaceActivityLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceActivityLogsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action_id": "ActionID", "name": "Name", "templates": [{"log_url": "LogURL", "template_id": "TemplateID", "template_type": "TemplateType"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceActivityLogs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceActivityLogs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceActivityLogsOptions model
				getWorkspaceActivityLogsOptionsModel := new(schematicsv1.GetWorkspaceActivityLogsOptions)
				getWorkspaceActivityLogsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceActivityLogs with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceActivityLogsOptions model
				getWorkspaceActivityLogsOptionsModel := new(schematicsv1.GetWorkspaceActivityLogsOptions)
				getWorkspaceActivityLogsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceActivityLogsOptions model with no property values
				getWorkspaceActivityLogsOptionsModelNew := new(schematicsv1.GetWorkspaceActivityLogsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetWorkspaceActivityLogs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceActivityLogsOptions model
				getWorkspaceActivityLogsOptionsModel := new(schematicsv1.GetWorkspaceActivityLogsOptions)
				getWorkspaceActivityLogsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetWorkspaceActivityLogs(getWorkspaceActivityLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceLogUrls(getWorkspaceLogUrlsOptions *GetWorkspaceLogUrlsOptions) - Operation response error`, func() {
		getWorkspaceLogUrlsPath := "/v1/workspaces/testString/log_stores"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceLogUrlsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceLogUrls with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceLogUrlsOptions model
				getWorkspaceLogUrlsOptionsModel := new(schematicsv1.GetWorkspaceLogUrlsOptions)
				getWorkspaceLogUrlsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceLogUrlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceLogUrls(getWorkspaceLogUrlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceLogUrls(getWorkspaceLogUrlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceLogUrls(getWorkspaceLogUrlsOptions *GetWorkspaceLogUrlsOptions)`, func() {
		getWorkspaceLogUrlsPath := "/v1/workspaces/testString/log_stores"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceLogUrlsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"runtime_data": [{"engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceLogUrls successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceLogUrlsOptions model
				getWorkspaceLogUrlsOptionsModel := new(schematicsv1.GetWorkspaceLogUrlsOptions)
				getWorkspaceLogUrlsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceLogUrlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceLogUrlsWithContext(ctx, getWorkspaceLogUrlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceLogUrls(getWorkspaceLogUrlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceLogUrlsWithContext(ctx, getWorkspaceLogUrlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceLogUrlsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"runtime_data": [{"engine_name": "EngineName", "engine_version": "EngineVersion", "id": "ID", "log_store_url": "LogStoreURL"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceLogUrls successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceLogUrls(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceLogUrlsOptions model
				getWorkspaceLogUrlsOptionsModel := new(schematicsv1.GetWorkspaceLogUrlsOptions)
				getWorkspaceLogUrlsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceLogUrlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceLogUrls(getWorkspaceLogUrlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceLogUrls with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceLogUrlsOptions model
				getWorkspaceLogUrlsOptionsModel := new(schematicsv1.GetWorkspaceLogUrlsOptions)
				getWorkspaceLogUrlsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceLogUrlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceLogUrls(getWorkspaceLogUrlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceLogUrlsOptions model with no property values
				getWorkspaceLogUrlsOptionsModelNew := new(schematicsv1.GetWorkspaceLogUrlsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceLogUrls(getWorkspaceLogUrlsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetWorkspaceLogUrls successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceLogUrlsOptions model
				getWorkspaceLogUrlsOptionsModel := new(schematicsv1.GetWorkspaceLogUrlsOptions)
				getWorkspaceLogUrlsOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceLogUrlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetWorkspaceLogUrls(getWorkspaceLogUrlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTemplateLogs(getTemplateLogsOptions *GetTemplateLogsOptions)`, func() {
		getTemplateLogsPath := "/v1/workspaces/testString/runtime_data/testString/log_store"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplateLogsPath))
					Expect(req.Method).To(Equal("GET"))

					// TODO: Add check for log_tf_cmd query parameter
					// TODO: Add check for log_tf_prefix query parameter
					// TODO: Add check for log_tf_null_resource query parameter
					// TODO: Add check for log_tf_ansible query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GetTemplateLogs successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetTemplateLogsOptions model
				getTemplateLogsOptionsModel := new(schematicsv1.GetTemplateLogsOptions)
				getTemplateLogsOptionsModel.WID = core.StringPtr("testString")
				getTemplateLogsOptionsModel.TID = core.StringPtr("testString")
				getTemplateLogsOptionsModel.LogTfCmd = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfPrefix = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfNullResource = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfAnsible = core.BoolPtr(true)
				getTemplateLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetTemplateLogsWithContext(ctx, getTemplateLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetTemplateLogs(getTemplateLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetTemplateLogsWithContext(ctx, getTemplateLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplateLogsPath))
					Expect(req.Method).To(Equal("GET"))

					// TODO: Add check for log_tf_cmd query parameter
					// TODO: Add check for log_tf_prefix query parameter
					// TODO: Add check for log_tf_null_resource query parameter
					// TODO: Add check for log_tf_ansible query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GetTemplateLogs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetTemplateLogs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTemplateLogsOptions model
				getTemplateLogsOptionsModel := new(schematicsv1.GetTemplateLogsOptions)
				getTemplateLogsOptionsModel.WID = core.StringPtr("testString")
				getTemplateLogsOptionsModel.TID = core.StringPtr("testString")
				getTemplateLogsOptionsModel.LogTfCmd = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfPrefix = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfNullResource = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfAnsible = core.BoolPtr(true)
				getTemplateLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetTemplateLogs(getTemplateLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTemplateLogs with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetTemplateLogsOptions model
				getTemplateLogsOptionsModel := new(schematicsv1.GetTemplateLogsOptions)
				getTemplateLogsOptionsModel.WID = core.StringPtr("testString")
				getTemplateLogsOptionsModel.TID = core.StringPtr("testString")
				getTemplateLogsOptionsModel.LogTfCmd = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfPrefix = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfNullResource = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfAnsible = core.BoolPtr(true)
				getTemplateLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetTemplateLogs(getTemplateLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTemplateLogsOptions model with no property values
				getTemplateLogsOptionsModelNew := new(schematicsv1.GetTemplateLogsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetTemplateLogs(getTemplateLogsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetTemplateLogs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetTemplateLogsOptions model
				getTemplateLogsOptionsModel := new(schematicsv1.GetTemplateLogsOptions)
				getTemplateLogsOptionsModel.WID = core.StringPtr("testString")
				getTemplateLogsOptionsModel.TID = core.StringPtr("testString")
				getTemplateLogsOptionsModel.LogTfCmd = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfPrefix = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfNullResource = core.BoolPtr(true)
				getTemplateLogsOptionsModel.LogTfAnsible = core.BoolPtr(true)
				getTemplateLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetTemplateLogs(getTemplateLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTemplateActivityLog(getTemplateActivityLogOptions *GetTemplateActivityLogOptions)`, func() {
		getTemplateActivityLogPath := "/v1/workspaces/testString/runtime_data/testString/log_store/actions/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplateActivityLogPath))
					Expect(req.Method).To(Equal("GET"))

					// TODO: Add check for log_tf_cmd query parameter
					// TODO: Add check for log_tf_prefix query parameter
					// TODO: Add check for log_tf_null_resource query parameter
					// TODO: Add check for log_tf_ansible query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GetTemplateActivityLog successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetTemplateActivityLogOptions model
				getTemplateActivityLogOptionsModel := new(schematicsv1.GetTemplateActivityLogOptions)
				getTemplateActivityLogOptionsModel.WID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.TID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.ActivityID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.LogTfCmd = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfPrefix = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfNullResource = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfAnsible = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetTemplateActivityLogWithContext(ctx, getTemplateActivityLogOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetTemplateActivityLog(getTemplateActivityLogOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetTemplateActivityLogWithContext(ctx, getTemplateActivityLogOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTemplateActivityLogPath))
					Expect(req.Method).To(Equal("GET"))

					// TODO: Add check for log_tf_cmd query parameter
					// TODO: Add check for log_tf_prefix query parameter
					// TODO: Add check for log_tf_null_resource query parameter
					// TODO: Add check for log_tf_ansible query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GetTemplateActivityLog successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetTemplateActivityLog(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTemplateActivityLogOptions model
				getTemplateActivityLogOptionsModel := new(schematicsv1.GetTemplateActivityLogOptions)
				getTemplateActivityLogOptionsModel.WID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.TID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.ActivityID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.LogTfCmd = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfPrefix = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfNullResource = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfAnsible = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetTemplateActivityLog(getTemplateActivityLogOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetTemplateActivityLog with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetTemplateActivityLogOptions model
				getTemplateActivityLogOptionsModel := new(schematicsv1.GetTemplateActivityLogOptions)
				getTemplateActivityLogOptionsModel.WID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.TID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.ActivityID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.LogTfCmd = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfPrefix = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfNullResource = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfAnsible = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetTemplateActivityLog(getTemplateActivityLogOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTemplateActivityLogOptions model with no property values
				getTemplateActivityLogOptionsModelNew := new(schematicsv1.GetTemplateActivityLogOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetTemplateActivityLog(getTemplateActivityLogOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetTemplateActivityLog successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetTemplateActivityLogOptions model
				getTemplateActivityLogOptionsModel := new(schematicsv1.GetTemplateActivityLogOptions)
				getTemplateActivityLogOptionsModel.WID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.TID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.ActivityID = core.StringPtr("testString")
				getTemplateActivityLogOptionsModel.LogTfCmd = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfPrefix = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfNullResource = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.LogTfAnsible = core.BoolPtr(true)
				getTemplateActivityLogOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetTemplateActivityLog(getTemplateActivityLogOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListActions(listActionsOptions *ListActionsOptions) - Operation response error`, func() {
		listActionsPath := "/v2/actions"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listActionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListActions with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListActionsOptions model
				listActionsOptionsModel := new(schematicsv1.ListActionsOptions)
				listActionsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listActionsOptionsModel.Limit = core.Int64Ptr(int64(100))
				listActionsOptionsModel.Sort = core.StringPtr("testString")
				listActionsOptionsModel.Profile = core.StringPtr("ids")
				listActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListActions(listActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListActions(listActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListActions(listActionsOptions *ListActionsOptions)`, func() {
		listActionsPath := "/v2/actions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listActionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "actions": [{"name": "Stop Action", "description": "This Action can be used to Stop the targets", "id": "ID", "crn": "Crn", "location": "us-south", "resource_group": "ResourceGroup", "namespace": "Namespace", "tags": ["Tags"], "playbook_name": "PlaybookName", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}]}`)
				}))
			})
			It(`Invoke ListActions successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListActionsOptions model
				listActionsOptionsModel := new(schematicsv1.ListActionsOptions)
				listActionsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listActionsOptionsModel.Limit = core.Int64Ptr(int64(100))
				listActionsOptionsModel.Sort = core.StringPtr("testString")
				listActionsOptionsModel.Profile = core.StringPtr("ids")
				listActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListActionsWithContext(ctx, listActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListActions(listActionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListActionsWithContext(ctx, listActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listActionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "actions": [{"name": "Stop Action", "description": "This Action can be used to Stop the targets", "id": "ID", "crn": "Crn", "location": "us-south", "resource_group": "ResourceGroup", "namespace": "Namespace", "tags": ["Tags"], "playbook_name": "PlaybookName", "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "normal", "status_message": "StatusMessage"}, "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}]}`)
				}))
			})
			It(`Invoke ListActions successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListActions(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListActionsOptions model
				listActionsOptionsModel := new(schematicsv1.ListActionsOptions)
				listActionsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listActionsOptionsModel.Limit = core.Int64Ptr(int64(100))
				listActionsOptionsModel.Sort = core.StringPtr("testString")
				listActionsOptionsModel.Profile = core.StringPtr("ids")
				listActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListActions(listActionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListActions with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListActionsOptions model
				listActionsOptionsModel := new(schematicsv1.ListActionsOptions)
				listActionsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listActionsOptionsModel.Limit = core.Int64Ptr(int64(100))
				listActionsOptionsModel.Sort = core.StringPtr("testString")
				listActionsOptionsModel.Profile = core.StringPtr("ids")
				listActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListActions(listActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListActions successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListActionsOptions model
				listActionsOptionsModel := new(schematicsv1.ListActionsOptions)
				listActionsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listActionsOptionsModel.Limit = core.Int64Ptr(int64(100))
				listActionsOptionsModel.Sort = core.StringPtr("testString")
				listActionsOptionsModel.Profile = core.StringPtr("ids")
				listActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ListActions(listActionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateAction(createActionOptions *CreateActionOptions) - Operation response error`, func() {
		createActionPath := "/v2/actions"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createActionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateAction with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematicsv1.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematicsv1.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the CreateActionOptions model
				createActionOptionsModel := new(schematicsv1.CreateActionOptions)
				createActionOptionsModel.Name = core.StringPtr("Stop Action")
				createActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				createActionOptionsModel.Location = core.StringPtr("us-south")
				createActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				createActionOptionsModel.BastionConnectionType = core.StringPtr("ssh")
				createActionOptionsModel.InventoryConnectionType = core.StringPtr("ssh")
				createActionOptionsModel.Tags = []string{"testString"}
				createActionOptionsModel.UserState = userStateModel
				createActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				createActionOptionsModel.Source = externalSourceModel
				createActionOptionsModel.SourceType = core.StringPtr("local")
				createActionOptionsModel.CommandParameter = core.StringPtr("testString")
				createActionOptionsModel.Inventory = core.StringPtr("testString")
				createActionOptionsModel.Credentials = []schematicsv1.CredentialVariableData{*credentialVariableDataModel}
				createActionOptionsModel.Bastion = bastionResourceDefinitionModel
				createActionOptionsModel.BastionCredential = credentialVariableDataModel
				createActionOptionsModel.TargetsIni = core.StringPtr("testString")
				createActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.XGithubToken = core.StringPtr("testString")
				createActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.CreateAction(createActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.CreateAction(createActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateAction(createActionOptions *CreateActionOptions)`, func() {
		createActionPath := "/v2/actions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createActionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "ResourceGroup", "bastion_connection_type": "ssh", "inventory_connection_type": "ssh", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "source_type": "local", "command_parameter": "CommandParameter", "inventory": "Inventory", "credentials": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "bastion": {"name": "Name", "host": "Host"}, "bastion_credential": {"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}, "targets_ini": "TargetsIni", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_job_id": "StatusJobID", "status_message": "StatusMessage"}, "playbook_names": ["PlaybookNames"], "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke CreateAction successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematicsv1.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematicsv1.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the CreateActionOptions model
				createActionOptionsModel := new(schematicsv1.CreateActionOptions)
				createActionOptionsModel.Name = core.StringPtr("Stop Action")
				createActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				createActionOptionsModel.Location = core.StringPtr("us-south")
				createActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				createActionOptionsModel.BastionConnectionType = core.StringPtr("ssh")
				createActionOptionsModel.InventoryConnectionType = core.StringPtr("ssh")
				createActionOptionsModel.Tags = []string{"testString"}
				createActionOptionsModel.UserState = userStateModel
				createActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				createActionOptionsModel.Source = externalSourceModel
				createActionOptionsModel.SourceType = core.StringPtr("local")
				createActionOptionsModel.CommandParameter = core.StringPtr("testString")
				createActionOptionsModel.Inventory = core.StringPtr("testString")
				createActionOptionsModel.Credentials = []schematicsv1.CredentialVariableData{*credentialVariableDataModel}
				createActionOptionsModel.Bastion = bastionResourceDefinitionModel
				createActionOptionsModel.BastionCredential = credentialVariableDataModel
				createActionOptionsModel.TargetsIni = core.StringPtr("testString")
				createActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.XGithubToken = core.StringPtr("testString")
				createActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.CreateActionWithContext(ctx, createActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.CreateAction(createActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.CreateActionWithContext(ctx, createActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createActionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "ResourceGroup", "bastion_connection_type": "ssh", "inventory_connection_type": "ssh", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "source_type": "local", "command_parameter": "CommandParameter", "inventory": "Inventory", "credentials": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "bastion": {"name": "Name", "host": "Host"}, "bastion_credential": {"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}, "targets_ini": "TargetsIni", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_job_id": "StatusJobID", "status_message": "StatusMessage"}, "playbook_names": ["PlaybookNames"], "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke CreateAction successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.CreateAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematicsv1.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematicsv1.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the CreateActionOptions model
				createActionOptionsModel := new(schematicsv1.CreateActionOptions)
				createActionOptionsModel.Name = core.StringPtr("Stop Action")
				createActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				createActionOptionsModel.Location = core.StringPtr("us-south")
				createActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				createActionOptionsModel.BastionConnectionType = core.StringPtr("ssh")
				createActionOptionsModel.InventoryConnectionType = core.StringPtr("ssh")
				createActionOptionsModel.Tags = []string{"testString"}
				createActionOptionsModel.UserState = userStateModel
				createActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				createActionOptionsModel.Source = externalSourceModel
				createActionOptionsModel.SourceType = core.StringPtr("local")
				createActionOptionsModel.CommandParameter = core.StringPtr("testString")
				createActionOptionsModel.Inventory = core.StringPtr("testString")
				createActionOptionsModel.Credentials = []schematicsv1.CredentialVariableData{*credentialVariableDataModel}
				createActionOptionsModel.Bastion = bastionResourceDefinitionModel
				createActionOptionsModel.BastionCredential = credentialVariableDataModel
				createActionOptionsModel.TargetsIni = core.StringPtr("testString")
				createActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.XGithubToken = core.StringPtr("testString")
				createActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.CreateAction(createActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateAction with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematicsv1.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematicsv1.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the CreateActionOptions model
				createActionOptionsModel := new(schematicsv1.CreateActionOptions)
				createActionOptionsModel.Name = core.StringPtr("Stop Action")
				createActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				createActionOptionsModel.Location = core.StringPtr("us-south")
				createActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				createActionOptionsModel.BastionConnectionType = core.StringPtr("ssh")
				createActionOptionsModel.InventoryConnectionType = core.StringPtr("ssh")
				createActionOptionsModel.Tags = []string{"testString"}
				createActionOptionsModel.UserState = userStateModel
				createActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				createActionOptionsModel.Source = externalSourceModel
				createActionOptionsModel.SourceType = core.StringPtr("local")
				createActionOptionsModel.CommandParameter = core.StringPtr("testString")
				createActionOptionsModel.Inventory = core.StringPtr("testString")
				createActionOptionsModel.Credentials = []schematicsv1.CredentialVariableData{*credentialVariableDataModel}
				createActionOptionsModel.Bastion = bastionResourceDefinitionModel
				createActionOptionsModel.BastionCredential = credentialVariableDataModel
				createActionOptionsModel.TargetsIni = core.StringPtr("testString")
				createActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.XGithubToken = core.StringPtr("testString")
				createActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.CreateAction(createActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateAction successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematicsv1.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematicsv1.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the CreateActionOptions model
				createActionOptionsModel := new(schematicsv1.CreateActionOptions)
				createActionOptionsModel.Name = core.StringPtr("Stop Action")
				createActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				createActionOptionsModel.Location = core.StringPtr("us-south")
				createActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				createActionOptionsModel.BastionConnectionType = core.StringPtr("ssh")
				createActionOptionsModel.InventoryConnectionType = core.StringPtr("ssh")
				createActionOptionsModel.Tags = []string{"testString"}
				createActionOptionsModel.UserState = userStateModel
				createActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				createActionOptionsModel.Source = externalSourceModel
				createActionOptionsModel.SourceType = core.StringPtr("local")
				createActionOptionsModel.CommandParameter = core.StringPtr("testString")
				createActionOptionsModel.Inventory = core.StringPtr("testString")
				createActionOptionsModel.Credentials = []schematicsv1.CredentialVariableData{*credentialVariableDataModel}
				createActionOptionsModel.Bastion = bastionResourceDefinitionModel
				createActionOptionsModel.BastionCredential = credentialVariableDataModel
				createActionOptionsModel.TargetsIni = core.StringPtr("testString")
				createActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createActionOptionsModel.XGithubToken = core.StringPtr("testString")
				createActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.CreateAction(createActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAction(getActionOptions *GetActionOptions) - Operation response error`, func() {
		getActionPath := "/v2/actions/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getActionPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAction with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetActionOptions model
				getActionOptionsModel := new(schematicsv1.GetActionOptions)
				getActionOptionsModel.ActionID = core.StringPtr("testString")
				getActionOptionsModel.Profile = core.StringPtr("summary")
				getActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetAction(getActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetAction(getActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAction(getActionOptions *GetActionOptions)`, func() {
		getActionPath := "/v2/actions/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getActionPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "ResourceGroup", "bastion_connection_type": "ssh", "inventory_connection_type": "ssh", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "source_type": "local", "command_parameter": "CommandParameter", "inventory": "Inventory", "credentials": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "bastion": {"name": "Name", "host": "Host"}, "bastion_credential": {"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}, "targets_ini": "TargetsIni", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_job_id": "StatusJobID", "status_message": "StatusMessage"}, "playbook_names": ["PlaybookNames"], "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetAction successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetActionOptions model
				getActionOptionsModel := new(schematicsv1.GetActionOptions)
				getActionOptionsModel.ActionID = core.StringPtr("testString")
				getActionOptionsModel.Profile = core.StringPtr("summary")
				getActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetActionWithContext(ctx, getActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetAction(getActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetActionWithContext(ctx, getActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getActionPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "ResourceGroup", "bastion_connection_type": "ssh", "inventory_connection_type": "ssh", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "source_type": "local", "command_parameter": "CommandParameter", "inventory": "Inventory", "credentials": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "bastion": {"name": "Name", "host": "Host"}, "bastion_credential": {"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}, "targets_ini": "TargetsIni", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_job_id": "StatusJobID", "status_message": "StatusMessage"}, "playbook_names": ["PlaybookNames"], "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetAction successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetActionOptions model
				getActionOptionsModel := new(schematicsv1.GetActionOptions)
				getActionOptionsModel.ActionID = core.StringPtr("testString")
				getActionOptionsModel.Profile = core.StringPtr("summary")
				getActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetAction(getActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAction with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetActionOptions model
				getActionOptionsModel := new(schematicsv1.GetActionOptions)
				getActionOptionsModel.ActionID = core.StringPtr("testString")
				getActionOptionsModel.Profile = core.StringPtr("summary")
				getActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetAction(getActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetActionOptions model with no property values
				getActionOptionsModelNew := new(schematicsv1.GetActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetAction(getActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetAction successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetActionOptions model
				getActionOptionsModel := new(schematicsv1.GetActionOptions)
				getActionOptionsModel.ActionID = core.StringPtr("testString")
				getActionOptionsModel.Profile = core.StringPtr("summary")
				getActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetAction(getActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteAction(deleteActionOptions *DeleteActionOptions)`, func() {
		deleteActionPath := "/v2/actions/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteActionPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteAction successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematicsService.DeleteAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteActionOptions model
				deleteActionOptionsModel := new(schematicsv1.DeleteActionOptions)
				deleteActionOptionsModel.ActionID = core.StringPtr("testString")
				deleteActionOptionsModel.Force = core.BoolPtr(true)
				deleteActionOptionsModel.Propagate = core.BoolPtr(true)
				deleteActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematicsService.DeleteAction(deleteActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteAction with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteActionOptions model
				deleteActionOptionsModel := new(schematicsv1.DeleteActionOptions)
				deleteActionOptionsModel.ActionID = core.StringPtr("testString")
				deleteActionOptionsModel.Force = core.BoolPtr(true)
				deleteActionOptionsModel.Propagate = core.BoolPtr(true)
				deleteActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematicsService.DeleteAction(deleteActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteActionOptions model with no property values
				deleteActionOptionsModelNew := new(schematicsv1.DeleteActionOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematicsService.DeleteAction(deleteActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateAction(updateActionOptions *UpdateActionOptions) - Operation response error`, func() {
		updateActionPath := "/v2/actions/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateActionPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateAction with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematicsv1.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematicsv1.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the UpdateActionOptions model
				updateActionOptionsModel := new(schematicsv1.UpdateActionOptions)
				updateActionOptionsModel.ActionID = core.StringPtr("testString")
				updateActionOptionsModel.Name = core.StringPtr("Stop Action")
				updateActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				updateActionOptionsModel.Location = core.StringPtr("us-south")
				updateActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateActionOptionsModel.BastionConnectionType = core.StringPtr("ssh")
				updateActionOptionsModel.InventoryConnectionType = core.StringPtr("ssh")
				updateActionOptionsModel.Tags = []string{"testString"}
				updateActionOptionsModel.UserState = userStateModel
				updateActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				updateActionOptionsModel.Source = externalSourceModel
				updateActionOptionsModel.SourceType = core.StringPtr("local")
				updateActionOptionsModel.CommandParameter = core.StringPtr("testString")
				updateActionOptionsModel.Inventory = core.StringPtr("testString")
				updateActionOptionsModel.Credentials = []schematicsv1.CredentialVariableData{*credentialVariableDataModel}
				updateActionOptionsModel.Bastion = bastionResourceDefinitionModel
				updateActionOptionsModel.BastionCredential = credentialVariableDataModel
				updateActionOptionsModel.TargetsIni = core.StringPtr("testString")
				updateActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.XGithubToken = core.StringPtr("testString")
				updateActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.UpdateAction(updateActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.UpdateAction(updateActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateAction(updateActionOptions *UpdateActionOptions)`, func() {
		updateActionPath := "/v2/actions/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateActionPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "ResourceGroup", "bastion_connection_type": "ssh", "inventory_connection_type": "ssh", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "source_type": "local", "command_parameter": "CommandParameter", "inventory": "Inventory", "credentials": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "bastion": {"name": "Name", "host": "Host"}, "bastion_credential": {"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}, "targets_ini": "TargetsIni", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_job_id": "StatusJobID", "status_message": "StatusMessage"}, "playbook_names": ["PlaybookNames"], "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke UpdateAction successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematicsv1.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematicsv1.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the UpdateActionOptions model
				updateActionOptionsModel := new(schematicsv1.UpdateActionOptions)
				updateActionOptionsModel.ActionID = core.StringPtr("testString")
				updateActionOptionsModel.Name = core.StringPtr("Stop Action")
				updateActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				updateActionOptionsModel.Location = core.StringPtr("us-south")
				updateActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateActionOptionsModel.BastionConnectionType = core.StringPtr("ssh")
				updateActionOptionsModel.InventoryConnectionType = core.StringPtr("ssh")
				updateActionOptionsModel.Tags = []string{"testString"}
				updateActionOptionsModel.UserState = userStateModel
				updateActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				updateActionOptionsModel.Source = externalSourceModel
				updateActionOptionsModel.SourceType = core.StringPtr("local")
				updateActionOptionsModel.CommandParameter = core.StringPtr("testString")
				updateActionOptionsModel.Inventory = core.StringPtr("testString")
				updateActionOptionsModel.Credentials = []schematicsv1.CredentialVariableData{*credentialVariableDataModel}
				updateActionOptionsModel.Bastion = bastionResourceDefinitionModel
				updateActionOptionsModel.BastionCredential = credentialVariableDataModel
				updateActionOptionsModel.TargetsIni = core.StringPtr("testString")
				updateActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.XGithubToken = core.StringPtr("testString")
				updateActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.UpdateActionWithContext(ctx, updateActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.UpdateAction(updateActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.UpdateActionWithContext(ctx, updateActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateActionPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["X-Github-Token"]).ToNot(BeNil())
					Expect(req.Header["X-Github-Token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Stop Action", "description": "The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.", "location": "us-south", "resource_group": "ResourceGroup", "bastion_connection_type": "ssh", "inventory_connection_type": "ssh", "tags": ["Tags"], "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "source_readme_url": "SourceReadmeURL", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "source_type": "local", "command_parameter": "CommandParameter", "inventory": "Inventory", "credentials": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "bastion": {"name": "Name", "host": "Host"}, "bastion_credential": {"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "string", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "immutable": false, "hidden": true, "required": true, "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}, "targets_ini": "TargetsIni", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "id": "ID", "crn": "Crn", "account": "Account", "source_created_at": "2019-01-01T12:00:00.000Z", "source_created_by": "SourceCreatedBy", "source_updated_at": "2019-01-01T12:00:00.000Z", "source_updated_by": "SourceUpdatedBy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "state": {"status_code": "normal", "status_job_id": "StatusJobID", "status_message": "StatusMessage"}, "playbook_names": ["PlaybookNames"], "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke UpdateAction successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.UpdateAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematicsv1.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematicsv1.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the UpdateActionOptions model
				updateActionOptionsModel := new(schematicsv1.UpdateActionOptions)
				updateActionOptionsModel.ActionID = core.StringPtr("testString")
				updateActionOptionsModel.Name = core.StringPtr("Stop Action")
				updateActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				updateActionOptionsModel.Location = core.StringPtr("us-south")
				updateActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateActionOptionsModel.BastionConnectionType = core.StringPtr("ssh")
				updateActionOptionsModel.InventoryConnectionType = core.StringPtr("ssh")
				updateActionOptionsModel.Tags = []string{"testString"}
				updateActionOptionsModel.UserState = userStateModel
				updateActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				updateActionOptionsModel.Source = externalSourceModel
				updateActionOptionsModel.SourceType = core.StringPtr("local")
				updateActionOptionsModel.CommandParameter = core.StringPtr("testString")
				updateActionOptionsModel.Inventory = core.StringPtr("testString")
				updateActionOptionsModel.Credentials = []schematicsv1.CredentialVariableData{*credentialVariableDataModel}
				updateActionOptionsModel.Bastion = bastionResourceDefinitionModel
				updateActionOptionsModel.BastionCredential = credentialVariableDataModel
				updateActionOptionsModel.TargetsIni = core.StringPtr("testString")
				updateActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.XGithubToken = core.StringPtr("testString")
				updateActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.UpdateAction(updateActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateAction with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematicsv1.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematicsv1.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the UpdateActionOptions model
				updateActionOptionsModel := new(schematicsv1.UpdateActionOptions)
				updateActionOptionsModel.ActionID = core.StringPtr("testString")
				updateActionOptionsModel.Name = core.StringPtr("Stop Action")
				updateActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				updateActionOptionsModel.Location = core.StringPtr("us-south")
				updateActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateActionOptionsModel.BastionConnectionType = core.StringPtr("ssh")
				updateActionOptionsModel.InventoryConnectionType = core.StringPtr("ssh")
				updateActionOptionsModel.Tags = []string{"testString"}
				updateActionOptionsModel.UserState = userStateModel
				updateActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				updateActionOptionsModel.Source = externalSourceModel
				updateActionOptionsModel.SourceType = core.StringPtr("local")
				updateActionOptionsModel.CommandParameter = core.StringPtr("testString")
				updateActionOptionsModel.Inventory = core.StringPtr("testString")
				updateActionOptionsModel.Credentials = []schematicsv1.CredentialVariableData{*credentialVariableDataModel}
				updateActionOptionsModel.Bastion = bastionResourceDefinitionModel
				updateActionOptionsModel.BastionCredential = credentialVariableDataModel
				updateActionOptionsModel.TargetsIni = core.StringPtr("testString")
				updateActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.XGithubToken = core.StringPtr("testString")
				updateActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.UpdateAction(updateActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateActionOptions model with no property values
				updateActionOptionsModelNew := new(schematicsv1.UpdateActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.UpdateAction(updateActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateAction successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematicsv1.CredentialVariableMetadata)
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematicsv1.CredentialVariableData)
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the UpdateActionOptions model
				updateActionOptionsModel := new(schematicsv1.UpdateActionOptions)
				updateActionOptionsModel.ActionID = core.StringPtr("testString")
				updateActionOptionsModel.Name = core.StringPtr("Stop Action")
				updateActionOptionsModel.Description = core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				updateActionOptionsModel.Location = core.StringPtr("us-south")
				updateActionOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateActionOptionsModel.BastionConnectionType = core.StringPtr("ssh")
				updateActionOptionsModel.InventoryConnectionType = core.StringPtr("ssh")
				updateActionOptionsModel.Tags = []string{"testString"}
				updateActionOptionsModel.UserState = userStateModel
				updateActionOptionsModel.SourceReadmeURL = core.StringPtr("testString")
				updateActionOptionsModel.Source = externalSourceModel
				updateActionOptionsModel.SourceType = core.StringPtr("local")
				updateActionOptionsModel.CommandParameter = core.StringPtr("testString")
				updateActionOptionsModel.Inventory = core.StringPtr("testString")
				updateActionOptionsModel.Credentials = []schematicsv1.CredentialVariableData{*credentialVariableDataModel}
				updateActionOptionsModel.Bastion = bastionResourceDefinitionModel
				updateActionOptionsModel.BastionCredential = credentialVariableDataModel
				updateActionOptionsModel.TargetsIni = core.StringPtr("testString")
				updateActionOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateActionOptionsModel.XGithubToken = core.StringPtr("testString")
				updateActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.UpdateAction(updateActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UploadTemplateTarAction(uploadTemplateTarActionOptions *UploadTemplateTarActionOptions) - Operation response error`, func() {
		uploadTemplateTarActionPath := "/v2/actions/testString/template_repo_upload"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarActionPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UploadTemplateTarAction with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarActionOptions model
				uploadTemplateTarActionOptionsModel := new(schematicsv1.UploadTemplateTarActionOptions)
				uploadTemplateTarActionOptionsModel.ActionID = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarActionOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UploadTemplateTarAction(uploadTemplateTarActionOptions *UploadTemplateTarActionOptions)`, func() {
		uploadTemplateTarActionPath := "/v2/actions/testString/template_repo_upload"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarActionPath))
					Expect(req.Method).To(Equal("PUT"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"file_value": "FileValue", "has_received_file": false, "id": "ID"}`)
				}))
			})
			It(`Invoke UploadTemplateTarAction successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the UploadTemplateTarActionOptions model
				uploadTemplateTarActionOptionsModel := new(schematicsv1.UploadTemplateTarActionOptions)
				uploadTemplateTarActionOptionsModel.ActionID = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarActionOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.UploadTemplateTarActionWithContext(ctx, uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.UploadTemplateTarActionWithContext(ctx, uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarActionPath))
					Expect(req.Method).To(Equal("PUT"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"file_value": "FileValue", "has_received_file": false, "id": "ID"}`)
				}))
			})
			It(`Invoke UploadTemplateTarAction successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.UploadTemplateTarAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UploadTemplateTarActionOptions model
				uploadTemplateTarActionOptionsModel := new(schematicsv1.UploadTemplateTarActionOptions)
				uploadTemplateTarActionOptionsModel.ActionID = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarActionOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UploadTemplateTarAction with error: Param validation error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:  testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarActionOptions model
				uploadTemplateTarActionOptionsModel := new(schematicsv1.UploadTemplateTarActionOptions)
				// Invoke operation with invalid options model (negative test)
				result, response, operationErr := schematicsService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			It(`Invoke UploadTemplateTarAction with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarActionOptions model
				uploadTemplateTarActionOptionsModel := new(schematicsv1.UploadTemplateTarActionOptions)
				uploadTemplateTarActionOptionsModel.ActionID = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarActionOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UploadTemplateTarActionOptions model with no property values
				uploadTemplateTarActionOptionsModelNew := new(schematicsv1.UploadTemplateTarActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UploadTemplateTarAction successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarActionOptions model
				uploadTemplateTarActionOptionsModel := new(schematicsv1.UploadTemplateTarActionOptions)
				uploadTemplateTarActionOptionsModel.ActionID = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarActionOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.UploadTemplateTarAction(uploadTemplateTarActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListWorkspaceActivities(listWorkspaceActivitiesOptions *ListWorkspaceActivitiesOptions) - Operation response error`, func() {
		listWorkspaceActivitiesPath := "/v1/workspaces/testString/actions"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspaceActivitiesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListWorkspaceActivities with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListWorkspaceActivitiesOptions model
				listWorkspaceActivitiesOptionsModel := new(schematicsv1.ListWorkspaceActivitiesOptions)
				listWorkspaceActivitiesOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceActivitiesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceActivitiesOptionsModel.Limit = core.Int64Ptr(int64(100))
				listWorkspaceActivitiesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListWorkspaceActivities(listWorkspaceActivitiesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListWorkspaceActivities(listWorkspaceActivitiesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListWorkspaceActivities(listWorkspaceActivitiesOptions *ListWorkspaceActivitiesOptions)`, func() {
		listWorkspaceActivitiesPath := "/v1/workspaces/testString/actions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspaceActivitiesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"actions": [{"action_id": "ActionID", "message": ["Message"], "name": "Name", "performed_at": "2019-01-01T12:00:00.000Z", "performed_by": "PerformedBy", "status": "Status", "templates": [{"end_time": "2019-01-01T12:00:00.000Z", "log_summary": {"activity_status": "ActivityStatus", "detected_template_type": "DetectedTemplateType", "discarded_files": 14, "error": "Error", "resources_added": 14, "resources_destroyed": 18, "resources_modified": 17, "scanned_files": 12, "template_variable_count": 21, "time_taken": 9}, "log_url": "LogURL", "message": "Message", "start_time": "2019-01-01T12:00:00.000Z", "status": "Status", "template_id": "TemplateID", "template_type": "TemplateType"}]}], "workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName"}`)
				}))
			})
			It(`Invoke ListWorkspaceActivities successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListWorkspaceActivitiesOptions model
				listWorkspaceActivitiesOptionsModel := new(schematicsv1.ListWorkspaceActivitiesOptions)
				listWorkspaceActivitiesOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceActivitiesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceActivitiesOptionsModel.Limit = core.Int64Ptr(int64(100))
				listWorkspaceActivitiesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListWorkspaceActivitiesWithContext(ctx, listWorkspaceActivitiesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListWorkspaceActivities(listWorkspaceActivitiesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListWorkspaceActivitiesWithContext(ctx, listWorkspaceActivitiesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listWorkspaceActivitiesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"actions": [{"action_id": "ActionID", "message": ["Message"], "name": "Name", "performed_at": "2019-01-01T12:00:00.000Z", "performed_by": "PerformedBy", "status": "Status", "templates": [{"end_time": "2019-01-01T12:00:00.000Z", "log_summary": {"activity_status": "ActivityStatus", "detected_template_type": "DetectedTemplateType", "discarded_files": 14, "error": "Error", "resources_added": 14, "resources_destroyed": 18, "resources_modified": 17, "scanned_files": 12, "template_variable_count": 21, "time_taken": 9}, "log_url": "LogURL", "message": "Message", "start_time": "2019-01-01T12:00:00.000Z", "status": "Status", "template_id": "TemplateID", "template_type": "TemplateType"}]}], "workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName"}`)
				}))
			})
			It(`Invoke ListWorkspaceActivities successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListWorkspaceActivities(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListWorkspaceActivitiesOptions model
				listWorkspaceActivitiesOptionsModel := new(schematicsv1.ListWorkspaceActivitiesOptions)
				listWorkspaceActivitiesOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceActivitiesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceActivitiesOptionsModel.Limit = core.Int64Ptr(int64(100))
				listWorkspaceActivitiesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListWorkspaceActivities(listWorkspaceActivitiesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListWorkspaceActivities with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListWorkspaceActivitiesOptions model
				listWorkspaceActivitiesOptionsModel := new(schematicsv1.ListWorkspaceActivitiesOptions)
				listWorkspaceActivitiesOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceActivitiesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceActivitiesOptionsModel.Limit = core.Int64Ptr(int64(100))
				listWorkspaceActivitiesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListWorkspaceActivities(listWorkspaceActivitiesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListWorkspaceActivitiesOptions model with no property values
				listWorkspaceActivitiesOptionsModelNew := new(schematicsv1.ListWorkspaceActivitiesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ListWorkspaceActivities(listWorkspaceActivitiesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListWorkspaceActivities successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListWorkspaceActivitiesOptions model
				listWorkspaceActivitiesOptionsModel := new(schematicsv1.ListWorkspaceActivitiesOptions)
				listWorkspaceActivitiesOptionsModel.WID = core.StringPtr("testString")
				listWorkspaceActivitiesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listWorkspaceActivitiesOptionsModel.Limit = core.Int64Ptr(int64(100))
				listWorkspaceActivitiesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ListWorkspaceActivities(listWorkspaceActivitiesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceActivity(getWorkspaceActivityOptions *GetWorkspaceActivityOptions) - Operation response error`, func() {
		getWorkspaceActivityPath := "/v1/workspaces/testString/actions/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceActivityPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceActivity with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceActivityOptions model
				getWorkspaceActivityOptionsModel := new(schematicsv1.GetWorkspaceActivityOptions)
				getWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceActivity(getWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceActivity(getWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceActivity(getWorkspaceActivityOptions *GetWorkspaceActivityOptions)`, func() {
		getWorkspaceActivityPath := "/v1/workspaces/testString/actions/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceActivityPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action_id": "ActionID", "message": ["Message"], "name": "Name", "performed_at": "2019-01-01T12:00:00.000Z", "performed_by": "PerformedBy", "status": "Status", "templates": [{"end_time": "2019-01-01T12:00:00.000Z", "log_summary": {"activity_status": "ActivityStatus", "detected_template_type": "DetectedTemplateType", "discarded_files": 14, "error": "Error", "resources_added": 14, "resources_destroyed": 18, "resources_modified": 17, "scanned_files": 12, "template_variable_count": 21, "time_taken": 9}, "log_url": "LogURL", "message": "Message", "start_time": "2019-01-01T12:00:00.000Z", "status": "Status", "template_id": "TemplateID", "template_type": "TemplateType"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceActivity successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceActivityOptions model
				getWorkspaceActivityOptionsModel := new(schematicsv1.GetWorkspaceActivityOptions)
				getWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceActivityWithContext(ctx, getWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceActivity(getWorkspaceActivityOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceActivityWithContext(ctx, getWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceActivityPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action_id": "ActionID", "message": ["Message"], "name": "Name", "performed_at": "2019-01-01T12:00:00.000Z", "performed_by": "PerformedBy", "status": "Status", "templates": [{"end_time": "2019-01-01T12:00:00.000Z", "log_summary": {"activity_status": "ActivityStatus", "detected_template_type": "DetectedTemplateType", "discarded_files": 14, "error": "Error", "resources_added": 14, "resources_destroyed": 18, "resources_modified": 17, "scanned_files": 12, "template_variable_count": 21, "time_taken": 9}, "log_url": "LogURL", "message": "Message", "start_time": "2019-01-01T12:00:00.000Z", "status": "Status", "template_id": "TemplateID", "template_type": "TemplateType"}]}`)
				}))
			})
			It(`Invoke GetWorkspaceActivity successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceActivity(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceActivityOptions model
				getWorkspaceActivityOptionsModel := new(schematicsv1.GetWorkspaceActivityOptions)
				getWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceActivity(getWorkspaceActivityOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceActivity with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceActivityOptions model
				getWorkspaceActivityOptionsModel := new(schematicsv1.GetWorkspaceActivityOptions)
				getWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceActivity(getWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceActivityOptions model with no property values
				getWorkspaceActivityOptionsModelNew := new(schematicsv1.GetWorkspaceActivityOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceActivity(getWorkspaceActivityOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetWorkspaceActivity successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceActivityOptions model
				getWorkspaceActivityOptionsModel := new(schematicsv1.GetWorkspaceActivityOptions)
				getWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				getWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetWorkspaceActivity(getWorkspaceActivityOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteWorkspaceActivity(deleteWorkspaceActivityOptions *DeleteWorkspaceActivityOptions) - Operation response error`, func() {
		deleteWorkspaceActivityPath := "/v1/workspaces/testString/actions/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteWorkspaceActivityPath))
					Expect(req.Method).To(Equal("DELETE"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke DeleteWorkspaceActivity with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteWorkspaceActivityOptions model
				deleteWorkspaceActivityOptionsModel := new(schematicsv1.DeleteWorkspaceActivityOptions)
				deleteWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.DeleteWorkspaceActivity(deleteWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.DeleteWorkspaceActivity(deleteWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteWorkspaceActivity(deleteWorkspaceActivityOptions *DeleteWorkspaceActivityOptions)`, func() {
		deleteWorkspaceActivityPath := "/v1/workspaces/testString/actions/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteWorkspaceActivityPath))
					Expect(req.Method).To(Equal("DELETE"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke DeleteWorkspaceActivity successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the DeleteWorkspaceActivityOptions model
				deleteWorkspaceActivityOptionsModel := new(schematicsv1.DeleteWorkspaceActivityOptions)
				deleteWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.DeleteWorkspaceActivityWithContext(ctx, deleteWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.DeleteWorkspaceActivity(deleteWorkspaceActivityOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.DeleteWorkspaceActivityWithContext(ctx, deleteWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteWorkspaceActivityPath))
					Expect(req.Method).To(Equal("DELETE"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke DeleteWorkspaceActivity successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.DeleteWorkspaceActivity(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DeleteWorkspaceActivityOptions model
				deleteWorkspaceActivityOptionsModel := new(schematicsv1.DeleteWorkspaceActivityOptions)
				deleteWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.DeleteWorkspaceActivity(deleteWorkspaceActivityOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke DeleteWorkspaceActivity with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteWorkspaceActivityOptions model
				deleteWorkspaceActivityOptionsModel := new(schematicsv1.DeleteWorkspaceActivityOptions)
				deleteWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.DeleteWorkspaceActivity(deleteWorkspaceActivityOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the DeleteWorkspaceActivityOptions model with no property values
				deleteWorkspaceActivityOptionsModelNew := new(schematicsv1.DeleteWorkspaceActivityOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.DeleteWorkspaceActivity(deleteWorkspaceActivityOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke DeleteWorkspaceActivity successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteWorkspaceActivityOptions model
				deleteWorkspaceActivityOptionsModel := new(schematicsv1.DeleteWorkspaceActivityOptions)
				deleteWorkspaceActivityOptionsModel.WID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.ActivityID = core.StringPtr("testString")
				deleteWorkspaceActivityOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.DeleteWorkspaceActivity(deleteWorkspaceActivityOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RunWorkspaceCommands(runWorkspaceCommandsOptions *RunWorkspaceCommandsOptions) - Operation response error`, func() {
		runWorkspaceCommandsPath := "/v1/workspaces/testString/commands"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(runWorkspaceCommandsPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke RunWorkspaceCommands with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the TerraformCommand model
				terraformCommandModel := new(schematicsv1.TerraformCommand)
				terraformCommandModel.Command = core.StringPtr("testString")
				terraformCommandModel.CommandParams = core.StringPtr("testString")
				terraformCommandModel.CommandName = core.StringPtr("testString")
				terraformCommandModel.CommandDesc = core.StringPtr("testString")
				terraformCommandModel.CommandOnError = core.StringPtr("testString")
				terraformCommandModel.CommandDependsOn = core.StringPtr("testString")
				terraformCommandModel.CommandStatus = core.StringPtr("testString")

				// Construct an instance of the RunWorkspaceCommandsOptions model
				runWorkspaceCommandsOptionsModel := new(schematicsv1.RunWorkspaceCommandsOptions)
				runWorkspaceCommandsOptionsModel.WID = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.RefreshToken = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Commands = []schematicsv1.TerraformCommand{*terraformCommandModel}
				runWorkspaceCommandsOptionsModel.OperationName = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Description = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.RunWorkspaceCommands(runWorkspaceCommandsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.RunWorkspaceCommands(runWorkspaceCommandsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RunWorkspaceCommands(runWorkspaceCommandsOptions *RunWorkspaceCommandsOptions)`, func() {
		runWorkspaceCommandsPath := "/v1/workspaces/testString/commands"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(runWorkspaceCommandsPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke RunWorkspaceCommands successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the TerraformCommand model
				terraformCommandModel := new(schematicsv1.TerraformCommand)
				terraformCommandModel.Command = core.StringPtr("testString")
				terraformCommandModel.CommandParams = core.StringPtr("testString")
				terraformCommandModel.CommandName = core.StringPtr("testString")
				terraformCommandModel.CommandDesc = core.StringPtr("testString")
				terraformCommandModel.CommandOnError = core.StringPtr("testString")
				terraformCommandModel.CommandDependsOn = core.StringPtr("testString")
				terraformCommandModel.CommandStatus = core.StringPtr("testString")

				// Construct an instance of the RunWorkspaceCommandsOptions model
				runWorkspaceCommandsOptionsModel := new(schematicsv1.RunWorkspaceCommandsOptions)
				runWorkspaceCommandsOptionsModel.WID = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.RefreshToken = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Commands = []schematicsv1.TerraformCommand{*terraformCommandModel}
				runWorkspaceCommandsOptionsModel.OperationName = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Description = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.RunWorkspaceCommandsWithContext(ctx, runWorkspaceCommandsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.RunWorkspaceCommands(runWorkspaceCommandsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.RunWorkspaceCommandsWithContext(ctx, runWorkspaceCommandsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(runWorkspaceCommandsPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke RunWorkspaceCommands successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.RunWorkspaceCommands(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the TerraformCommand model
				terraformCommandModel := new(schematicsv1.TerraformCommand)
				terraformCommandModel.Command = core.StringPtr("testString")
				terraformCommandModel.CommandParams = core.StringPtr("testString")
				terraformCommandModel.CommandName = core.StringPtr("testString")
				terraformCommandModel.CommandDesc = core.StringPtr("testString")
				terraformCommandModel.CommandOnError = core.StringPtr("testString")
				terraformCommandModel.CommandDependsOn = core.StringPtr("testString")
				terraformCommandModel.CommandStatus = core.StringPtr("testString")

				// Construct an instance of the RunWorkspaceCommandsOptions model
				runWorkspaceCommandsOptionsModel := new(schematicsv1.RunWorkspaceCommandsOptions)
				runWorkspaceCommandsOptionsModel.WID = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.RefreshToken = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Commands = []schematicsv1.TerraformCommand{*terraformCommandModel}
				runWorkspaceCommandsOptionsModel.OperationName = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Description = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.RunWorkspaceCommands(runWorkspaceCommandsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke RunWorkspaceCommands with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the TerraformCommand model
				terraformCommandModel := new(schematicsv1.TerraformCommand)
				terraformCommandModel.Command = core.StringPtr("testString")
				terraformCommandModel.CommandParams = core.StringPtr("testString")
				terraformCommandModel.CommandName = core.StringPtr("testString")
				terraformCommandModel.CommandDesc = core.StringPtr("testString")
				terraformCommandModel.CommandOnError = core.StringPtr("testString")
				terraformCommandModel.CommandDependsOn = core.StringPtr("testString")
				terraformCommandModel.CommandStatus = core.StringPtr("testString")

				// Construct an instance of the RunWorkspaceCommandsOptions model
				runWorkspaceCommandsOptionsModel := new(schematicsv1.RunWorkspaceCommandsOptions)
				runWorkspaceCommandsOptionsModel.WID = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.RefreshToken = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Commands = []schematicsv1.TerraformCommand{*terraformCommandModel}
				runWorkspaceCommandsOptionsModel.OperationName = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Description = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.RunWorkspaceCommands(runWorkspaceCommandsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the RunWorkspaceCommandsOptions model with no property values
				runWorkspaceCommandsOptionsModelNew := new(schematicsv1.RunWorkspaceCommandsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.RunWorkspaceCommands(runWorkspaceCommandsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke RunWorkspaceCommands successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the TerraformCommand model
				terraformCommandModel := new(schematicsv1.TerraformCommand)
				terraformCommandModel.Command = core.StringPtr("testString")
				terraformCommandModel.CommandParams = core.StringPtr("testString")
				terraformCommandModel.CommandName = core.StringPtr("testString")
				terraformCommandModel.CommandDesc = core.StringPtr("testString")
				terraformCommandModel.CommandOnError = core.StringPtr("testString")
				terraformCommandModel.CommandDependsOn = core.StringPtr("testString")
				terraformCommandModel.CommandStatus = core.StringPtr("testString")

				// Construct an instance of the RunWorkspaceCommandsOptions model
				runWorkspaceCommandsOptionsModel := new(schematicsv1.RunWorkspaceCommandsOptions)
				runWorkspaceCommandsOptionsModel.WID = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.RefreshToken = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Commands = []schematicsv1.TerraformCommand{*terraformCommandModel}
				runWorkspaceCommandsOptionsModel.OperationName = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Description = core.StringPtr("testString")
				runWorkspaceCommandsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.RunWorkspaceCommands(runWorkspaceCommandsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ApplyWorkspaceCommand(applyWorkspaceCommandOptions *ApplyWorkspaceCommandOptions) - Operation response error`, func() {
		applyWorkspaceCommandPath := "/v1/workspaces/testString/apply"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(applyWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ApplyWorkspaceCommand with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the ApplyWorkspaceCommandOptions model
				applyWorkspaceCommandOptionsModel := new(schematicsv1.ApplyWorkspaceCommandOptions)
				applyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				applyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ApplyWorkspaceCommand(applyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ApplyWorkspaceCommand(applyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ApplyWorkspaceCommand(applyWorkspaceCommandOptions *ApplyWorkspaceCommandOptions)`, func() {
		applyWorkspaceCommandPath := "/v1/workspaces/testString/apply"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(applyWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke ApplyWorkspaceCommand successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the ApplyWorkspaceCommandOptions model
				applyWorkspaceCommandOptionsModel := new(schematicsv1.ApplyWorkspaceCommandOptions)
				applyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				applyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ApplyWorkspaceCommandWithContext(ctx, applyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ApplyWorkspaceCommand(applyWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ApplyWorkspaceCommandWithContext(ctx, applyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(applyWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke ApplyWorkspaceCommand successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ApplyWorkspaceCommand(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the ApplyWorkspaceCommandOptions model
				applyWorkspaceCommandOptionsModel := new(schematicsv1.ApplyWorkspaceCommandOptions)
				applyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				applyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ApplyWorkspaceCommand(applyWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ApplyWorkspaceCommand with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the ApplyWorkspaceCommandOptions model
				applyWorkspaceCommandOptionsModel := new(schematicsv1.ApplyWorkspaceCommandOptions)
				applyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				applyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ApplyWorkspaceCommand(applyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ApplyWorkspaceCommandOptions model with no property values
				applyWorkspaceCommandOptionsModelNew := new(schematicsv1.ApplyWorkspaceCommandOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ApplyWorkspaceCommand(applyWorkspaceCommandOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke ApplyWorkspaceCommand successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the ApplyWorkspaceCommandOptions model
				applyWorkspaceCommandOptionsModel := new(schematicsv1.ApplyWorkspaceCommandOptions)
				applyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				applyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				applyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ApplyWorkspaceCommand(applyWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DestroyWorkspaceCommand(destroyWorkspaceCommandOptions *DestroyWorkspaceCommandOptions) - Operation response error`, func() {
		destroyWorkspaceCommandPath := "/v1/workspaces/testString/destroy"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(destroyWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke DestroyWorkspaceCommand with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the DestroyWorkspaceCommandOptions model
				destroyWorkspaceCommandOptionsModel := new(schematicsv1.DestroyWorkspaceCommandOptions)
				destroyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				destroyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.DestroyWorkspaceCommand(destroyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.DestroyWorkspaceCommand(destroyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DestroyWorkspaceCommand(destroyWorkspaceCommandOptions *DestroyWorkspaceCommandOptions)`, func() {
		destroyWorkspaceCommandPath := "/v1/workspaces/testString/destroy"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(destroyWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke DestroyWorkspaceCommand successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the DestroyWorkspaceCommandOptions model
				destroyWorkspaceCommandOptionsModel := new(schematicsv1.DestroyWorkspaceCommandOptions)
				destroyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				destroyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.DestroyWorkspaceCommandWithContext(ctx, destroyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.DestroyWorkspaceCommand(destroyWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.DestroyWorkspaceCommandWithContext(ctx, destroyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(destroyWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke DestroyWorkspaceCommand successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.DestroyWorkspaceCommand(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the DestroyWorkspaceCommandOptions model
				destroyWorkspaceCommandOptionsModel := new(schematicsv1.DestroyWorkspaceCommandOptions)
				destroyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				destroyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.DestroyWorkspaceCommand(destroyWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke DestroyWorkspaceCommand with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the DestroyWorkspaceCommandOptions model
				destroyWorkspaceCommandOptionsModel := new(schematicsv1.DestroyWorkspaceCommandOptions)
				destroyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				destroyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.DestroyWorkspaceCommand(destroyWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the DestroyWorkspaceCommandOptions model with no property values
				destroyWorkspaceCommandOptionsModelNew := new(schematicsv1.DestroyWorkspaceCommandOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.DestroyWorkspaceCommand(destroyWorkspaceCommandOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke DestroyWorkspaceCommand successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the DestroyWorkspaceCommandOptions model
				destroyWorkspaceCommandOptionsModel := new(schematicsv1.DestroyWorkspaceCommandOptions)
				destroyWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				destroyWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				destroyWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.DestroyWorkspaceCommand(destroyWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PlanWorkspaceCommand(planWorkspaceCommandOptions *PlanWorkspaceCommandOptions) - Operation response error`, func() {
		planWorkspaceCommandPath := "/v1/workspaces/testString/plan"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(planWorkspaceCommandPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PlanWorkspaceCommand with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the PlanWorkspaceCommandOptions model
				planWorkspaceCommandOptionsModel := new(schematicsv1.PlanWorkspaceCommandOptions)
				planWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				planWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.PlanWorkspaceCommand(planWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.PlanWorkspaceCommand(planWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PlanWorkspaceCommand(planWorkspaceCommandOptions *PlanWorkspaceCommandOptions)`, func() {
		planWorkspaceCommandPath := "/v1/workspaces/testString/plan"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(planWorkspaceCommandPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke PlanWorkspaceCommand successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the PlanWorkspaceCommandOptions model
				planWorkspaceCommandOptionsModel := new(schematicsv1.PlanWorkspaceCommandOptions)
				planWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				planWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.PlanWorkspaceCommandWithContext(ctx, planWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.PlanWorkspaceCommand(planWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.PlanWorkspaceCommandWithContext(ctx, planWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(planWorkspaceCommandPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke PlanWorkspaceCommand successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.PlanWorkspaceCommand(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the PlanWorkspaceCommandOptions model
				planWorkspaceCommandOptionsModel := new(schematicsv1.PlanWorkspaceCommandOptions)
				planWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				planWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.PlanWorkspaceCommand(planWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PlanWorkspaceCommand with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the PlanWorkspaceCommandOptions model
				planWorkspaceCommandOptionsModel := new(schematicsv1.PlanWorkspaceCommandOptions)
				planWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				planWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.PlanWorkspaceCommand(planWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PlanWorkspaceCommandOptions model with no property values
				planWorkspaceCommandOptionsModelNew := new(schematicsv1.PlanWorkspaceCommandOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.PlanWorkspaceCommand(planWorkspaceCommandOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PlanWorkspaceCommand successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}

				// Construct an instance of the PlanWorkspaceCommandOptions model
				planWorkspaceCommandOptionsModel := new(schematicsv1.PlanWorkspaceCommandOptions)
				planWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.ActionOptions = workspaceActivityOptionsTemplateModel
				planWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				planWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.PlanWorkspaceCommand(planWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RefreshWorkspaceCommand(refreshWorkspaceCommandOptions *RefreshWorkspaceCommandOptions) - Operation response error`, func() {
		refreshWorkspaceCommandPath := "/v1/workspaces/testString/refresh"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(refreshWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke RefreshWorkspaceCommand with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the RefreshWorkspaceCommandOptions model
				refreshWorkspaceCommandOptionsModel := new(schematicsv1.RefreshWorkspaceCommandOptions)
				refreshWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.RefreshWorkspaceCommand(refreshWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.RefreshWorkspaceCommand(refreshWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RefreshWorkspaceCommand(refreshWorkspaceCommandOptions *RefreshWorkspaceCommandOptions)`, func() {
		refreshWorkspaceCommandPath := "/v1/workspaces/testString/refresh"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(refreshWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke RefreshWorkspaceCommand successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the RefreshWorkspaceCommandOptions model
				refreshWorkspaceCommandOptionsModel := new(schematicsv1.RefreshWorkspaceCommandOptions)
				refreshWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.RefreshWorkspaceCommandWithContext(ctx, refreshWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.RefreshWorkspaceCommand(refreshWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.RefreshWorkspaceCommandWithContext(ctx, refreshWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(refreshWorkspaceCommandPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Delegated_token"]).ToNot(BeNil())
					Expect(req.Header["Delegated_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"activityid": "Activityid"}`)
				}))
			})
			It(`Invoke RefreshWorkspaceCommand successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.RefreshWorkspaceCommand(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RefreshWorkspaceCommandOptions model
				refreshWorkspaceCommandOptionsModel := new(schematicsv1.RefreshWorkspaceCommandOptions)
				refreshWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.RefreshWorkspaceCommand(refreshWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke RefreshWorkspaceCommand with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the RefreshWorkspaceCommandOptions model
				refreshWorkspaceCommandOptionsModel := new(schematicsv1.RefreshWorkspaceCommandOptions)
				refreshWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.RefreshWorkspaceCommand(refreshWorkspaceCommandOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the RefreshWorkspaceCommandOptions model with no property values
				refreshWorkspaceCommandOptionsModelNew := new(schematicsv1.RefreshWorkspaceCommandOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.RefreshWorkspaceCommand(refreshWorkspaceCommandOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke RefreshWorkspaceCommand successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the RefreshWorkspaceCommandOptions model
				refreshWorkspaceCommandOptionsModel := new(schematicsv1.RefreshWorkspaceCommandOptions)
				refreshWorkspaceCommandOptionsModel.WID = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.RefreshToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.DelegatedToken = core.StringPtr("testString")
				refreshWorkspaceCommandOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.RefreshWorkspaceCommand(refreshWorkspaceCommandOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListJobs(listJobsOptions *ListJobsOptions) - Operation response error`, func() {
		listJobsPath := "/v2/jobs"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					Expect(req.URL.Query()["resource"]).To(Equal([]string{"workspaces"}))
					Expect(req.URL.Query()["resource_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["action_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["workspace_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["list"]).To(Equal([]string{"all"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListJobs with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListJobsOptions model
				listJobsOptionsModel := new(schematicsv1.ListJobsOptions)
				listJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listJobsOptionsModel.Limit = core.Int64Ptr(int64(100))
				listJobsOptionsModel.Sort = core.StringPtr("testString")
				listJobsOptionsModel.Profile = core.StringPtr("ids")
				listJobsOptionsModel.Resource = core.StringPtr("workspaces")
				listJobsOptionsModel.ResourceID = core.StringPtr("testString")
				listJobsOptionsModel.ActionID = core.StringPtr("testString")
				listJobsOptionsModel.WorkspaceID = core.StringPtr("testString")
				listJobsOptionsModel.List = core.StringPtr("all")
				listJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListJobs(listJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListJobs(listJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListJobs(listJobsOptions *ListJobsOptions)`, func() {
		listJobsPath := "/v2/jobs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					Expect(req.URL.Query()["resource"]).To(Equal([]string{"workspaces"}))
					Expect(req.URL.Query()["resource_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["action_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["workspace_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["list"]).To(Equal([]string{"all"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "jobs": [{"id": "ID", "name": "Name", "description": "Description", "command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "tags": ["Tags"], "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "duration": "Duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID", "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}]}`)
				}))
			})
			It(`Invoke ListJobs successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListJobsOptions model
				listJobsOptionsModel := new(schematicsv1.ListJobsOptions)
				listJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listJobsOptionsModel.Limit = core.Int64Ptr(int64(100))
				listJobsOptionsModel.Sort = core.StringPtr("testString")
				listJobsOptionsModel.Profile = core.StringPtr("ids")
				listJobsOptionsModel.Resource = core.StringPtr("workspaces")
				listJobsOptionsModel.ResourceID = core.StringPtr("testString")
				listJobsOptionsModel.ActionID = core.StringPtr("testString")
				listJobsOptionsModel.WorkspaceID = core.StringPtr("testString")
				listJobsOptionsModel.List = core.StringPtr("all")
				listJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListJobsWithContext(ctx, listJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListJobs(listJobsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListJobsWithContext(ctx, listJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					Expect(req.URL.Query()["resource"]).To(Equal([]string{"workspaces"}))
					Expect(req.URL.Query()["resource_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["action_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["workspace_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["list"]).To(Equal([]string{"all"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "jobs": [{"id": "ID", "name": "Name", "description": "Description", "command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "tags": ["Tags"], "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "duration": "Duration", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID", "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}]}`)
				}))
			})
			It(`Invoke ListJobs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListJobs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListJobsOptions model
				listJobsOptionsModel := new(schematicsv1.ListJobsOptions)
				listJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listJobsOptionsModel.Limit = core.Int64Ptr(int64(100))
				listJobsOptionsModel.Sort = core.StringPtr("testString")
				listJobsOptionsModel.Profile = core.StringPtr("ids")
				listJobsOptionsModel.Resource = core.StringPtr("workspaces")
				listJobsOptionsModel.ResourceID = core.StringPtr("testString")
				listJobsOptionsModel.ActionID = core.StringPtr("testString")
				listJobsOptionsModel.WorkspaceID = core.StringPtr("testString")
				listJobsOptionsModel.List = core.StringPtr("all")
				listJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListJobs(listJobsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListJobs with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListJobsOptions model
				listJobsOptionsModel := new(schematicsv1.ListJobsOptions)
				listJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listJobsOptionsModel.Limit = core.Int64Ptr(int64(100))
				listJobsOptionsModel.Sort = core.StringPtr("testString")
				listJobsOptionsModel.Profile = core.StringPtr("ids")
				listJobsOptionsModel.Resource = core.StringPtr("workspaces")
				listJobsOptionsModel.ResourceID = core.StringPtr("testString")
				listJobsOptionsModel.ActionID = core.StringPtr("testString")
				listJobsOptionsModel.WorkspaceID = core.StringPtr("testString")
				listJobsOptionsModel.List = core.StringPtr("all")
				listJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListJobs(listJobsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListJobs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListJobsOptions model
				listJobsOptionsModel := new(schematicsv1.ListJobsOptions)
				listJobsOptionsModel.Offset = core.Int64Ptr(int64(0))
				listJobsOptionsModel.Limit = core.Int64Ptr(int64(100))
				listJobsOptionsModel.Sort = core.StringPtr("testString")
				listJobsOptionsModel.Profile = core.StringPtr("ids")
				listJobsOptionsModel.Resource = core.StringPtr("workspaces")
				listJobsOptionsModel.ResourceID = core.StringPtr("testString")
				listJobsOptionsModel.ActionID = core.StringPtr("testString")
				listJobsOptionsModel.WorkspaceID = core.StringPtr("testString")
				listJobsOptionsModel.List = core.StringPtr("all")
				listJobsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ListJobs(listJobsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateJob(createJobOptions *CreateJobOptions) - Operation response error`, func() {
		createJobPath := "/v2/jobs"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createJobPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateJob with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the CartOrderData model
				cartOrderDataModel := new(schematicsv1.CartOrderData)
				cartOrderDataModel.Name = core.StringPtr("testString")
				cartOrderDataModel.Value = core.StringPtr("testString")
				cartOrderDataModel.Type = core.StringPtr("testString")
				cartOrderDataModel.UsageKind = []string{"servicetags"}

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the AgentInfo model
				agentInfoModel := new(schematicsv1.AgentInfo)
				agentInfoModel.ID = core.StringPtr("testString")
				agentInfoModel.Name = core.StringPtr("testString")
				agentInfoModel.AssignmentPolicyID = core.StringPtr("testString")

				// Construct an instance of the CreateJobOptions model
				createJobOptionsModel := new(schematicsv1.CreateJobOptions)
				createJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createJobOptionsModel.CommandObject = core.StringPtr("workspace")
				createJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				createJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				createJobOptionsModel.CommandParameter = core.StringPtr("testString")
				createJobOptionsModel.CommandOptions = []string{"testString"}
				createJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Tags = []string{"testString"}
				createJobOptionsModel.Location = core.StringPtr("us-south")
				createJobOptionsModel.Status = jobStatusModel
				createJobOptionsModel.CartOrderData = []schematicsv1.CartOrderData{*cartOrderDataModel}
				createJobOptionsModel.Data = jobDataModel
				createJobOptionsModel.Bastion = bastionResourceDefinitionModel
				createJobOptionsModel.LogSummary = jobLogSummaryModel
				createJobOptionsModel.Agent = agentInfoModel
				createJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.CreateJob(createJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.CreateJob(createJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateJob(createJobOptions *CreateJobOptions)`, func() {
		createJobPath := "/v2/jobs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createJobPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "cart_order_data": [{"name": "Name", "value": "Value", "type": "Type", "usage_kind": ["servicetags"]}], "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID", "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}`)
				}))
			})
			It(`Invoke CreateJob successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the CartOrderData model
				cartOrderDataModel := new(schematicsv1.CartOrderData)
				cartOrderDataModel.Name = core.StringPtr("testString")
				cartOrderDataModel.Value = core.StringPtr("testString")
				cartOrderDataModel.Type = core.StringPtr("testString")
				cartOrderDataModel.UsageKind = []string{"servicetags"}

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the AgentInfo model
				agentInfoModel := new(schematicsv1.AgentInfo)
				agentInfoModel.ID = core.StringPtr("testString")
				agentInfoModel.Name = core.StringPtr("testString")
				agentInfoModel.AssignmentPolicyID = core.StringPtr("testString")

				// Construct an instance of the CreateJobOptions model
				createJobOptionsModel := new(schematicsv1.CreateJobOptions)
				createJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createJobOptionsModel.CommandObject = core.StringPtr("workspace")
				createJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				createJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				createJobOptionsModel.CommandParameter = core.StringPtr("testString")
				createJobOptionsModel.CommandOptions = []string{"testString"}
				createJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Tags = []string{"testString"}
				createJobOptionsModel.Location = core.StringPtr("us-south")
				createJobOptionsModel.Status = jobStatusModel
				createJobOptionsModel.CartOrderData = []schematicsv1.CartOrderData{*cartOrderDataModel}
				createJobOptionsModel.Data = jobDataModel
				createJobOptionsModel.Bastion = bastionResourceDefinitionModel
				createJobOptionsModel.LogSummary = jobLogSummaryModel
				createJobOptionsModel.Agent = agentInfoModel
				createJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.CreateJobWithContext(ctx, createJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.CreateJob(createJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.CreateJobWithContext(ctx, createJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createJobPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "cart_order_data": [{"name": "Name", "value": "Value", "type": "Type", "usage_kind": ["servicetags"]}], "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID", "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}`)
				}))
			})
			It(`Invoke CreateJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.CreateJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the CartOrderData model
				cartOrderDataModel := new(schematicsv1.CartOrderData)
				cartOrderDataModel.Name = core.StringPtr("testString")
				cartOrderDataModel.Value = core.StringPtr("testString")
				cartOrderDataModel.Type = core.StringPtr("testString")
				cartOrderDataModel.UsageKind = []string{"servicetags"}

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the AgentInfo model
				agentInfoModel := new(schematicsv1.AgentInfo)
				agentInfoModel.ID = core.StringPtr("testString")
				agentInfoModel.Name = core.StringPtr("testString")
				agentInfoModel.AssignmentPolicyID = core.StringPtr("testString")

				// Construct an instance of the CreateJobOptions model
				createJobOptionsModel := new(schematicsv1.CreateJobOptions)
				createJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createJobOptionsModel.CommandObject = core.StringPtr("workspace")
				createJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				createJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				createJobOptionsModel.CommandParameter = core.StringPtr("testString")
				createJobOptionsModel.CommandOptions = []string{"testString"}
				createJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Tags = []string{"testString"}
				createJobOptionsModel.Location = core.StringPtr("us-south")
				createJobOptionsModel.Status = jobStatusModel
				createJobOptionsModel.CartOrderData = []schematicsv1.CartOrderData{*cartOrderDataModel}
				createJobOptionsModel.Data = jobDataModel
				createJobOptionsModel.Bastion = bastionResourceDefinitionModel
				createJobOptionsModel.LogSummary = jobLogSummaryModel
				createJobOptionsModel.Agent = agentInfoModel
				createJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.CreateJob(createJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateJob with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the CartOrderData model
				cartOrderDataModel := new(schematicsv1.CartOrderData)
				cartOrderDataModel.Name = core.StringPtr("testString")
				cartOrderDataModel.Value = core.StringPtr("testString")
				cartOrderDataModel.Type = core.StringPtr("testString")
				cartOrderDataModel.UsageKind = []string{"servicetags"}

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the AgentInfo model
				agentInfoModel := new(schematicsv1.AgentInfo)
				agentInfoModel.ID = core.StringPtr("testString")
				agentInfoModel.Name = core.StringPtr("testString")
				agentInfoModel.AssignmentPolicyID = core.StringPtr("testString")

				// Construct an instance of the CreateJobOptions model
				createJobOptionsModel := new(schematicsv1.CreateJobOptions)
				createJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createJobOptionsModel.CommandObject = core.StringPtr("workspace")
				createJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				createJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				createJobOptionsModel.CommandParameter = core.StringPtr("testString")
				createJobOptionsModel.CommandOptions = []string{"testString"}
				createJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Tags = []string{"testString"}
				createJobOptionsModel.Location = core.StringPtr("us-south")
				createJobOptionsModel.Status = jobStatusModel
				createJobOptionsModel.CartOrderData = []schematicsv1.CartOrderData{*cartOrderDataModel}
				createJobOptionsModel.Data = jobDataModel
				createJobOptionsModel.Bastion = bastionResourceDefinitionModel
				createJobOptionsModel.LogSummary = jobLogSummaryModel
				createJobOptionsModel.Agent = agentInfoModel
				createJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.CreateJob(createJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateJobOptions model with no property values
				createJobOptionsModelNew := new(schematicsv1.CreateJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.CreateJob(createJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the CartOrderData model
				cartOrderDataModel := new(schematicsv1.CartOrderData)
				cartOrderDataModel.Name = core.StringPtr("testString")
				cartOrderDataModel.Value = core.StringPtr("testString")
				cartOrderDataModel.Type = core.StringPtr("testString")
				cartOrderDataModel.UsageKind = []string{"servicetags"}

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the AgentInfo model
				agentInfoModel := new(schematicsv1.AgentInfo)
				agentInfoModel.ID = core.StringPtr("testString")
				agentInfoModel.Name = core.StringPtr("testString")
				agentInfoModel.AssignmentPolicyID = core.StringPtr("testString")

				// Construct an instance of the CreateJobOptions model
				createJobOptionsModel := new(schematicsv1.CreateJobOptions)
				createJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createJobOptionsModel.CommandObject = core.StringPtr("workspace")
				createJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				createJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				createJobOptionsModel.CommandParameter = core.StringPtr("testString")
				createJobOptionsModel.CommandOptions = []string{"testString"}
				createJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createJobOptionsModel.Tags = []string{"testString"}
				createJobOptionsModel.Location = core.StringPtr("us-south")
				createJobOptionsModel.Status = jobStatusModel
				createJobOptionsModel.CartOrderData = []schematicsv1.CartOrderData{*cartOrderDataModel}
				createJobOptionsModel.Data = jobDataModel
				createJobOptionsModel.Bastion = bastionResourceDefinitionModel
				createJobOptionsModel.LogSummary = jobLogSummaryModel
				createJobOptionsModel.Agent = agentInfoModel
				createJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.CreateJob(createJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetJob(getJobOptions *GetJobOptions) - Operation response error`, func() {
		getJobPath := "/v2/jobs/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetJob with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetJobOptions model
				getJobOptionsModel := new(schematicsv1.GetJobOptions)
				getJobOptionsModel.JobID = core.StringPtr("testString")
				getJobOptionsModel.Profile = core.StringPtr("summary")
				getJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetJob(getJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetJob(getJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetJob(getJobOptions *GetJobOptions)`, func() {
		getJobPath := "/v2/jobs/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "cart_order_data": [{"name": "Name", "value": "Value", "type": "Type", "usage_kind": ["servicetags"]}], "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID", "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}`)
				}))
			})
			It(`Invoke GetJob successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetJobOptions model
				getJobOptionsModel := new(schematicsv1.GetJobOptions)
				getJobOptionsModel.JobID = core.StringPtr("testString")
				getJobOptionsModel.Profile = core.StringPtr("summary")
				getJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetJobWithContext(ctx, getJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetJob(getJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetJobWithContext(ctx, getJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "cart_order_data": [{"name": "Name", "value": "Value", "type": "Type", "usage_kind": ["servicetags"]}], "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID", "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}`)
				}))
			})
			It(`Invoke GetJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetJobOptions model
				getJobOptionsModel := new(schematicsv1.GetJobOptions)
				getJobOptionsModel.JobID = core.StringPtr("testString")
				getJobOptionsModel.Profile = core.StringPtr("summary")
				getJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetJob(getJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetJob with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetJobOptions model
				getJobOptionsModel := new(schematicsv1.GetJobOptions)
				getJobOptionsModel.JobID = core.StringPtr("testString")
				getJobOptionsModel.Profile = core.StringPtr("summary")
				getJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetJob(getJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetJobOptions model with no property values
				getJobOptionsModelNew := new(schematicsv1.GetJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetJob(getJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetJobOptions model
				getJobOptionsModel := new(schematicsv1.GetJobOptions)
				getJobOptionsModel.JobID = core.StringPtr("testString")
				getJobOptionsModel.Profile = core.StringPtr("summary")
				getJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetJob(getJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateJob(updateJobOptions *UpdateJobOptions) - Operation response error`, func() {
		updateJobPath := "/v2/jobs/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateJobPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateJob with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the CartOrderData model
				cartOrderDataModel := new(schematicsv1.CartOrderData)
				cartOrderDataModel.Name = core.StringPtr("testString")
				cartOrderDataModel.Value = core.StringPtr("testString")
				cartOrderDataModel.Type = core.StringPtr("testString")
				cartOrderDataModel.UsageKind = []string{"servicetags"}

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the AgentInfo model
				agentInfoModel := new(schematicsv1.AgentInfo)
				agentInfoModel.ID = core.StringPtr("testString")
				agentInfoModel.Name = core.StringPtr("testString")
				agentInfoModel.AssignmentPolicyID = core.StringPtr("testString")

				// Construct an instance of the UpdateJobOptions model
				updateJobOptionsModel := new(schematicsv1.UpdateJobOptions)
				updateJobOptionsModel.JobID = core.StringPtr("testString")
				updateJobOptionsModel.RefreshToken = core.StringPtr("testString")
				updateJobOptionsModel.CommandObject = core.StringPtr("workspace")
				updateJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				updateJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				updateJobOptionsModel.CommandParameter = core.StringPtr("testString")
				updateJobOptionsModel.CommandOptions = []string{"testString"}
				updateJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Tags = []string{"testString"}
				updateJobOptionsModel.Location = core.StringPtr("us-south")
				updateJobOptionsModel.Status = jobStatusModel
				updateJobOptionsModel.CartOrderData = []schematicsv1.CartOrderData{*cartOrderDataModel}
				updateJobOptionsModel.Data = jobDataModel
				updateJobOptionsModel.Bastion = bastionResourceDefinitionModel
				updateJobOptionsModel.LogSummary = jobLogSummaryModel
				updateJobOptionsModel.Agent = agentInfoModel
				updateJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.UpdateJob(updateJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.UpdateJob(updateJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateJob(updateJobOptions *UpdateJobOptions)`, func() {
		updateJobPath := "/v2/jobs/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateJobPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "cart_order_data": [{"name": "Name", "value": "Value", "type": "Type", "usage_kind": ["servicetags"]}], "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID", "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}`)
				}))
			})
			It(`Invoke UpdateJob successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the CartOrderData model
				cartOrderDataModel := new(schematicsv1.CartOrderData)
				cartOrderDataModel.Name = core.StringPtr("testString")
				cartOrderDataModel.Value = core.StringPtr("testString")
				cartOrderDataModel.Type = core.StringPtr("testString")
				cartOrderDataModel.UsageKind = []string{"servicetags"}

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the AgentInfo model
				agentInfoModel := new(schematicsv1.AgentInfo)
				agentInfoModel.ID = core.StringPtr("testString")
				agentInfoModel.Name = core.StringPtr("testString")
				agentInfoModel.AssignmentPolicyID = core.StringPtr("testString")

				// Construct an instance of the UpdateJobOptions model
				updateJobOptionsModel := new(schematicsv1.UpdateJobOptions)
				updateJobOptionsModel.JobID = core.StringPtr("testString")
				updateJobOptionsModel.RefreshToken = core.StringPtr("testString")
				updateJobOptionsModel.CommandObject = core.StringPtr("workspace")
				updateJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				updateJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				updateJobOptionsModel.CommandParameter = core.StringPtr("testString")
				updateJobOptionsModel.CommandOptions = []string{"testString"}
				updateJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Tags = []string{"testString"}
				updateJobOptionsModel.Location = core.StringPtr("us-south")
				updateJobOptionsModel.Status = jobStatusModel
				updateJobOptionsModel.CartOrderData = []schematicsv1.CartOrderData{*cartOrderDataModel}
				updateJobOptionsModel.Data = jobDataModel
				updateJobOptionsModel.Bastion = bastionResourceDefinitionModel
				updateJobOptionsModel.LogSummary = jobLogSummaryModel
				updateJobOptionsModel.Agent = agentInfoModel
				updateJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.UpdateJobWithContext(ctx, updateJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.UpdateJob(updateJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.UpdateJobWithContext(ctx, updateJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateJobPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"command_object": "workspace", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "command_parameter": "CommandParameter", "command_options": ["CommandOptions"], "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "tags": ["Tags"], "id": "ID", "name": "Name", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "submitted_at": "2019-01-01T12:00:00.000Z", "submitted_by": "SubmittedBy", "start_at": "2019-01-01T12:00:00.000Z", "end_at": "2019-01-01T12:00:00.000Z", "duration": "Duration", "status": {"position_in_queue": 15, "total_in_queue": 12, "workspace_job_status": {"workspace_name": "WorkspaceName", "status_code": "job_pending", "status_message": "StatusMessage", "flow_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "template_status": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z", "commands": [{"name": "Name", "outcome": "Outcome"}]}, "action_job_status": {"action_name": "ActionName", "status_code": "job_pending", "status_message": "StatusMessage", "bastion_status_code": "none", "bastion_status_message": "BastionStatusMessage", "targets_status_code": "none", "targets_status_message": "TargetsStatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}, "system_job_status": {"system_status_message": "SystemStatusMessage", "system_status_code": "job_pending", "schematics_resource_status": [{"status_code": "job_pending", "status_message": "StatusMessage", "schematics_resource_id": "SchematicsResourceID", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_status": {"flow_id": "FlowID", "flow_name": "FlowName", "status_code": "job_pending", "status_message": "StatusMessage", "workitems": [{"workspace_id": "WorkspaceID", "workspace_name": "WorkspaceName", "job_id": "JobID", "status_code": "job_pending", "status_message": "StatusMessage", "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "cart_order_data": [{"name": "Name", "value": "Value", "type": "Type", "usage_kind": ["servicetags"]}], "data": {"job_type": "repo_download_job", "workspace_job_data": {"workspace_name": "WorkspaceName", "flow_id": "FlowID", "flow_name": "FlowName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "template_data": [{"template_id": "TemplateID", "template_name": "TemplateName", "flow_index": 9, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}, "action_job_data": {"action_name": "ActionName", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated_at": "2019-01-01T12:00:00.000Z", "inventory_record": {"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}, "materialized_inventory": "MaterializedInventory"}, "system_job_data": {"key_id": "KeyID", "schematics_resource_id": ["SchematicsResourceID"], "updated_at": "2019-01-01T12:00:00.000Z"}, "flow_job_data": {"flow_id": "FlowID", "flow_name": "FlowName", "workitems": [{"command_object_id": "CommandObjectID", "command_object_name": "CommandObjectName", "layers": "Layers", "source_type": "local", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_id": "JobID", "job_status": "job_pending"}, "updated_at": "2019-01-01T12:00:00.000Z"}], "updated_at": "2019-01-01T12:00:00.000Z"}}, "bastion": {"name": "Name", "host": "Host"}, "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "log_store_url": "LogStoreURL", "state_store_url": "StateStoreURL", "results_url": "ResultsURL", "updated_at": "2019-01-01T12:00:00.000Z", "job_runner_id": "JobRunnerID", "agent": {"id": "ID", "name": "Name", "assignment_policy_id": "AssignmentPolicyID"}}`)
				}))
			})
			It(`Invoke UpdateJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.UpdateJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the CartOrderData model
				cartOrderDataModel := new(schematicsv1.CartOrderData)
				cartOrderDataModel.Name = core.StringPtr("testString")
				cartOrderDataModel.Value = core.StringPtr("testString")
				cartOrderDataModel.Type = core.StringPtr("testString")
				cartOrderDataModel.UsageKind = []string{"servicetags"}

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the AgentInfo model
				agentInfoModel := new(schematicsv1.AgentInfo)
				agentInfoModel.ID = core.StringPtr("testString")
				agentInfoModel.Name = core.StringPtr("testString")
				agentInfoModel.AssignmentPolicyID = core.StringPtr("testString")

				// Construct an instance of the UpdateJobOptions model
				updateJobOptionsModel := new(schematicsv1.UpdateJobOptions)
				updateJobOptionsModel.JobID = core.StringPtr("testString")
				updateJobOptionsModel.RefreshToken = core.StringPtr("testString")
				updateJobOptionsModel.CommandObject = core.StringPtr("workspace")
				updateJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				updateJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				updateJobOptionsModel.CommandParameter = core.StringPtr("testString")
				updateJobOptionsModel.CommandOptions = []string{"testString"}
				updateJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Tags = []string{"testString"}
				updateJobOptionsModel.Location = core.StringPtr("us-south")
				updateJobOptionsModel.Status = jobStatusModel
				updateJobOptionsModel.CartOrderData = []schematicsv1.CartOrderData{*cartOrderDataModel}
				updateJobOptionsModel.Data = jobDataModel
				updateJobOptionsModel.Bastion = bastionResourceDefinitionModel
				updateJobOptionsModel.LogSummary = jobLogSummaryModel
				updateJobOptionsModel.Agent = agentInfoModel
				updateJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.UpdateJob(updateJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateJob with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the CartOrderData model
				cartOrderDataModel := new(schematicsv1.CartOrderData)
				cartOrderDataModel.Name = core.StringPtr("testString")
				cartOrderDataModel.Value = core.StringPtr("testString")
				cartOrderDataModel.Type = core.StringPtr("testString")
				cartOrderDataModel.UsageKind = []string{"servicetags"}

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the AgentInfo model
				agentInfoModel := new(schematicsv1.AgentInfo)
				agentInfoModel.ID = core.StringPtr("testString")
				agentInfoModel.Name = core.StringPtr("testString")
				agentInfoModel.AssignmentPolicyID = core.StringPtr("testString")

				// Construct an instance of the UpdateJobOptions model
				updateJobOptionsModel := new(schematicsv1.UpdateJobOptions)
				updateJobOptionsModel.JobID = core.StringPtr("testString")
				updateJobOptionsModel.RefreshToken = core.StringPtr("testString")
				updateJobOptionsModel.CommandObject = core.StringPtr("workspace")
				updateJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				updateJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				updateJobOptionsModel.CommandParameter = core.StringPtr("testString")
				updateJobOptionsModel.CommandOptions = []string{"testString"}
				updateJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Tags = []string{"testString"}
				updateJobOptionsModel.Location = core.StringPtr("us-south")
				updateJobOptionsModel.Status = jobStatusModel
				updateJobOptionsModel.CartOrderData = []schematicsv1.CartOrderData{*cartOrderDataModel}
				updateJobOptionsModel.Data = jobDataModel
				updateJobOptionsModel.Bastion = bastionResourceDefinitionModel
				updateJobOptionsModel.LogSummary = jobLogSummaryModel
				updateJobOptionsModel.Agent = agentInfoModel
				updateJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.UpdateJob(updateJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateJobOptions model with no property values
				updateJobOptionsModelNew := new(schematicsv1.UpdateJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.UpdateJob(updateJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel

				// Construct an instance of the CartOrderData model
				cartOrderDataModel := new(schematicsv1.CartOrderData)
				cartOrderDataModel.Name = core.StringPtr("testString")
				cartOrderDataModel.Value = core.StringPtr("testString")
				cartOrderDataModel.Type = core.StringPtr("testString")
				cartOrderDataModel.UsageKind = []string{"servicetags"}

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel

				// Construct an instance of the AgentInfo model
				agentInfoModel := new(schematicsv1.AgentInfo)
				agentInfoModel.ID = core.StringPtr("testString")
				agentInfoModel.Name = core.StringPtr("testString")
				agentInfoModel.AssignmentPolicyID = core.StringPtr("testString")

				// Construct an instance of the UpdateJobOptions model
				updateJobOptionsModel := new(schematicsv1.UpdateJobOptions)
				updateJobOptionsModel.JobID = core.StringPtr("testString")
				updateJobOptionsModel.RefreshToken = core.StringPtr("testString")
				updateJobOptionsModel.CommandObject = core.StringPtr("workspace")
				updateJobOptionsModel.CommandObjectID = core.StringPtr("testString")
				updateJobOptionsModel.CommandName = core.StringPtr("workspace_plan")
				updateJobOptionsModel.CommandParameter = core.StringPtr("testString")
				updateJobOptionsModel.CommandOptions = []string{"testString"}
				updateJobOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				updateJobOptionsModel.Tags = []string{"testString"}
				updateJobOptionsModel.Location = core.StringPtr("us-south")
				updateJobOptionsModel.Status = jobStatusModel
				updateJobOptionsModel.CartOrderData = []schematicsv1.CartOrderData{*cartOrderDataModel}
				updateJobOptionsModel.Data = jobDataModel
				updateJobOptionsModel.Bastion = bastionResourceDefinitionModel
				updateJobOptionsModel.LogSummary = jobLogSummaryModel
				updateJobOptionsModel.Agent = agentInfoModel
				updateJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.UpdateJob(updateJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteJob(deleteJobOptions *DeleteJobOptions)`, func() {
		deleteJobPath := "/v2/jobs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteJobPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematicsService.DeleteJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteJobOptions model
				deleteJobOptionsModel := new(schematicsv1.DeleteJobOptions)
				deleteJobOptionsModel.JobID = core.StringPtr("testString")
				deleteJobOptionsModel.RefreshToken = core.StringPtr("testString")
				deleteJobOptionsModel.Force = core.BoolPtr(true)
				deleteJobOptionsModel.Propagate = core.BoolPtr(true)
				deleteJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematicsService.DeleteJob(deleteJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteJob with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteJobOptions model
				deleteJobOptionsModel := new(schematicsv1.DeleteJobOptions)
				deleteJobOptionsModel.JobID = core.StringPtr("testString")
				deleteJobOptionsModel.RefreshToken = core.StringPtr("testString")
				deleteJobOptionsModel.Force = core.BoolPtr(true)
				deleteJobOptionsModel.Propagate = core.BoolPtr(true)
				deleteJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematicsService.DeleteJob(deleteJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteJobOptions model with no property values
				deleteJobOptionsModelNew := new(schematicsv1.DeleteJobOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematicsService.DeleteJob(deleteJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListJobLogs(listJobLogsOptions *ListJobLogsOptions) - Operation response error`, func() {
		listJobLogsPath := "/v2/jobs/testString/logs"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobLogsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListJobLogs with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListJobLogsOptions model
				listJobLogsOptionsModel := new(schematicsv1.ListJobLogsOptions)
				listJobLogsOptionsModel.JobID = core.StringPtr("testString")
				listJobLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListJobLogs(listJobLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListJobLogs(listJobLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListJobLogs(listJobLogsOptions *ListJobLogsOptions)`, func() {
		listJobLogsPath := "/v2/jobs/testString/logs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobLogsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job_id": "JobID", "job_name": "JobName", "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "format": "json", "details": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke ListJobLogs successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListJobLogsOptions model
				listJobLogsOptionsModel := new(schematicsv1.ListJobLogsOptions)
				listJobLogsOptionsModel.JobID = core.StringPtr("testString")
				listJobLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListJobLogsWithContext(ctx, listJobLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListJobLogs(listJobLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListJobLogsWithContext(ctx, listJobLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listJobLogsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job_id": "JobID", "job_name": "JobName", "log_summary": {"job_id": "JobID", "job_type": "repo_download_job", "log_start_at": "2019-01-01T12:00:00.000Z", "log_analyzed_till": "2019-01-01T12:00:00.000Z", "elapsed_time": 11, "log_errors": [{"error_code": "ErrorCode", "error_msg": "ErrorMsg", "error_count": 10}], "repo_download_job": {"scanned_file_count": 16, "quarantined_file_count": 20, "detected_filetype": "DetectedFiletype", "inputs_count": "InputsCount", "outputs_count": "OutputsCount"}, "workspace_job": {"resources_add": 12, "resources_modify": 15, "resources_destroy": 16}, "flow_job": {"workitems_completed": 18, "workitems_pending": 16, "workitems_failed": 15, "workitems": [{"workspace_id": "WorkspaceID", "job_id": "JobID", "resources_add": 12, "resources_modify": 15, "resources_destroy": 16, "log_url": "LogURL"}]}, "action_job": {"target_count": 11, "task_count": 9, "play_count": 9, "recap": {"target": ["Target"], "ok": 2, "changed": 7, "failed": 6, "skipped": 7, "unreachable": 11}}, "system_job": {"target_count": 11, "success": 7, "failed": 6}}, "format": "json", "details": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke ListJobLogs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListJobLogs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListJobLogsOptions model
				listJobLogsOptionsModel := new(schematicsv1.ListJobLogsOptions)
				listJobLogsOptionsModel.JobID = core.StringPtr("testString")
				listJobLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListJobLogs(listJobLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListJobLogs with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListJobLogsOptions model
				listJobLogsOptionsModel := new(schematicsv1.ListJobLogsOptions)
				listJobLogsOptionsModel.JobID = core.StringPtr("testString")
				listJobLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListJobLogs(listJobLogsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListJobLogsOptions model with no property values
				listJobLogsOptionsModelNew := new(schematicsv1.ListJobLogsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ListJobLogs(listJobLogsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListJobLogs successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListJobLogsOptions model
				listJobLogsOptionsModel := new(schematicsv1.ListJobLogsOptions)
				listJobLogsOptionsModel.JobID = core.StringPtr("testString")
				listJobLogsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ListJobLogs(listJobLogsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetJobFiles(getJobFilesOptions *GetJobFilesOptions) - Operation response error`, func() {
		getJobFilesPath := "/v2/jobs/testString/files"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobFilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["file_type"]).To(Equal([]string{"template_repo"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetJobFiles with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetJobFilesOptions model
				getJobFilesOptionsModel := new(schematicsv1.GetJobFilesOptions)
				getJobFilesOptionsModel.JobID = core.StringPtr("testString")
				getJobFilesOptionsModel.FileType = core.StringPtr("template_repo")
				getJobFilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetJobFiles(getJobFilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetJobFiles(getJobFilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetJobFiles(getJobFilesOptions *GetJobFilesOptions)`, func() {
		getJobFilesPath := "/v2/jobs/testString/files"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobFilesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["file_type"]).To(Equal([]string{"template_repo"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job_id": "JobID", "job_name": "JobName", "summary": [{"name": "Name", "type": "number", "value": "Value"}], "file_type": "state_file", "file_content": "FileContent", "additional_files": [{"file_name": "FileName", "file_content": "FileContent"}], "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetJobFiles successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetJobFilesOptions model
				getJobFilesOptionsModel := new(schematicsv1.GetJobFilesOptions)
				getJobFilesOptionsModel.JobID = core.StringPtr("testString")
				getJobFilesOptionsModel.FileType = core.StringPtr("template_repo")
				getJobFilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetJobFilesWithContext(ctx, getJobFilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetJobFiles(getJobFilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetJobFilesWithContext(ctx, getJobFilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getJobFilesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["file_type"]).To(Equal([]string{"template_repo"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job_id": "JobID", "job_name": "JobName", "summary": [{"name": "Name", "type": "number", "value": "Value"}], "file_type": "state_file", "file_content": "FileContent", "additional_files": [{"file_name": "FileName", "file_content": "FileContent"}], "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetJobFiles successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetJobFiles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetJobFilesOptions model
				getJobFilesOptionsModel := new(schematicsv1.GetJobFilesOptions)
				getJobFilesOptionsModel.JobID = core.StringPtr("testString")
				getJobFilesOptionsModel.FileType = core.StringPtr("template_repo")
				getJobFilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetJobFiles(getJobFilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetJobFiles with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetJobFilesOptions model
				getJobFilesOptionsModel := new(schematicsv1.GetJobFilesOptions)
				getJobFilesOptionsModel.JobID = core.StringPtr("testString")
				getJobFilesOptionsModel.FileType = core.StringPtr("template_repo")
				getJobFilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetJobFiles(getJobFilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetJobFilesOptions model with no property values
				getJobFilesOptionsModelNew := new(schematicsv1.GetJobFilesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetJobFiles(getJobFilesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetJobFiles successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetJobFilesOptions model
				getJobFilesOptionsModel := new(schematicsv1.GetJobFilesOptions)
				getJobFilesOptionsModel.JobID = core.StringPtr("testString")
				getJobFilesOptionsModel.FileType = core.StringPtr("template_repo")
				getJobFilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetJobFiles(getJobFilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptions *CreateWorkspaceDeletionJobOptions) - Operation response error`, func() {
		createWorkspaceDeletionJobPath := "/v1/workspace_jobs"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspaceDeletionJobPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateWorkspaceDeletionJob with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the CreateWorkspaceDeletionJobOptions model
				createWorkspaceDeletionJobOptionsModel := new(schematicsv1.CreateWorkspaceDeletionJobOptions)
				createWorkspaceDeletionJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Job = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Version = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Workspaces = []string{"testString"}
				createWorkspaceDeletionJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptions *CreateWorkspaceDeletionJobOptions)`, func() {
		createWorkspaceDeletionJobPath := "/v1/workspace_jobs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspaceDeletionJobPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job": "Job", "job_id": "JobID"}`)
				}))
			})
			It(`Invoke CreateWorkspaceDeletionJob successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the CreateWorkspaceDeletionJobOptions model
				createWorkspaceDeletionJobOptionsModel := new(schematicsv1.CreateWorkspaceDeletionJobOptions)
				createWorkspaceDeletionJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Job = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Version = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Workspaces = []string{"testString"}
				createWorkspaceDeletionJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.CreateWorkspaceDeletionJobWithContext(ctx, createWorkspaceDeletionJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.CreateWorkspaceDeletionJobWithContext(ctx, createWorkspaceDeletionJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createWorkspaceDeletionJobPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["Refresh_token"]).ToNot(BeNil())
					Expect(req.Header["Refresh_token"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job": "Job", "job_id": "JobID"}`)
				}))
			})
			It(`Invoke CreateWorkspaceDeletionJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.CreateWorkspaceDeletionJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateWorkspaceDeletionJobOptions model
				createWorkspaceDeletionJobOptionsModel := new(schematicsv1.CreateWorkspaceDeletionJobOptions)
				createWorkspaceDeletionJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Job = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Version = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Workspaces = []string{"testString"}
				createWorkspaceDeletionJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateWorkspaceDeletionJob with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the CreateWorkspaceDeletionJobOptions model
				createWorkspaceDeletionJobOptionsModel := new(schematicsv1.CreateWorkspaceDeletionJobOptions)
				createWorkspaceDeletionJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Job = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Version = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Workspaces = []string{"testString"}
				createWorkspaceDeletionJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateWorkspaceDeletionJobOptions model with no property values
				createWorkspaceDeletionJobOptionsModelNew := new(schematicsv1.CreateWorkspaceDeletionJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke CreateWorkspaceDeletionJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the CreateWorkspaceDeletionJobOptions model
				createWorkspaceDeletionJobOptionsModel := new(schematicsv1.CreateWorkspaceDeletionJobOptions)
				createWorkspaceDeletionJobOptionsModel.RefreshToken = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Job = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Version = core.StringPtr("testString")
				createWorkspaceDeletionJobOptionsModel.Workspaces = []string{"testString"}
				createWorkspaceDeletionJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.CreateWorkspaceDeletionJob(createWorkspaceDeletionJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptions *GetWorkspaceDeletionJobStatusOptions) - Operation response error`, func() {
		getWorkspaceDeletionJobStatusPath := "/v1/workspace_jobs/testString/status"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceDeletionJobStatusPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetWorkspaceDeletionJobStatus with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceDeletionJobStatusOptions model
				getWorkspaceDeletionJobStatusOptionsModel := new(schematicsv1.GetWorkspaceDeletionJobStatusOptions)
				getWorkspaceDeletionJobStatusOptionsModel.WjID = core.StringPtr("testString")
				getWorkspaceDeletionJobStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptions *GetWorkspaceDeletionJobStatusOptions)`, func() {
		getWorkspaceDeletionJobStatusPath := "/v1/workspace_jobs/testString/status"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceDeletionJobStatusPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job_status": {"failed": ["Failed"], "in_progress": ["InProgress"], "success": ["Success"], "last_updated_on": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetWorkspaceDeletionJobStatus successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetWorkspaceDeletionJobStatusOptions model
				getWorkspaceDeletionJobStatusOptionsModel := new(schematicsv1.GetWorkspaceDeletionJobStatusOptions)
				getWorkspaceDeletionJobStatusOptionsModel.WjID = core.StringPtr("testString")
				getWorkspaceDeletionJobStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetWorkspaceDeletionJobStatusWithContext(ctx, getWorkspaceDeletionJobStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetWorkspaceDeletionJobStatusWithContext(ctx, getWorkspaceDeletionJobStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getWorkspaceDeletionJobStatusPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"job_status": {"failed": ["Failed"], "in_progress": ["InProgress"], "success": ["Success"], "last_updated_on": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetWorkspaceDeletionJobStatus successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetWorkspaceDeletionJobStatus(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetWorkspaceDeletionJobStatusOptions model
				getWorkspaceDeletionJobStatusOptionsModel := new(schematicsv1.GetWorkspaceDeletionJobStatusOptions)
				getWorkspaceDeletionJobStatusOptionsModel.WjID = core.StringPtr("testString")
				getWorkspaceDeletionJobStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetWorkspaceDeletionJobStatus with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceDeletionJobStatusOptions model
				getWorkspaceDeletionJobStatusOptionsModel := new(schematicsv1.GetWorkspaceDeletionJobStatusOptions)
				getWorkspaceDeletionJobStatusOptionsModel.WjID = core.StringPtr("testString")
				getWorkspaceDeletionJobStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetWorkspaceDeletionJobStatusOptions model with no property values
				getWorkspaceDeletionJobStatusOptionsModelNew := new(schematicsv1.GetWorkspaceDeletionJobStatusOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetWorkspaceDeletionJobStatus successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetWorkspaceDeletionJobStatusOptions model
				getWorkspaceDeletionJobStatusOptionsModel := new(schematicsv1.GetWorkspaceDeletionJobStatusOptions)
				getWorkspaceDeletionJobStatusOptionsModel.WjID = core.StringPtr("testString")
				getWorkspaceDeletionJobStatusOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetWorkspaceDeletionJobStatus(getWorkspaceDeletionJobStatusOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListBlueprint(listBlueprintOptions *ListBlueprintOptions) - Operation response error`, func() {
		listBlueprintPath := "/v2/blueprints"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listBlueprintPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListBlueprint with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListBlueprintOptions model
				listBlueprintOptionsModel := new(schematicsv1.ListBlueprintOptions)
				listBlueprintOptionsModel.Offset = core.Int64Ptr(int64(0))
				listBlueprintOptionsModel.Limit = core.Int64Ptr(int64(100))
				listBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListBlueprint(listBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListBlueprint(listBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListBlueprint(listBlueprintOptions *ListBlueprintOptions)`, func() {
		listBlueprintPath := "/v2/blueprints"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listBlueprintPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "blueprints": [{"name": "MySatelliteLocation", "source_type": "SourceType", "source": {"source_type": "local", "git": {"git_repo_url": "GitRepoURL", "git_release": "GitRelease", "git_branch": "GitBranch", "git_repo_folder": "GitRepoFolder"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "item_id": "ItemID", "item_name": "ItemName"}}, "description": "Creates satellite location in AWS", "resource_group": "ResourceGroup", "tags": ["Tags"], "location": "us-south", "id": "ID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage", "summary_status": "Blueprint_Normal", "config_status": "Blueprint_Config_Draft", "plan_status": "Blueprint_Plan_None", "run_status": "Blueprint_Run_Plan", "resource_status": "Blueprint_Resource_Drifted"}}]}`)
				}))
			})
			It(`Invoke ListBlueprint successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListBlueprintOptions model
				listBlueprintOptionsModel := new(schematicsv1.ListBlueprintOptions)
				listBlueprintOptionsModel.Offset = core.Int64Ptr(int64(0))
				listBlueprintOptionsModel.Limit = core.Int64Ptr(int64(100))
				listBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListBlueprintWithContext(ctx, listBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListBlueprint(listBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListBlueprintWithContext(ctx, listBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listBlueprintPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "blueprints": [{"name": "MySatelliteLocation", "source_type": "SourceType", "source": {"source_type": "local", "git": {"git_repo_url": "GitRepoURL", "git_release": "GitRelease", "git_branch": "GitBranch", "git_repo_folder": "GitRepoFolder"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "item_id": "ItemID", "item_name": "ItemName"}}, "description": "Creates satellite location in AWS", "resource_group": "ResourceGroup", "tags": ["Tags"], "location": "us-south", "id": "ID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage", "summary_status": "Blueprint_Normal", "config_status": "Blueprint_Config_Draft", "plan_status": "Blueprint_Plan_None", "run_status": "Blueprint_Run_Plan", "resource_status": "Blueprint_Resource_Drifted"}}]}`)
				}))
			})
			It(`Invoke ListBlueprint successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListBlueprint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListBlueprintOptions model
				listBlueprintOptionsModel := new(schematicsv1.ListBlueprintOptions)
				listBlueprintOptionsModel.Offset = core.Int64Ptr(int64(0))
				listBlueprintOptionsModel.Limit = core.Int64Ptr(int64(100))
				listBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListBlueprint(listBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListBlueprint with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListBlueprintOptions model
				listBlueprintOptionsModel := new(schematicsv1.ListBlueprintOptions)
				listBlueprintOptionsModel.Offset = core.Int64Ptr(int64(0))
				listBlueprintOptionsModel.Limit = core.Int64Ptr(int64(100))
				listBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListBlueprint(listBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListBlueprint successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListBlueprintOptions model
				listBlueprintOptionsModel := new(schematicsv1.ListBlueprintOptions)
				listBlueprintOptionsModel.Offset = core.Int64Ptr(int64(0))
				listBlueprintOptionsModel.Limit = core.Int64Ptr(int64(100))
				listBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ListBlueprint(listBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateBlueprint(createBlueprintOptions *CreateBlueprintOptions) - Operation response error`, func() {
		createBlueprintPath := "/v2/blueprints"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createBlueprintPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateBlueprint with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematicsv1.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematicsv1.BlueprintFlow)

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the CreateBlueprintOptions model
				createBlueprintOptionsModel := new(schematicsv1.CreateBlueprintOptions)
				createBlueprintOptionsModel.Name = core.StringPtr("Toronto Dev Environtment")
				createBlueprintOptionsModel.SchemaVersion = core.StringPtr("1.0")
				createBlueprintOptionsModel.Source = externalSourceModel
				createBlueprintOptionsModel.Config = []schematicsv1.BlueprintConfigItem{*blueprintConfigItemModel}
				createBlueprintOptionsModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				createBlueprintOptionsModel.ResourceGroup = core.StringPtr("Default")
				createBlueprintOptionsModel.Tags = []string{"blueprint:Tor-Dev"}
				createBlueprintOptionsModel.Location = core.StringPtr("us-south")
				createBlueprintOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createBlueprintOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createBlueprintOptionsModel.Flow = blueprintFlowModel
				createBlueprintOptionsModel.UserState = userStateModel
				createBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.CreateBlueprint(createBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.CreateBlueprint(createBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateBlueprint(createBlueprintOptions *CreateBlueprintOptions)`, func() {
		createBlueprintPath := "/v2/blueprints"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createBlueprintPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "config": [{"name": "Name", "description": "Description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}], "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "modules": [{"module_id": "ModuleID", "module_type": "workspace", "name": "Name", "layer": "Layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "injectors": [{"tft_git_url": "TftGitURL", "tft_git_token": "TftGitToken", "tft_prefix": "TftPrefix", "injection_type": "InjectionType", "tft_name": "TftName", "tft_parameters": [{"name": "Name", "value": "Value"}]}], "tags": "Tags", "description": "Description", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "version": ["Version"], "status": "Status", "location": "Location", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated": false, "deleted": false, "outputs": [{"name": "Name", "value": "Value", "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"specs": [{"command_name": "workspace_plan", "flow_type": "sequence_flow", "sequence_flow": [{"sequence_number": 14, "item_name": "ItemName"}], "conditional_flow": "ConditionalFlow"}]}, "blueprint_id": "BlueprintID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage", "summary_status": "Blueprint_Normal", "config_status": "Blueprint_Config_Draft", "plan_status": "Blueprint_Plan_None", "run_status": "Blueprint_Run_Plan", "resource_status": "Blueprint_Resource_Drifted"}}`)
				}))
			})
			It(`Invoke CreateBlueprint successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematicsv1.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematicsv1.BlueprintFlow)

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the CreateBlueprintOptions model
				createBlueprintOptionsModel := new(schematicsv1.CreateBlueprintOptions)
				createBlueprintOptionsModel.Name = core.StringPtr("Toronto Dev Environtment")
				createBlueprintOptionsModel.SchemaVersion = core.StringPtr("1.0")
				createBlueprintOptionsModel.Source = externalSourceModel
				createBlueprintOptionsModel.Config = []schematicsv1.BlueprintConfigItem{*blueprintConfigItemModel}
				createBlueprintOptionsModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				createBlueprintOptionsModel.ResourceGroup = core.StringPtr("Default")
				createBlueprintOptionsModel.Tags = []string{"blueprint:Tor-Dev"}
				createBlueprintOptionsModel.Location = core.StringPtr("us-south")
				createBlueprintOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createBlueprintOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createBlueprintOptionsModel.Flow = blueprintFlowModel
				createBlueprintOptionsModel.UserState = userStateModel
				createBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.CreateBlueprintWithContext(ctx, createBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.CreateBlueprint(createBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.CreateBlueprintWithContext(ctx, createBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createBlueprintPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "config": [{"name": "Name", "description": "Description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}], "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "modules": [{"module_id": "ModuleID", "module_type": "workspace", "name": "Name", "layer": "Layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "injectors": [{"tft_git_url": "TftGitURL", "tft_git_token": "TftGitToken", "tft_prefix": "TftPrefix", "injection_type": "InjectionType", "tft_name": "TftName", "tft_parameters": [{"name": "Name", "value": "Value"}]}], "tags": "Tags", "description": "Description", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "version": ["Version"], "status": "Status", "location": "Location", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated": false, "deleted": false, "outputs": [{"name": "Name", "value": "Value", "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"specs": [{"command_name": "workspace_plan", "flow_type": "sequence_flow", "sequence_flow": [{"sequence_number": 14, "item_name": "ItemName"}], "conditional_flow": "ConditionalFlow"}]}, "blueprint_id": "BlueprintID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage", "summary_status": "Blueprint_Normal", "config_status": "Blueprint_Config_Draft", "plan_status": "Blueprint_Plan_None", "run_status": "Blueprint_Run_Plan", "resource_status": "Blueprint_Resource_Drifted"}}`)
				}))
			})
			It(`Invoke CreateBlueprint successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.CreateBlueprint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematicsv1.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematicsv1.BlueprintFlow)

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the CreateBlueprintOptions model
				createBlueprintOptionsModel := new(schematicsv1.CreateBlueprintOptions)
				createBlueprintOptionsModel.Name = core.StringPtr("Toronto Dev Environtment")
				createBlueprintOptionsModel.SchemaVersion = core.StringPtr("1.0")
				createBlueprintOptionsModel.Source = externalSourceModel
				createBlueprintOptionsModel.Config = []schematicsv1.BlueprintConfigItem{*blueprintConfigItemModel}
				createBlueprintOptionsModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				createBlueprintOptionsModel.ResourceGroup = core.StringPtr("Default")
				createBlueprintOptionsModel.Tags = []string{"blueprint:Tor-Dev"}
				createBlueprintOptionsModel.Location = core.StringPtr("us-south")
				createBlueprintOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createBlueprintOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createBlueprintOptionsModel.Flow = blueprintFlowModel
				createBlueprintOptionsModel.UserState = userStateModel
				createBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.CreateBlueprint(createBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateBlueprint with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematicsv1.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematicsv1.BlueprintFlow)

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the CreateBlueprintOptions model
				createBlueprintOptionsModel := new(schematicsv1.CreateBlueprintOptions)
				createBlueprintOptionsModel.Name = core.StringPtr("Toronto Dev Environtment")
				createBlueprintOptionsModel.SchemaVersion = core.StringPtr("1.0")
				createBlueprintOptionsModel.Source = externalSourceModel
				createBlueprintOptionsModel.Config = []schematicsv1.BlueprintConfigItem{*blueprintConfigItemModel}
				createBlueprintOptionsModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				createBlueprintOptionsModel.ResourceGroup = core.StringPtr("Default")
				createBlueprintOptionsModel.Tags = []string{"blueprint:Tor-Dev"}
				createBlueprintOptionsModel.Location = core.StringPtr("us-south")
				createBlueprintOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createBlueprintOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createBlueprintOptionsModel.Flow = blueprintFlowModel
				createBlueprintOptionsModel.UserState = userStateModel
				createBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.CreateBlueprint(createBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateBlueprintOptions model with no property values
				createBlueprintOptionsModelNew := new(schematicsv1.CreateBlueprintOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.CreateBlueprint(createBlueprintOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke CreateBlueprint successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematicsv1.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematicsv1.BlueprintFlow)

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the CreateBlueprintOptions model
				createBlueprintOptionsModel := new(schematicsv1.CreateBlueprintOptions)
				createBlueprintOptionsModel.Name = core.StringPtr("Toronto Dev Environtment")
				createBlueprintOptionsModel.SchemaVersion = core.StringPtr("1.0")
				createBlueprintOptionsModel.Source = externalSourceModel
				createBlueprintOptionsModel.Config = []schematicsv1.BlueprintConfigItem{*blueprintConfigItemModel}
				createBlueprintOptionsModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				createBlueprintOptionsModel.ResourceGroup = core.StringPtr("Default")
				createBlueprintOptionsModel.Tags = []string{"blueprint:Tor-Dev"}
				createBlueprintOptionsModel.Location = core.StringPtr("us-south")
				createBlueprintOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				createBlueprintOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				createBlueprintOptionsModel.Flow = blueprintFlowModel
				createBlueprintOptionsModel.UserState = userStateModel
				createBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.CreateBlueprint(createBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetBlueprint(getBlueprintOptions *GetBlueprintOptions) - Operation response error`, func() {
		getBlueprintPath := "/v2/blueprints/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getBlueprintPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetBlueprint with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetBlueprintOptions model
				getBlueprintOptionsModel := new(schematicsv1.GetBlueprintOptions)
				getBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				getBlueprintOptionsModel.Profile = core.StringPtr("ids")
				getBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetBlueprint(getBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetBlueprint(getBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetBlueprint(getBlueprintOptions *GetBlueprintOptions)`, func() {
		getBlueprintPath := "/v2/blueprints/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getBlueprintPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "config": [{"name": "Name", "description": "Description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}], "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "modules": [{"module_id": "ModuleID", "module_type": "workspace", "name": "Name", "layer": "Layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "injectors": [{"tft_git_url": "TftGitURL", "tft_git_token": "TftGitToken", "tft_prefix": "TftPrefix", "injection_type": "InjectionType", "tft_name": "TftName", "tft_parameters": [{"name": "Name", "value": "Value"}]}], "tags": "Tags", "description": "Description", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "version": ["Version"], "status": "Status", "location": "Location", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated": false, "deleted": false, "outputs": [{"name": "Name", "value": "Value", "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"specs": [{"command_name": "workspace_plan", "flow_type": "sequence_flow", "sequence_flow": [{"sequence_number": 14, "item_name": "ItemName"}], "conditional_flow": "ConditionalFlow"}]}, "blueprint_id": "BlueprintID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage", "summary_status": "Blueprint_Normal", "config_status": "Blueprint_Config_Draft", "plan_status": "Blueprint_Plan_None", "run_status": "Blueprint_Run_Plan", "resource_status": "Blueprint_Resource_Drifted"}}`)
				}))
			})
			It(`Invoke GetBlueprint successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetBlueprintOptions model
				getBlueprintOptionsModel := new(schematicsv1.GetBlueprintOptions)
				getBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				getBlueprintOptionsModel.Profile = core.StringPtr("ids")
				getBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetBlueprintWithContext(ctx, getBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetBlueprint(getBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetBlueprintWithContext(ctx, getBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getBlueprintPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "config": [{"name": "Name", "description": "Description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}], "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "modules": [{"module_id": "ModuleID", "module_type": "workspace", "name": "Name", "layer": "Layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "injectors": [{"tft_git_url": "TftGitURL", "tft_git_token": "TftGitToken", "tft_prefix": "TftPrefix", "injection_type": "InjectionType", "tft_name": "TftName", "tft_parameters": [{"name": "Name", "value": "Value"}]}], "tags": "Tags", "description": "Description", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "version": ["Version"], "status": "Status", "location": "Location", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated": false, "deleted": false, "outputs": [{"name": "Name", "value": "Value", "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"specs": [{"command_name": "workspace_plan", "flow_type": "sequence_flow", "sequence_flow": [{"sequence_number": 14, "item_name": "ItemName"}], "conditional_flow": "ConditionalFlow"}]}, "blueprint_id": "BlueprintID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage", "summary_status": "Blueprint_Normal", "config_status": "Blueprint_Config_Draft", "plan_status": "Blueprint_Plan_None", "run_status": "Blueprint_Run_Plan", "resource_status": "Blueprint_Resource_Drifted"}}`)
				}))
			})
			It(`Invoke GetBlueprint successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetBlueprint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetBlueprintOptions model
				getBlueprintOptionsModel := new(schematicsv1.GetBlueprintOptions)
				getBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				getBlueprintOptionsModel.Profile = core.StringPtr("ids")
				getBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetBlueprint(getBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetBlueprint with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetBlueprintOptions model
				getBlueprintOptionsModel := new(schematicsv1.GetBlueprintOptions)
				getBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				getBlueprintOptionsModel.Profile = core.StringPtr("ids")
				getBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetBlueprint(getBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetBlueprintOptions model with no property values
				getBlueprintOptionsModelNew := new(schematicsv1.GetBlueprintOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetBlueprint(getBlueprintOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetBlueprint successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetBlueprintOptions model
				getBlueprintOptionsModel := new(schematicsv1.GetBlueprintOptions)
				getBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				getBlueprintOptionsModel.Profile = core.StringPtr("ids")
				getBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetBlueprint(getBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceBlueprint(replaceBlueprintOptions *ReplaceBlueprintOptions) - Operation response error`, func() {
		replaceBlueprintPath := "/v2/blueprints/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceBlueprintPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceBlueprint with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematicsv1.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematicsv1.BlueprintFlow)

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the ReplaceBlueprintOptions model
				replaceBlueprintOptionsModel := new(schematicsv1.ReplaceBlueprintOptions)
				replaceBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				replaceBlueprintOptionsModel.Name = core.StringPtr("Toronto Dev Environtment")
				replaceBlueprintOptionsModel.SchemaVersion = core.StringPtr("1.0")
				replaceBlueprintOptionsModel.Source = externalSourceModel
				replaceBlueprintOptionsModel.Config = []schematicsv1.BlueprintConfigItem{*blueprintConfigItemModel}
				replaceBlueprintOptionsModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				replaceBlueprintOptionsModel.ResourceGroup = core.StringPtr("Default")
				replaceBlueprintOptionsModel.Tags = []string{"blueprint:Tor-Dev"}
				replaceBlueprintOptionsModel.Location = core.StringPtr("us-south")
				replaceBlueprintOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				replaceBlueprintOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				replaceBlueprintOptionsModel.Flow = blueprintFlowModel
				replaceBlueprintOptionsModel.UserState = userStateModel
				replaceBlueprintOptionsModel.Profile = core.StringPtr("ids")
				replaceBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ReplaceBlueprint(replaceBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ReplaceBlueprint(replaceBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceBlueprint(replaceBlueprintOptions *ReplaceBlueprintOptions)`, func() {
		replaceBlueprintPath := "/v2/blueprints/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceBlueprintPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "config": [{"name": "Name", "description": "Description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}], "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "modules": [{"module_id": "ModuleID", "module_type": "workspace", "name": "Name", "layer": "Layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "injectors": [{"tft_git_url": "TftGitURL", "tft_git_token": "TftGitToken", "tft_prefix": "TftPrefix", "injection_type": "InjectionType", "tft_name": "TftName", "tft_parameters": [{"name": "Name", "value": "Value"}]}], "tags": "Tags", "description": "Description", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "version": ["Version"], "status": "Status", "location": "Location", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated": false, "deleted": false, "outputs": [{"name": "Name", "value": "Value", "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"specs": [{"command_name": "workspace_plan", "flow_type": "sequence_flow", "sequence_flow": [{"sequence_number": 14, "item_name": "ItemName"}], "conditional_flow": "ConditionalFlow"}]}, "blueprint_id": "BlueprintID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage", "summary_status": "Blueprint_Normal", "config_status": "Blueprint_Config_Draft", "plan_status": "Blueprint_Plan_None", "run_status": "Blueprint_Run_Plan", "resource_status": "Blueprint_Resource_Drifted"}}`)
				}))
			})
			It(`Invoke ReplaceBlueprint successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematicsv1.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematicsv1.BlueprintFlow)

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the ReplaceBlueprintOptions model
				replaceBlueprintOptionsModel := new(schematicsv1.ReplaceBlueprintOptions)
				replaceBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				replaceBlueprintOptionsModel.Name = core.StringPtr("Toronto Dev Environtment")
				replaceBlueprintOptionsModel.SchemaVersion = core.StringPtr("1.0")
				replaceBlueprintOptionsModel.Source = externalSourceModel
				replaceBlueprintOptionsModel.Config = []schematicsv1.BlueprintConfigItem{*blueprintConfigItemModel}
				replaceBlueprintOptionsModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				replaceBlueprintOptionsModel.ResourceGroup = core.StringPtr("Default")
				replaceBlueprintOptionsModel.Tags = []string{"blueprint:Tor-Dev"}
				replaceBlueprintOptionsModel.Location = core.StringPtr("us-south")
				replaceBlueprintOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				replaceBlueprintOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				replaceBlueprintOptionsModel.Flow = blueprintFlowModel
				replaceBlueprintOptionsModel.UserState = userStateModel
				replaceBlueprintOptionsModel.Profile = core.StringPtr("ids")
				replaceBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ReplaceBlueprintWithContext(ctx, replaceBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ReplaceBlueprint(replaceBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ReplaceBlueprintWithContext(ctx, replaceBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceBlueprintPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Toronto Dev Environtment", "schema_version": "1.0", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "config": [{"name": "Name", "description": "Description", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}]}], "description": "Deploys dev environtment instance in Toronto Region", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "outputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "modules": [{"module_id": "ModuleID", "module_type": "workspace", "name": "Name", "layer": "Layer", "source": {"source_type": "local", "git": {"computed_git_repo_url": "ComputedGitRepoURL", "git_repo_url": "GitRepoURL", "git_token": "GitToken", "git_repo_folder": "GitRepoFolder", "git_release": "GitRelease", "git_branch": "GitBranch", "git_commit": "GitCommit", "git_commit_timestamp": "GitCommitTimestamp"}, "catalog": {"catalog_name": "CatalogName", "catalog_id": "CatalogID", "offering_name": "OfferingName", "offering_version": "OfferingVersion", "offering_kind": "OfferingKind", "offering_target_kind": "OfferingTargetKind", "offering_id": "OfferingID", "offering_version_id": "OfferingVersionID", "offering_version_flavour_name": "OfferingVersionFlavourName", "offering_repo_url": "OfferingRepoURL", "offering_provisioner_working_directory": "OfferingProvisionerWorkingDirectory", "dry_run": true, "owning_account": "OwningAccount", "item_icon_url": "ItemIconURL", "item_id": "ItemID", "item_name": "ItemName", "item_readme_url": "ItemReadmeURL", "item_url": "ItemURL", "launch_url": "LaunchURL"}}, "injectors": [{"tft_git_url": "TftGitURL", "tft_git_token": "TftGitToken", "tft_prefix": "TftPrefix", "injection_type": "InjectionType", "tft_name": "TftName", "tft_parameters": [{"name": "Name", "value": "Value"}]}], "tags": "Tags", "description": "Description", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "version": ["Version"], "status": "Status", "location": "Location", "inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "settings": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "updated": false, "deleted": false, "outputs": [{"name": "Name", "value": "Value", "link": "Link"}], "last_job": {"command_object": "workspace", "command_object_name": "CommandObjectName", "command_object_id": "CommandObjectID", "command_name": "workspace_plan", "job_status": "job_pending"}}], "flow": {"specs": [{"command_name": "workspace_plan", "flow_type": "sequence_flow", "sequence_flow": [{"sequence_number": 14, "item_name": "ItemName"}], "conditional_flow": "ConditionalFlow"}]}, "blueprint_id": "BlueprintID", "crn": "Crn", "account": "Account", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "sys_lock": {"sys_locked": false, "sys_locked_by": "SysLockedBy", "sys_locked_at": "2019-01-01T12:00:00.000Z"}, "user_state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "state": {"status_code": "Blueprint_Create_Init", "status_message": "StatusMessage", "summary_status": "Blueprint_Normal", "config_status": "Blueprint_Config_Draft", "plan_status": "Blueprint_Plan_None", "run_status": "Blueprint_Run_Plan", "resource_status": "Blueprint_Resource_Drifted"}}`)
				}))
			})
			It(`Invoke ReplaceBlueprint successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ReplaceBlueprint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematicsv1.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematicsv1.BlueprintFlow)

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the ReplaceBlueprintOptions model
				replaceBlueprintOptionsModel := new(schematicsv1.ReplaceBlueprintOptions)
				replaceBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				replaceBlueprintOptionsModel.Name = core.StringPtr("Toronto Dev Environtment")
				replaceBlueprintOptionsModel.SchemaVersion = core.StringPtr("1.0")
				replaceBlueprintOptionsModel.Source = externalSourceModel
				replaceBlueprintOptionsModel.Config = []schematicsv1.BlueprintConfigItem{*blueprintConfigItemModel}
				replaceBlueprintOptionsModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				replaceBlueprintOptionsModel.ResourceGroup = core.StringPtr("Default")
				replaceBlueprintOptionsModel.Tags = []string{"blueprint:Tor-Dev"}
				replaceBlueprintOptionsModel.Location = core.StringPtr("us-south")
				replaceBlueprintOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				replaceBlueprintOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				replaceBlueprintOptionsModel.Flow = blueprintFlowModel
				replaceBlueprintOptionsModel.UserState = userStateModel
				replaceBlueprintOptionsModel.Profile = core.StringPtr("ids")
				replaceBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ReplaceBlueprint(replaceBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceBlueprint with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematicsv1.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematicsv1.BlueprintFlow)

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the ReplaceBlueprintOptions model
				replaceBlueprintOptionsModel := new(schematicsv1.ReplaceBlueprintOptions)
				replaceBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				replaceBlueprintOptionsModel.Name = core.StringPtr("Toronto Dev Environtment")
				replaceBlueprintOptionsModel.SchemaVersion = core.StringPtr("1.0")
				replaceBlueprintOptionsModel.Source = externalSourceModel
				replaceBlueprintOptionsModel.Config = []schematicsv1.BlueprintConfigItem{*blueprintConfigItemModel}
				replaceBlueprintOptionsModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				replaceBlueprintOptionsModel.ResourceGroup = core.StringPtr("Default")
				replaceBlueprintOptionsModel.Tags = []string{"blueprint:Tor-Dev"}
				replaceBlueprintOptionsModel.Location = core.StringPtr("us-south")
				replaceBlueprintOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				replaceBlueprintOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				replaceBlueprintOptionsModel.Flow = blueprintFlowModel
				replaceBlueprintOptionsModel.UserState = userStateModel
				replaceBlueprintOptionsModel.Profile = core.StringPtr("ids")
				replaceBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ReplaceBlueprint(replaceBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceBlueprintOptions model with no property values
				replaceBlueprintOptionsModelNew := new(schematicsv1.ReplaceBlueprintOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ReplaceBlueprint(replaceBlueprintOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceBlueprint successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematicsv1.BlueprintConfigItem)
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematicsv1.BlueprintFlow)

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the ReplaceBlueprintOptions model
				replaceBlueprintOptionsModel := new(schematicsv1.ReplaceBlueprintOptions)
				replaceBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				replaceBlueprintOptionsModel.Name = core.StringPtr("Toronto Dev Environtment")
				replaceBlueprintOptionsModel.SchemaVersion = core.StringPtr("1.0")
				replaceBlueprintOptionsModel.Source = externalSourceModel
				replaceBlueprintOptionsModel.Config = []schematicsv1.BlueprintConfigItem{*blueprintConfigItemModel}
				replaceBlueprintOptionsModel.Description = core.StringPtr("Deploys dev environtment instance in Toronto Region")
				replaceBlueprintOptionsModel.ResourceGroup = core.StringPtr("Default")
				replaceBlueprintOptionsModel.Tags = []string{"blueprint:Tor-Dev"}
				replaceBlueprintOptionsModel.Location = core.StringPtr("us-south")
				replaceBlueprintOptionsModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				replaceBlueprintOptionsModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				replaceBlueprintOptionsModel.Flow = blueprintFlowModel
				replaceBlueprintOptionsModel.UserState = userStateModel
				replaceBlueprintOptionsModel.Profile = core.StringPtr("ids")
				replaceBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ReplaceBlueprint(replaceBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteBlueprint(deleteBlueprintOptions *DeleteBlueprintOptions)`, func() {
		deleteBlueprintPath := "/v2/blueprints/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteBlueprintPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// TODO: Add check for destroy query parameter
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteBlueprint successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematicsService.DeleteBlueprint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteBlueprintOptions model
				deleteBlueprintOptionsModel := new(schematicsv1.DeleteBlueprintOptions)
				deleteBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				deleteBlueprintOptionsModel.Profile = core.StringPtr("ids")
				deleteBlueprintOptionsModel.Destroy = core.BoolPtr(true)
				deleteBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematicsService.DeleteBlueprint(deleteBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteBlueprint with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteBlueprintOptions model
				deleteBlueprintOptionsModel := new(schematicsv1.DeleteBlueprintOptions)
				deleteBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				deleteBlueprintOptionsModel.Profile = core.StringPtr("ids")
				deleteBlueprintOptionsModel.Destroy = core.BoolPtr(true)
				deleteBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematicsService.DeleteBlueprint(deleteBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteBlueprintOptions model with no property values
				deleteBlueprintOptionsModelNew := new(schematicsv1.DeleteBlueprintOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematicsService.DeleteBlueprint(deleteBlueprintOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptions *UploadTemplateTarBlueprintOptions) - Operation response error`, func() {
		uploadTemplateTarBlueprintPath := "/v2/blueprints/testString/template_repo_upload"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarBlueprintPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UploadTemplateTarBlueprint with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarBlueprintOptions model
				uploadTemplateTarBlueprintOptionsModel := new(schematicsv1.UploadTemplateTarBlueprintOptions)
				uploadTemplateTarBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarBlueprintOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptions *UploadTemplateTarBlueprintOptions)`, func() {
		uploadTemplateTarBlueprintPath := "/v2/blueprints/testString/template_repo_upload"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarBlueprintPath))
					Expect(req.Method).To(Equal("PUT"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"file_value": "FileValue", "has_received_file": false}`)
				}))
			})
			It(`Invoke UploadTemplateTarBlueprint successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the UploadTemplateTarBlueprintOptions model
				uploadTemplateTarBlueprintOptionsModel := new(schematicsv1.UploadTemplateTarBlueprintOptions)
				uploadTemplateTarBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarBlueprintOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.UploadTemplateTarBlueprintWithContext(ctx, uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.UploadTemplateTarBlueprintWithContext(ctx, uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(uploadTemplateTarBlueprintPath))
					Expect(req.Method).To(Equal("PUT"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"file_value": "FileValue", "has_received_file": false}`)
				}))
			})
			It(`Invoke UploadTemplateTarBlueprint successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.UploadTemplateTarBlueprint(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UploadTemplateTarBlueprintOptions model
				uploadTemplateTarBlueprintOptionsModel := new(schematicsv1.UploadTemplateTarBlueprintOptions)
				uploadTemplateTarBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarBlueprintOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UploadTemplateTarBlueprint with error: Param validation error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:  testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarBlueprintOptions model
				uploadTemplateTarBlueprintOptionsModel := new(schematicsv1.UploadTemplateTarBlueprintOptions)
				// Invoke operation with invalid options model (negative test)
				result, response, operationErr := schematicsService.UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			It(`Invoke UploadTemplateTarBlueprint with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarBlueprintOptions model
				uploadTemplateTarBlueprintOptionsModel := new(schematicsv1.UploadTemplateTarBlueprintOptions)
				uploadTemplateTarBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarBlueprintOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UploadTemplateTarBlueprintOptions model with no property values
				uploadTemplateTarBlueprintOptionsModelNew := new(schematicsv1.UploadTemplateTarBlueprintOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UploadTemplateTarBlueprint successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UploadTemplateTarBlueprintOptions model
				uploadTemplateTarBlueprintOptionsModel := new(schematicsv1.UploadTemplateTarBlueprintOptions)
				uploadTemplateTarBlueprintOptionsModel.BlueprintID = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.File = CreateMockReader("This is a mock file.")
				uploadTemplateTarBlueprintOptionsModel.FileContentType = core.StringPtr("testString")
				uploadTemplateTarBlueprintOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.UploadTemplateTarBlueprint(uploadTemplateTarBlueprintOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInventories(listInventoriesOptions *ListInventoriesOptions) - Operation response error`, func() {
		listInventoriesPath := "/v2/inventories"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInventoriesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInventories with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListInventoriesOptions model
				listInventoriesOptionsModel := new(schematicsv1.ListInventoriesOptions)
				listInventoriesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listInventoriesOptionsModel.Limit = core.Int64Ptr(int64(100))
				listInventoriesOptionsModel.Sort = core.StringPtr("testString")
				listInventoriesOptionsModel.Profile = core.StringPtr("ids")
				listInventoriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListInventories(listInventoriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListInventories(listInventoriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInventories(listInventoriesOptions *ListInventoriesOptions)`, func() {
		listInventoriesPath := "/v2/inventories"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInventoriesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "inventories": [{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}]}`)
				}))
			})
			It(`Invoke ListInventories successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListInventoriesOptions model
				listInventoriesOptionsModel := new(schematicsv1.ListInventoriesOptions)
				listInventoriesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listInventoriesOptionsModel.Limit = core.Int64Ptr(int64(100))
				listInventoriesOptionsModel.Sort = core.StringPtr("testString")
				listInventoriesOptionsModel.Profile = core.StringPtr("ids")
				listInventoriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListInventoriesWithContext(ctx, listInventoriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListInventories(listInventoriesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListInventoriesWithContext(ctx, listInventoriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInventoriesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "inventories": [{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}]}`)
				}))
			})
			It(`Invoke ListInventories successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListInventories(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInventoriesOptions model
				listInventoriesOptionsModel := new(schematicsv1.ListInventoriesOptions)
				listInventoriesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listInventoriesOptionsModel.Limit = core.Int64Ptr(int64(100))
				listInventoriesOptionsModel.Sort = core.StringPtr("testString")
				listInventoriesOptionsModel.Profile = core.StringPtr("ids")
				listInventoriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListInventories(listInventoriesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListInventories with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListInventoriesOptions model
				listInventoriesOptionsModel := new(schematicsv1.ListInventoriesOptions)
				listInventoriesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listInventoriesOptionsModel.Limit = core.Int64Ptr(int64(100))
				listInventoriesOptionsModel.Sort = core.StringPtr("testString")
				listInventoriesOptionsModel.Profile = core.StringPtr("ids")
				listInventoriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListInventories(listInventoriesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListInventories successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListInventoriesOptions model
				listInventoriesOptionsModel := new(schematicsv1.ListInventoriesOptions)
				listInventoriesOptionsModel.Offset = core.Int64Ptr(int64(0))
				listInventoriesOptionsModel.Limit = core.Int64Ptr(int64(100))
				listInventoriesOptionsModel.Sort = core.StringPtr("testString")
				listInventoriesOptionsModel.Profile = core.StringPtr("ids")
				listInventoriesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ListInventories(listInventoriesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInventory(createInventoryOptions *CreateInventoryOptions) - Operation response error`, func() {
		createInventoryPath := "/v2/inventories"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInventoryPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInventory with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the CreateInventoryOptions model
				createInventoryOptionsModel := new(schematicsv1.CreateInventoryOptions)
				createInventoryOptionsModel.Name = core.StringPtr("testString")
				createInventoryOptionsModel.Description = core.StringPtr("testString")
				createInventoryOptionsModel.Location = core.StringPtr("us-south")
				createInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				createInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				createInventoryOptionsModel.ResourceQueries = []string{"testString"}
				createInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.CreateInventory(createInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.CreateInventory(createInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInventory(createInventoryOptions *CreateInventoryOptions)`, func() {
		createInventoryPath := "/v2/inventories"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInventoryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke CreateInventory successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the CreateInventoryOptions model
				createInventoryOptionsModel := new(schematicsv1.CreateInventoryOptions)
				createInventoryOptionsModel.Name = core.StringPtr("testString")
				createInventoryOptionsModel.Description = core.StringPtr("testString")
				createInventoryOptionsModel.Location = core.StringPtr("us-south")
				createInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				createInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				createInventoryOptionsModel.ResourceQueries = []string{"testString"}
				createInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.CreateInventoryWithContext(ctx, createInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.CreateInventory(createInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.CreateInventoryWithContext(ctx, createInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInventoryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke CreateInventory successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.CreateInventory(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateInventoryOptions model
				createInventoryOptionsModel := new(schematicsv1.CreateInventoryOptions)
				createInventoryOptionsModel.Name = core.StringPtr("testString")
				createInventoryOptionsModel.Description = core.StringPtr("testString")
				createInventoryOptionsModel.Location = core.StringPtr("us-south")
				createInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				createInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				createInventoryOptionsModel.ResourceQueries = []string{"testString"}
				createInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.CreateInventory(createInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateInventory with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the CreateInventoryOptions model
				createInventoryOptionsModel := new(schematicsv1.CreateInventoryOptions)
				createInventoryOptionsModel.Name = core.StringPtr("testString")
				createInventoryOptionsModel.Description = core.StringPtr("testString")
				createInventoryOptionsModel.Location = core.StringPtr("us-south")
				createInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				createInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				createInventoryOptionsModel.ResourceQueries = []string{"testString"}
				createInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.CreateInventory(createInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke CreateInventory successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the CreateInventoryOptions model
				createInventoryOptionsModel := new(schematicsv1.CreateInventoryOptions)
				createInventoryOptionsModel.Name = core.StringPtr("testString")
				createInventoryOptionsModel.Description = core.StringPtr("testString")
				createInventoryOptionsModel.Location = core.StringPtr("us-south")
				createInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				createInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				createInventoryOptionsModel.ResourceQueries = []string{"testString"}
				createInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.CreateInventory(createInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInventory(getInventoryOptions *GetInventoryOptions) - Operation response error`, func() {
		getInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInventoryPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInventory with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetInventoryOptions model
				getInventoryOptionsModel := new(schematicsv1.GetInventoryOptions)
				getInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryOptionsModel.Profile = core.StringPtr("summary")
				getInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetInventory(getInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetInventory(getInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInventory(getInventoryOptions *GetInventoryOptions)`, func() {
		getInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInventoryPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke GetInventory successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetInventoryOptions model
				getInventoryOptionsModel := new(schematicsv1.GetInventoryOptions)
				getInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryOptionsModel.Profile = core.StringPtr("summary")
				getInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetInventoryWithContext(ctx, getInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetInventory(getInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetInventoryWithContext(ctx, getInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInventoryPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke GetInventory successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetInventory(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInventoryOptions model
				getInventoryOptionsModel := new(schematicsv1.GetInventoryOptions)
				getInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryOptionsModel.Profile = core.StringPtr("summary")
				getInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetInventory(getInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInventory with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetInventoryOptions model
				getInventoryOptionsModel := new(schematicsv1.GetInventoryOptions)
				getInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryOptionsModel.Profile = core.StringPtr("summary")
				getInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetInventory(getInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInventoryOptions model with no property values
				getInventoryOptionsModelNew := new(schematicsv1.GetInventoryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetInventory(getInventoryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetInventory successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetInventoryOptions model
				getInventoryOptionsModel := new(schematicsv1.GetInventoryOptions)
				getInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				getInventoryOptionsModel.Profile = core.StringPtr("summary")
				getInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetInventory(getInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceInventory(replaceInventoryOptions *ReplaceInventoryOptions) - Operation response error`, func() {
		replaceInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceInventoryPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceInventory with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ReplaceInventoryOptions model
				replaceInventoryOptionsModel := new(schematicsv1.ReplaceInventoryOptions)
				replaceInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				replaceInventoryOptionsModel.Name = core.StringPtr("testString")
				replaceInventoryOptionsModel.Description = core.StringPtr("testString")
				replaceInventoryOptionsModel.Location = core.StringPtr("us-south")
				replaceInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				replaceInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				replaceInventoryOptionsModel.ResourceQueries = []string{"testString"}
				replaceInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ReplaceInventory(replaceInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ReplaceInventory(replaceInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceInventory(replaceInventoryOptions *ReplaceInventoryOptions)`, func() {
		replaceInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceInventoryPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke ReplaceInventory successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ReplaceInventoryOptions model
				replaceInventoryOptionsModel := new(schematicsv1.ReplaceInventoryOptions)
				replaceInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				replaceInventoryOptionsModel.Name = core.StringPtr("testString")
				replaceInventoryOptionsModel.Description = core.StringPtr("testString")
				replaceInventoryOptionsModel.Location = core.StringPtr("us-south")
				replaceInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				replaceInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				replaceInventoryOptionsModel.ResourceQueries = []string{"testString"}
				replaceInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ReplaceInventoryWithContext(ctx, replaceInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ReplaceInventory(replaceInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ReplaceInventoryWithContext(ctx, replaceInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceInventoryPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Name", "id": "ID", "description": "Description", "location": "us-south", "resource_group": "ResourceGroup", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "inventories_ini": "InventoriesIni", "resource_queries": ["ResourceQueries"]}`)
				}))
			})
			It(`Invoke ReplaceInventory successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ReplaceInventory(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ReplaceInventoryOptions model
				replaceInventoryOptionsModel := new(schematicsv1.ReplaceInventoryOptions)
				replaceInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				replaceInventoryOptionsModel.Name = core.StringPtr("testString")
				replaceInventoryOptionsModel.Description = core.StringPtr("testString")
				replaceInventoryOptionsModel.Location = core.StringPtr("us-south")
				replaceInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				replaceInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				replaceInventoryOptionsModel.ResourceQueries = []string{"testString"}
				replaceInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ReplaceInventory(replaceInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceInventory with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ReplaceInventoryOptions model
				replaceInventoryOptionsModel := new(schematicsv1.ReplaceInventoryOptions)
				replaceInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				replaceInventoryOptionsModel.Name = core.StringPtr("testString")
				replaceInventoryOptionsModel.Description = core.StringPtr("testString")
				replaceInventoryOptionsModel.Location = core.StringPtr("us-south")
				replaceInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				replaceInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				replaceInventoryOptionsModel.ResourceQueries = []string{"testString"}
				replaceInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ReplaceInventory(replaceInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceInventoryOptions model with no property values
				replaceInventoryOptionsModelNew := new(schematicsv1.ReplaceInventoryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ReplaceInventory(replaceInventoryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceInventory successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ReplaceInventoryOptions model
				replaceInventoryOptionsModel := new(schematicsv1.ReplaceInventoryOptions)
				replaceInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				replaceInventoryOptionsModel.Name = core.StringPtr("testString")
				replaceInventoryOptionsModel.Description = core.StringPtr("testString")
				replaceInventoryOptionsModel.Location = core.StringPtr("us-south")
				replaceInventoryOptionsModel.ResourceGroup = core.StringPtr("testString")
				replaceInventoryOptionsModel.InventoriesIni = core.StringPtr("testString")
				replaceInventoryOptionsModel.ResourceQueries = []string{"testString"}
				replaceInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ReplaceInventory(replaceInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteInventory(deleteInventoryOptions *DeleteInventoryOptions)`, func() {
		deleteInventoryPath := "/v2/inventories/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteInventoryPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInventory successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematicsService.DeleteInventory(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInventoryOptions model
				deleteInventoryOptionsModel := new(schematicsv1.DeleteInventoryOptions)
				deleteInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				deleteInventoryOptionsModel.Force = core.BoolPtr(true)
				deleteInventoryOptionsModel.Propagate = core.BoolPtr(true)
				deleteInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematicsService.DeleteInventory(deleteInventoryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInventory with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteInventoryOptions model
				deleteInventoryOptionsModel := new(schematicsv1.DeleteInventoryOptions)
				deleteInventoryOptionsModel.InventoryID = core.StringPtr("testString")
				deleteInventoryOptionsModel.Force = core.BoolPtr(true)
				deleteInventoryOptionsModel.Propagate = core.BoolPtr(true)
				deleteInventoryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematicsService.DeleteInventory(deleteInventoryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInventoryOptions model with no property values
				deleteInventoryOptionsModelNew := new(schematicsv1.DeleteInventoryOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematicsService.DeleteInventory(deleteInventoryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListResourceQuery(listResourceQueryOptions *ListResourceQueryOptions) - Operation response error`, func() {
		listResourceQueryPath := "/v2/resources_query"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listResourceQueryPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListResourceQuery with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListResourceQueryOptions model
				listResourceQueryOptionsModel := new(schematicsv1.ListResourceQueryOptions)
				listResourceQueryOptionsModel.Offset = core.Int64Ptr(int64(0))
				listResourceQueryOptionsModel.Limit = core.Int64Ptr(int64(100))
				listResourceQueryOptionsModel.Sort = core.StringPtr("testString")
				listResourceQueryOptionsModel.Profile = core.StringPtr("ids")
				listResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListResourceQuery(listResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListResourceQuery(listResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListResourceQuery(listResourceQueryOptions *ListResourceQueryOptions)`, func() {
		listResourceQueryPath := "/v2/resources_query"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listResourceQueryPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "resource_queries": [{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}]}`)
				}))
			})
			It(`Invoke ListResourceQuery successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListResourceQueryOptions model
				listResourceQueryOptionsModel := new(schematicsv1.ListResourceQueryOptions)
				listResourceQueryOptionsModel.Offset = core.Int64Ptr(int64(0))
				listResourceQueryOptionsModel.Limit = core.Int64Ptr(int64(100))
				listResourceQueryOptionsModel.Sort = core.StringPtr("testString")
				listResourceQueryOptionsModel.Profile = core.StringPtr("ids")
				listResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListResourceQueryWithContext(ctx, listResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListResourceQuery(listResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListResourceQueryWithContext(ctx, listResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listResourceQueryPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"ids"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "resource_queries": [{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}]}`)
				}))
			})
			It(`Invoke ListResourceQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListResourceQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListResourceQueryOptions model
				listResourceQueryOptionsModel := new(schematicsv1.ListResourceQueryOptions)
				listResourceQueryOptionsModel.Offset = core.Int64Ptr(int64(0))
				listResourceQueryOptionsModel.Limit = core.Int64Ptr(int64(100))
				listResourceQueryOptionsModel.Sort = core.StringPtr("testString")
				listResourceQueryOptionsModel.Profile = core.StringPtr("ids")
				listResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListResourceQuery(listResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListResourceQuery with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListResourceQueryOptions model
				listResourceQueryOptionsModel := new(schematicsv1.ListResourceQueryOptions)
				listResourceQueryOptionsModel.Offset = core.Int64Ptr(int64(0))
				listResourceQueryOptionsModel.Limit = core.Int64Ptr(int64(100))
				listResourceQueryOptionsModel.Sort = core.StringPtr("testString")
				listResourceQueryOptionsModel.Profile = core.StringPtr("ids")
				listResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListResourceQuery(listResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListResourceQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListResourceQueryOptions model
				listResourceQueryOptionsModel := new(schematicsv1.ListResourceQueryOptions)
				listResourceQueryOptionsModel.Offset = core.Int64Ptr(int64(0))
				listResourceQueryOptionsModel.Limit = core.Int64Ptr(int64(100))
				listResourceQueryOptionsModel.Sort = core.StringPtr("testString")
				listResourceQueryOptionsModel.Profile = core.StringPtr("ids")
				listResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ListResourceQuery(listResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateResourceQuery(createResourceQueryOptions *CreateResourceQueryOptions) - Operation response error`, func() {
		createResourceQueryPath := "/v2/resources_query"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateResourceQuery with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the CreateResourceQueryOptions model
				createResourceQueryOptionsModel := new(schematicsv1.CreateResourceQueryOptions)
				createResourceQueryOptionsModel.Type = core.StringPtr("vsi")
				createResourceQueryOptionsModel.Name = core.StringPtr("testString")
				createResourceQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				createResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.CreateResourceQuery(createResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.CreateResourceQuery(createResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateResourceQuery(createResourceQueryOptions *CreateResourceQueryOptions)`, func() {
		createResourceQueryPath := "/v2/resources_query"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke CreateResourceQuery successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the CreateResourceQueryOptions model
				createResourceQueryOptionsModel := new(schematicsv1.CreateResourceQueryOptions)
				createResourceQueryOptionsModel.Type = core.StringPtr("vsi")
				createResourceQueryOptionsModel.Name = core.StringPtr("testString")
				createResourceQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				createResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.CreateResourceQueryWithContext(ctx, createResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.CreateResourceQuery(createResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.CreateResourceQueryWithContext(ctx, createResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke CreateResourceQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.CreateResourceQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the CreateResourceQueryOptions model
				createResourceQueryOptionsModel := new(schematicsv1.CreateResourceQueryOptions)
				createResourceQueryOptionsModel.Type = core.StringPtr("vsi")
				createResourceQueryOptionsModel.Name = core.StringPtr("testString")
				createResourceQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				createResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.CreateResourceQuery(createResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateResourceQuery with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the CreateResourceQueryOptions model
				createResourceQueryOptionsModel := new(schematicsv1.CreateResourceQueryOptions)
				createResourceQueryOptionsModel.Type = core.StringPtr("vsi")
				createResourceQueryOptionsModel.Name = core.StringPtr("testString")
				createResourceQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				createResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.CreateResourceQuery(createResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke CreateResourceQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the CreateResourceQueryOptions model
				createResourceQueryOptionsModel := new(schematicsv1.CreateResourceQueryOptions)
				createResourceQueryOptionsModel.Type = core.StringPtr("vsi")
				createResourceQueryOptionsModel.Name = core.StringPtr("testString")
				createResourceQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				createResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.CreateResourceQuery(createResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetResourcesQuery(getResourcesQueryOptions *GetResourcesQueryOptions) - Operation response error`, func() {
		getResourcesQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getResourcesQueryPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetResourcesQuery with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetResourcesQueryOptions model
				getResourcesQueryOptionsModel := new(schematicsv1.GetResourcesQueryOptions)
				getResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				getResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetResourcesQuery(getResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetResourcesQuery(getResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetResourcesQuery(getResourcesQueryOptions *GetResourcesQueryOptions)`, func() {
		getResourcesQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getResourcesQueryPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke GetResourcesQuery successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetResourcesQueryOptions model
				getResourcesQueryOptionsModel := new(schematicsv1.GetResourcesQueryOptions)
				getResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				getResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetResourcesQueryWithContext(ctx, getResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetResourcesQuery(getResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetResourcesQueryWithContext(ctx, getResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getResourcesQueryPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke GetResourcesQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetResourcesQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetResourcesQueryOptions model
				getResourcesQueryOptionsModel := new(schematicsv1.GetResourcesQueryOptions)
				getResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				getResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetResourcesQuery(getResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetResourcesQuery with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetResourcesQueryOptions model
				getResourcesQueryOptionsModel := new(schematicsv1.GetResourcesQueryOptions)
				getResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				getResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetResourcesQuery(getResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetResourcesQueryOptions model with no property values
				getResourcesQueryOptionsModelNew := new(schematicsv1.GetResourcesQueryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetResourcesQuery(getResourcesQueryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetResourcesQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetResourcesQueryOptions model
				getResourcesQueryOptionsModel := new(schematicsv1.GetResourcesQueryOptions)
				getResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				getResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetResourcesQuery(getResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceResourcesQuery(replaceResourcesQueryOptions *ReplaceResourcesQueryOptions) - Operation response error`, func() {
		replaceResourcesQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceResourcesQueryPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceResourcesQuery with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the ReplaceResourcesQueryOptions model
				replaceResourcesQueryOptionsModel := new(schematicsv1.ReplaceResourcesQueryOptions)
				replaceResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Type = core.StringPtr("vsi")
				replaceResourcesQueryOptionsModel.Name = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				replaceResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceResourcesQuery(replaceResourcesQueryOptions *ReplaceResourcesQueryOptions)`, func() {
		replaceResourcesQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceResourcesQueryPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke ReplaceResourcesQuery successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the ReplaceResourcesQueryOptions model
				replaceResourcesQueryOptionsModel := new(schematicsv1.ReplaceResourcesQueryOptions)
				replaceResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Type = core.StringPtr("vsi")
				replaceResourcesQueryOptionsModel.Name = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				replaceResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ReplaceResourcesQueryWithContext(ctx, replaceResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ReplaceResourcesQueryWithContext(ctx, replaceResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceResourcesQueryPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"type": "vsi", "name": "Name", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "queries": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"]}]}`)
				}))
			})
			It(`Invoke ReplaceResourcesQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ReplaceResourcesQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the ReplaceResourcesQueryOptions model
				replaceResourcesQueryOptionsModel := new(schematicsv1.ReplaceResourcesQueryOptions)
				replaceResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Type = core.StringPtr("vsi")
				replaceResourcesQueryOptionsModel.Name = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				replaceResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceResourcesQuery with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the ReplaceResourcesQueryOptions model
				replaceResourcesQueryOptionsModel := new(schematicsv1.ReplaceResourcesQueryOptions)
				replaceResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Type = core.StringPtr("vsi")
				replaceResourcesQueryOptionsModel.Name = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				replaceResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceResourcesQueryOptions model with no property values
				replaceResourcesQueryOptionsModelNew := new(schematicsv1.ReplaceResourcesQueryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceResourcesQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}

				// Construct an instance of the ReplaceResourcesQueryOptions model
				replaceResourcesQueryOptionsModel := new(schematicsv1.ReplaceResourcesQueryOptions)
				replaceResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Type = core.StringPtr("vsi")
				replaceResourcesQueryOptionsModel.Name = core.StringPtr("testString")
				replaceResourcesQueryOptionsModel.Queries = []schematicsv1.ResourceQuery{*resourceQueryModel}
				replaceResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ReplaceResourcesQuery(replaceResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ExecuteResourceQuery(executeResourceQueryOptions *ExecuteResourceQueryOptions) - Operation response error`, func() {
		executeResourceQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(executeResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ExecuteResourceQuery with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ExecuteResourceQueryOptions model
				executeResourceQueryOptionsModel := new(schematicsv1.ExecuteResourceQueryOptions)
				executeResourceQueryOptionsModel.QueryID = core.StringPtr("testString")
				executeResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ExecuteResourceQuery(executeResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ExecuteResourceQuery(executeResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ExecuteResourceQuery(executeResourceQueryOptions *ExecuteResourceQueryOptions)`, func() {
		executeResourceQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(executeResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"response": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"], "query_output": [{"name": "Name", "value": "Value"}]}]}`)
				}))
			})
			It(`Invoke ExecuteResourceQuery successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ExecuteResourceQueryOptions model
				executeResourceQueryOptionsModel := new(schematicsv1.ExecuteResourceQueryOptions)
				executeResourceQueryOptionsModel.QueryID = core.StringPtr("testString")
				executeResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ExecuteResourceQueryWithContext(ctx, executeResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ExecuteResourceQuery(executeResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ExecuteResourceQueryWithContext(ctx, executeResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(executeResourceQueryPath))
					Expect(req.Method).To(Equal("POST"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"response": [{"query_type": "workspaces", "query_condition": [{"name": "Name", "value": "Value", "description": "Description"}], "query_select": ["QuerySelect"], "query_output": [{"name": "Name", "value": "Value"}]}]}`)
				}))
			})
			It(`Invoke ExecuteResourceQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ExecuteResourceQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ExecuteResourceQueryOptions model
				executeResourceQueryOptionsModel := new(schematicsv1.ExecuteResourceQueryOptions)
				executeResourceQueryOptionsModel.QueryID = core.StringPtr("testString")
				executeResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ExecuteResourceQuery(executeResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ExecuteResourceQuery with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ExecuteResourceQueryOptions model
				executeResourceQueryOptionsModel := new(schematicsv1.ExecuteResourceQueryOptions)
				executeResourceQueryOptionsModel.QueryID = core.StringPtr("testString")
				executeResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ExecuteResourceQuery(executeResourceQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ExecuteResourceQueryOptions model with no property values
				executeResourceQueryOptionsModelNew := new(schematicsv1.ExecuteResourceQueryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ExecuteResourceQuery(executeResourceQueryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ExecuteResourceQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ExecuteResourceQueryOptions model
				executeResourceQueryOptionsModel := new(schematicsv1.ExecuteResourceQueryOptions)
				executeResourceQueryOptionsModel.QueryID = core.StringPtr("testString")
				executeResourceQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ExecuteResourceQuery(executeResourceQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteResourcesQuery(deleteResourcesQueryOptions *DeleteResourcesQueryOptions)`, func() {
		deleteResourcesQueryPath := "/v2/resources_query/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteResourcesQueryPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.Header["Force"]).ToNot(BeNil())
					Expect(req.Header["Force"][0]).To(Equal(fmt.Sprintf("%v", true)))
					Expect(req.Header["Propagate"]).ToNot(BeNil())
					Expect(req.Header["Propagate"][0]).To(Equal(fmt.Sprintf("%v", true)))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteResourcesQuery successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematicsService.DeleteResourcesQuery(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteResourcesQueryOptions model
				deleteResourcesQueryOptionsModel := new(schematicsv1.DeleteResourcesQueryOptions)
				deleteResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				deleteResourcesQueryOptionsModel.Force = core.BoolPtr(true)
				deleteResourcesQueryOptionsModel.Propagate = core.BoolPtr(true)
				deleteResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematicsService.DeleteResourcesQuery(deleteResourcesQueryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteResourcesQuery with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteResourcesQueryOptions model
				deleteResourcesQueryOptionsModel := new(schematicsv1.DeleteResourcesQueryOptions)
				deleteResourcesQueryOptionsModel.QueryID = core.StringPtr("testString")
				deleteResourcesQueryOptionsModel.Force = core.BoolPtr(true)
				deleteResourcesQueryOptionsModel.Propagate = core.BoolPtr(true)
				deleteResourcesQueryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematicsService.DeleteResourcesQuery(deleteResourcesQueryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteResourcesQueryOptions model with no property values
				deleteResourcesQueryOptionsModelNew := new(schematicsv1.DeleteResourcesQueryOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematicsService.DeleteResourcesQuery(deleteResourcesQueryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListAgent(listAgentOptions *ListAgentOptions) - Operation response error`, func() {
		listAgentPath := "/v2/settings/agents"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listAgentPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					Expect(req.URL.Query()["filter"]).To(Equal([]string{"all"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListAgent with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListAgentOptions model
				listAgentOptionsModel := new(schematicsv1.ListAgentOptions)
				listAgentOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAgentOptionsModel.Limit = core.Int64Ptr(int64(100))
				listAgentOptionsModel.Profile = core.StringPtr("summary")
				listAgentOptionsModel.Filter = core.StringPtr("all")
				listAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListAgent(listAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListAgent(listAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListAgent(listAgentOptions *ListAgentOptions)`, func() {
		listAgentPath := "/v2/settings/agents"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listAgentPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					Expect(req.URL.Query()["filter"]).To(Equal([]string{"all"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "agents": [{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "agent_location": "us-south", "location": "us-south", "profile_id": "ProfileID", "agent_crn": "AgentCrn", "id": "ID", "registered_at": "2019-01-01T12:00:00.000Z", "registered_by": "RegisteredBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "user_state": {"state": "enable", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "connection_state": {"state": "Connected", "checked_at": "2019-01-01T12:00:00.000Z"}, "system_state": {"state": "error", "message": "Message"}}]}`)
				}))
			})
			It(`Invoke ListAgent successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListAgentOptions model
				listAgentOptionsModel := new(schematicsv1.ListAgentOptions)
				listAgentOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAgentOptionsModel.Limit = core.Int64Ptr(int64(100))
				listAgentOptionsModel.Profile = core.StringPtr("summary")
				listAgentOptionsModel.Filter = core.StringPtr("all")
				listAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListAgentWithContext(ctx, listAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListAgent(listAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListAgentWithContext(ctx, listAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listAgentPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					Expect(req.URL.Query()["filter"]).To(Equal([]string{"all"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "agents": [{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "agent_location": "us-south", "location": "us-south", "profile_id": "ProfileID", "agent_crn": "AgentCrn", "id": "ID", "registered_at": "2019-01-01T12:00:00.000Z", "registered_by": "RegisteredBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "user_state": {"state": "enable", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "connection_state": {"state": "Connected", "checked_at": "2019-01-01T12:00:00.000Z"}, "system_state": {"state": "error", "message": "Message"}}]}`)
				}))
			})
			It(`Invoke ListAgent successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListAgent(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListAgentOptions model
				listAgentOptionsModel := new(schematicsv1.ListAgentOptions)
				listAgentOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAgentOptionsModel.Limit = core.Int64Ptr(int64(100))
				listAgentOptionsModel.Profile = core.StringPtr("summary")
				listAgentOptionsModel.Filter = core.StringPtr("all")
				listAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListAgent(listAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListAgent with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListAgentOptions model
				listAgentOptionsModel := new(schematicsv1.ListAgentOptions)
				listAgentOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAgentOptionsModel.Limit = core.Int64Ptr(int64(100))
				listAgentOptionsModel.Profile = core.StringPtr("summary")
				listAgentOptionsModel.Filter = core.StringPtr("all")
				listAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListAgent(listAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListAgent successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListAgentOptions model
				listAgentOptionsModel := new(schematicsv1.ListAgentOptions)
				listAgentOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAgentOptionsModel.Limit = core.Int64Ptr(int64(100))
				listAgentOptionsModel.Profile = core.StringPtr("summary")
				listAgentOptionsModel.Filter = core.StringPtr("all")
				listAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ListAgent(listAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RegisterAgent(registerAgentOptions *RegisterAgentOptions) - Operation response error`, func() {
		registerAgentPath := "/v2/settings/agents"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerAgentPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke RegisterAgent with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the RegisterAgentOptions model
				registerAgentOptionsModel := new(schematicsv1.RegisterAgentOptions)
				registerAgentOptionsModel.Name = core.StringPtr("MyDevAgent")
				registerAgentOptionsModel.AgentLocation = core.StringPtr("us-south")
				registerAgentOptionsModel.Location = core.StringPtr("us-south")
				registerAgentOptionsModel.ProfileID = core.StringPtr("testString")
				registerAgentOptionsModel.Description = core.StringPtr("Register agent")
				registerAgentOptionsModel.ResourceGroup = core.StringPtr("testString")
				registerAgentOptionsModel.Tags = []string{"testString"}
				registerAgentOptionsModel.UserState = agentUserStateModel
				registerAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.RegisterAgent(registerAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.RegisterAgent(registerAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RegisterAgent(registerAgentOptions *RegisterAgentOptions)`, func() {
		registerAgentPath := "/v2/settings/agents"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerAgentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "agent_location": "us-south", "location": "us-south", "profile_id": "ProfileID", "agent_crn": "AgentCrn", "id": "ID", "registered_at": "2019-01-01T12:00:00.000Z", "registered_by": "RegisteredBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "user_state": {"state": "enable", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "connection_state": {"state": "Connected", "checked_at": "2019-01-01T12:00:00.000Z"}, "system_state": {"state": "error", "message": "Message"}}`)
				}))
			})
			It(`Invoke RegisterAgent successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the RegisterAgentOptions model
				registerAgentOptionsModel := new(schematicsv1.RegisterAgentOptions)
				registerAgentOptionsModel.Name = core.StringPtr("MyDevAgent")
				registerAgentOptionsModel.AgentLocation = core.StringPtr("us-south")
				registerAgentOptionsModel.Location = core.StringPtr("us-south")
				registerAgentOptionsModel.ProfileID = core.StringPtr("testString")
				registerAgentOptionsModel.Description = core.StringPtr("Register agent")
				registerAgentOptionsModel.ResourceGroup = core.StringPtr("testString")
				registerAgentOptionsModel.Tags = []string{"testString"}
				registerAgentOptionsModel.UserState = agentUserStateModel
				registerAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.RegisterAgentWithContext(ctx, registerAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.RegisterAgent(registerAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.RegisterAgentWithContext(ctx, registerAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(registerAgentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "agent_location": "us-south", "location": "us-south", "profile_id": "ProfileID", "agent_crn": "AgentCrn", "id": "ID", "registered_at": "2019-01-01T12:00:00.000Z", "registered_by": "RegisteredBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "user_state": {"state": "enable", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "connection_state": {"state": "Connected", "checked_at": "2019-01-01T12:00:00.000Z"}, "system_state": {"state": "error", "message": "Message"}}`)
				}))
			})
			It(`Invoke RegisterAgent successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.RegisterAgent(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the RegisterAgentOptions model
				registerAgentOptionsModel := new(schematicsv1.RegisterAgentOptions)
				registerAgentOptionsModel.Name = core.StringPtr("MyDevAgent")
				registerAgentOptionsModel.AgentLocation = core.StringPtr("us-south")
				registerAgentOptionsModel.Location = core.StringPtr("us-south")
				registerAgentOptionsModel.ProfileID = core.StringPtr("testString")
				registerAgentOptionsModel.Description = core.StringPtr("Register agent")
				registerAgentOptionsModel.ResourceGroup = core.StringPtr("testString")
				registerAgentOptionsModel.Tags = []string{"testString"}
				registerAgentOptionsModel.UserState = agentUserStateModel
				registerAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.RegisterAgent(registerAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke RegisterAgent with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the RegisterAgentOptions model
				registerAgentOptionsModel := new(schematicsv1.RegisterAgentOptions)
				registerAgentOptionsModel.Name = core.StringPtr("MyDevAgent")
				registerAgentOptionsModel.AgentLocation = core.StringPtr("us-south")
				registerAgentOptionsModel.Location = core.StringPtr("us-south")
				registerAgentOptionsModel.ProfileID = core.StringPtr("testString")
				registerAgentOptionsModel.Description = core.StringPtr("Register agent")
				registerAgentOptionsModel.ResourceGroup = core.StringPtr("testString")
				registerAgentOptionsModel.Tags = []string{"testString"}
				registerAgentOptionsModel.UserState = agentUserStateModel
				registerAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.RegisterAgent(registerAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the RegisterAgentOptions model with no property values
				registerAgentOptionsModelNew := new(schematicsv1.RegisterAgentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.RegisterAgent(registerAgentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke RegisterAgent successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the RegisterAgentOptions model
				registerAgentOptionsModel := new(schematicsv1.RegisterAgentOptions)
				registerAgentOptionsModel.Name = core.StringPtr("MyDevAgent")
				registerAgentOptionsModel.AgentLocation = core.StringPtr("us-south")
				registerAgentOptionsModel.Location = core.StringPtr("us-south")
				registerAgentOptionsModel.ProfileID = core.StringPtr("testString")
				registerAgentOptionsModel.Description = core.StringPtr("Register agent")
				registerAgentOptionsModel.ResourceGroup = core.StringPtr("testString")
				registerAgentOptionsModel.Tags = []string{"testString"}
				registerAgentOptionsModel.UserState = agentUserStateModel
				registerAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.RegisterAgent(registerAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAgent(getAgentOptions *GetAgentOptions) - Operation response error`, func() {
		getAgentPath := "/v2/settings/agents/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAgentPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAgent with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetAgentOptions model
				getAgentOptionsModel := new(schematicsv1.GetAgentOptions)
				getAgentOptionsModel.AgentID = core.StringPtr("testString")
				getAgentOptionsModel.Profile = core.StringPtr("summary")
				getAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetAgent(getAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetAgent(getAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAgent(getAgentOptions *GetAgentOptions)`, func() {
		getAgentPath := "/v2/settings/agents/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAgentPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "agent_location": "us-south", "location": "us-south", "profile_id": "ProfileID", "agent_crn": "AgentCrn", "id": "ID", "registered_at": "2019-01-01T12:00:00.000Z", "registered_by": "RegisteredBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "user_state": {"state": "enable", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "connection_state": {"state": "Connected", "checked_at": "2019-01-01T12:00:00.000Z"}, "system_state": {"state": "error", "message": "Message"}}`)
				}))
			})
			It(`Invoke GetAgent successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetAgentOptions model
				getAgentOptionsModel := new(schematicsv1.GetAgentOptions)
				getAgentOptionsModel.AgentID = core.StringPtr("testString")
				getAgentOptionsModel.Profile = core.StringPtr("summary")
				getAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetAgentWithContext(ctx, getAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetAgent(getAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetAgentWithContext(ctx, getAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAgentPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "agent_location": "us-south", "location": "us-south", "profile_id": "ProfileID", "agent_crn": "AgentCrn", "id": "ID", "registered_at": "2019-01-01T12:00:00.000Z", "registered_by": "RegisteredBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "user_state": {"state": "enable", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "connection_state": {"state": "Connected", "checked_at": "2019-01-01T12:00:00.000Z"}, "system_state": {"state": "error", "message": "Message"}}`)
				}))
			})
			It(`Invoke GetAgent successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetAgent(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAgentOptions model
				getAgentOptionsModel := new(schematicsv1.GetAgentOptions)
				getAgentOptionsModel.AgentID = core.StringPtr("testString")
				getAgentOptionsModel.Profile = core.StringPtr("summary")
				getAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetAgent(getAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAgent with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetAgentOptions model
				getAgentOptionsModel := new(schematicsv1.GetAgentOptions)
				getAgentOptionsModel.AgentID = core.StringPtr("testString")
				getAgentOptionsModel.Profile = core.StringPtr("summary")
				getAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetAgent(getAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetAgentOptions model with no property values
				getAgentOptionsModelNew := new(schematicsv1.GetAgentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetAgent(getAgentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetAgent successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetAgentOptions model
				getAgentOptionsModel := new(schematicsv1.GetAgentOptions)
				getAgentOptionsModel.AgentID = core.StringPtr("testString")
				getAgentOptionsModel.Profile = core.StringPtr("summary")
				getAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetAgent(getAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteAgent(deleteAgentOptions *DeleteAgentOptions)`, func() {
		deleteAgentPath := "/v2/settings/agents/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteAgentPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteAgent successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematicsService.DeleteAgent(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteAgentOptions model
				deleteAgentOptionsModel := new(schematicsv1.DeleteAgentOptions)
				deleteAgentOptionsModel.AgentID = core.StringPtr("testString")
				deleteAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematicsService.DeleteAgent(deleteAgentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteAgent with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteAgentOptions model
				deleteAgentOptionsModel := new(schematicsv1.DeleteAgentOptions)
				deleteAgentOptionsModel.AgentID = core.StringPtr("testString")
				deleteAgentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematicsService.DeleteAgent(deleteAgentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteAgentOptions model with no property values
				deleteAgentOptionsModelNew := new(schematicsv1.DeleteAgentOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematicsService.DeleteAgent(deleteAgentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateAgentRegistration(updateAgentRegistrationOptions *UpdateAgentRegistrationOptions) - Operation response error`, func() {
		updateAgentRegistrationPath := "/v2/settings/agents/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAgentRegistrationPath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateAgentRegistration with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the UpdateAgentRegistrationOptions model
				updateAgentRegistrationOptionsModel := new(schematicsv1.UpdateAgentRegistrationOptions)
				updateAgentRegistrationOptionsModel.AgentID = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Name = core.StringPtr("MyDevAgent")
				updateAgentRegistrationOptionsModel.AgentLocation = core.StringPtr("us-south")
				updateAgentRegistrationOptionsModel.Location = core.StringPtr("us-south")
				updateAgentRegistrationOptionsModel.ProfileID = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Description = core.StringPtr("Register agent")
				updateAgentRegistrationOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Tags = []string{"testString"}
				updateAgentRegistrationOptionsModel.UserState = agentUserStateModel
				updateAgentRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.UpdateAgentRegistration(updateAgentRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.UpdateAgentRegistration(updateAgentRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateAgentRegistration(updateAgentRegistrationOptions *UpdateAgentRegistrationOptions)`, func() {
		updateAgentRegistrationPath := "/v2/settings/agents/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAgentRegistrationPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "agent_location": "us-south", "location": "us-south", "profile_id": "ProfileID", "agent_crn": "AgentCrn", "id": "ID", "registered_at": "2019-01-01T12:00:00.000Z", "registered_by": "RegisteredBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "user_state": {"state": "enable", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "connection_state": {"state": "Connected", "checked_at": "2019-01-01T12:00:00.000Z"}, "system_state": {"state": "error", "message": "Message"}}`)
				}))
			})
			It(`Invoke UpdateAgentRegistration successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the UpdateAgentRegistrationOptions model
				updateAgentRegistrationOptionsModel := new(schematicsv1.UpdateAgentRegistrationOptions)
				updateAgentRegistrationOptionsModel.AgentID = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Name = core.StringPtr("MyDevAgent")
				updateAgentRegistrationOptionsModel.AgentLocation = core.StringPtr("us-south")
				updateAgentRegistrationOptionsModel.Location = core.StringPtr("us-south")
				updateAgentRegistrationOptionsModel.ProfileID = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Description = core.StringPtr("Register agent")
				updateAgentRegistrationOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Tags = []string{"testString"}
				updateAgentRegistrationOptionsModel.UserState = agentUserStateModel
				updateAgentRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.UpdateAgentRegistrationWithContext(ctx, updateAgentRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.UpdateAgentRegistration(updateAgentRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.UpdateAgentRegistrationWithContext(ctx, updateAgentRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAgentRegistrationPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "agent_location": "us-south", "location": "us-south", "profile_id": "ProfileID", "agent_crn": "AgentCrn", "id": "ID", "registered_at": "2019-01-01T12:00:00.000Z", "registered_by": "RegisteredBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "user_state": {"state": "enable", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "connection_state": {"state": "Connected", "checked_at": "2019-01-01T12:00:00.000Z"}, "system_state": {"state": "error", "message": "Message"}}`)
				}))
			})
			It(`Invoke UpdateAgentRegistration successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.UpdateAgentRegistration(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the UpdateAgentRegistrationOptions model
				updateAgentRegistrationOptionsModel := new(schematicsv1.UpdateAgentRegistrationOptions)
				updateAgentRegistrationOptionsModel.AgentID = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Name = core.StringPtr("MyDevAgent")
				updateAgentRegistrationOptionsModel.AgentLocation = core.StringPtr("us-south")
				updateAgentRegistrationOptionsModel.Location = core.StringPtr("us-south")
				updateAgentRegistrationOptionsModel.ProfileID = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Description = core.StringPtr("Register agent")
				updateAgentRegistrationOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Tags = []string{"testString"}
				updateAgentRegistrationOptionsModel.UserState = agentUserStateModel
				updateAgentRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.UpdateAgentRegistration(updateAgentRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateAgentRegistration with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the UpdateAgentRegistrationOptions model
				updateAgentRegistrationOptionsModel := new(schematicsv1.UpdateAgentRegistrationOptions)
				updateAgentRegistrationOptionsModel.AgentID = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Name = core.StringPtr("MyDevAgent")
				updateAgentRegistrationOptionsModel.AgentLocation = core.StringPtr("us-south")
				updateAgentRegistrationOptionsModel.Location = core.StringPtr("us-south")
				updateAgentRegistrationOptionsModel.ProfileID = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Description = core.StringPtr("Register agent")
				updateAgentRegistrationOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Tags = []string{"testString"}
				updateAgentRegistrationOptionsModel.UserState = agentUserStateModel
				updateAgentRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.UpdateAgentRegistration(updateAgentRegistrationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateAgentRegistrationOptions model with no property values
				updateAgentRegistrationOptionsModelNew := new(schematicsv1.UpdateAgentRegistrationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.UpdateAgentRegistration(updateAgentRegistrationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke UpdateAgentRegistration successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the UpdateAgentRegistrationOptions model
				updateAgentRegistrationOptionsModel := new(schematicsv1.UpdateAgentRegistrationOptions)
				updateAgentRegistrationOptionsModel.AgentID = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Name = core.StringPtr("MyDevAgent")
				updateAgentRegistrationOptionsModel.AgentLocation = core.StringPtr("us-south")
				updateAgentRegistrationOptionsModel.Location = core.StringPtr("us-south")
				updateAgentRegistrationOptionsModel.ProfileID = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Description = core.StringPtr("Register agent")
				updateAgentRegistrationOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateAgentRegistrationOptionsModel.Tags = []string{"testString"}
				updateAgentRegistrationOptionsModel.UserState = agentUserStateModel
				updateAgentRegistrationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.UpdateAgentRegistration(updateAgentRegistrationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListAgentData(listAgentDataOptions *ListAgentDataOptions) - Operation response error`, func() {
		listAgentDataPath := "/v2/agents"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listAgentDataPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					Expect(req.URL.Query()["filter"]).To(Equal([]string{"all"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListAgentData with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListAgentDataOptions model
				listAgentDataOptionsModel := new(schematicsv1.ListAgentDataOptions)
				listAgentDataOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAgentDataOptionsModel.Limit = core.Int64Ptr(int64(100))
				listAgentDataOptionsModel.Profile = core.StringPtr("summary")
				listAgentDataOptionsModel.Filter = core.StringPtr("all")
				listAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListAgentData(listAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListAgentData(listAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListAgentData(listAgentDataOptions *ListAgentDataOptions)`, func() {
		listAgentDataPath := "/v2/agents"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listAgentDataPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					Expect(req.URL.Query()["filter"]).To(Equal([]string{"all"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "agents": [{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "version": "v1.0.0", "schematics_location": "us-south", "agent_location": "us-south", "agent_metadata": [{"name": "purpose", "value": ["Value"]}], "user_state": {"state": "enable", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "agent_crn": "AgentCrn", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "creation_by": "CreationBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "system_state": {"status_code": "error", "status_message": "StatusMessage"}, "agent_kpi": {"availability_indicator": "available", "lifecycle_indicator": "consistent", "percent_usage_indicator": "PercentUsageIndicator"}}]}`)
				}))
			})
			It(`Invoke ListAgentData successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListAgentDataOptions model
				listAgentDataOptionsModel := new(schematicsv1.ListAgentDataOptions)
				listAgentDataOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAgentDataOptionsModel.Limit = core.Int64Ptr(int64(100))
				listAgentDataOptionsModel.Profile = core.StringPtr("summary")
				listAgentDataOptionsModel.Filter = core.StringPtr("all")
				listAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListAgentDataWithContext(ctx, listAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListAgentData(listAgentDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListAgentDataWithContext(ctx, listAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listAgentDataPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					Expect(req.URL.Query()["filter"]).To(Equal([]string{"all"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "agents": [{"name": "MyDevAgent", "description": "Register agent", "resource_group": "ResourceGroup", "tags": ["Tags"], "version": "v1.0.0", "schematics_location": "us-south", "agent_location": "us-south", "agent_metadata": [{"name": "purpose", "value": ["Value"]}], "user_state": {"state": "enable", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "agent_crn": "AgentCrn", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "creation_by": "CreationBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "system_state": {"status_code": "error", "status_message": "StatusMessage"}, "agent_kpi": {"availability_indicator": "available", "lifecycle_indicator": "consistent", "percent_usage_indicator": "PercentUsageIndicator"}}]}`)
				}))
			})
			It(`Invoke ListAgentData successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListAgentData(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListAgentDataOptions model
				listAgentDataOptionsModel := new(schematicsv1.ListAgentDataOptions)
				listAgentDataOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAgentDataOptionsModel.Limit = core.Int64Ptr(int64(100))
				listAgentDataOptionsModel.Profile = core.StringPtr("summary")
				listAgentDataOptionsModel.Filter = core.StringPtr("all")
				listAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListAgentData(listAgentDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListAgentData with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListAgentDataOptions model
				listAgentDataOptionsModel := new(schematicsv1.ListAgentDataOptions)
				listAgentDataOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAgentDataOptionsModel.Limit = core.Int64Ptr(int64(100))
				listAgentDataOptionsModel.Profile = core.StringPtr("summary")
				listAgentDataOptionsModel.Filter = core.StringPtr("all")
				listAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListAgentData(listAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListAgentData successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListAgentDataOptions model
				listAgentDataOptionsModel := new(schematicsv1.ListAgentDataOptions)
				listAgentDataOptionsModel.Offset = core.Int64Ptr(int64(0))
				listAgentDataOptionsModel.Limit = core.Int64Ptr(int64(100))
				listAgentDataOptionsModel.Profile = core.StringPtr("summary")
				listAgentDataOptionsModel.Filter = core.StringPtr("all")
				listAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ListAgentData(listAgentDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateAgentData(createAgentDataOptions *CreateAgentDataOptions) - Operation response error`, func() {
		createAgentDataPath := "/v2/agents"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAgentDataPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateAgentData with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the AgentInfrastructure model
				agentInfrastructureModel := new(schematicsv1.AgentInfrastructure)
				agentInfrastructureModel.InfraType = core.StringPtr("ibm_kubernetes")
				agentInfrastructureModel.ClusterID = core.StringPtr("testString")
				agentInfrastructureModel.ClusterResourceGroup = core.StringPtr("testString")
				agentInfrastructureModel.CosInstanceName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketRegion = core.StringPtr("testString")

				// Construct an instance of the AgentMetadataInfo model
				agentMetadataInfoModel := new(schematicsv1.AgentMetadataInfo)
				agentMetadataInfoModel.Name = core.StringPtr("purpose")
				agentMetadataInfoModel.Value = []string{"git", "terraform", "ansible"}

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the AgentKPIData model
				agentKpiDataModel := new(schematicsv1.AgentKPIData)
				agentKpiDataModel.AvailabilityIndicator = core.StringPtr("available")
				agentKpiDataModel.LifecycleIndicator = core.StringPtr("consistent")
				agentKpiDataModel.PercentUsageIndicator = core.StringPtr("testString")
				agentKpiDataModel.ApplicationIndicators = []interface{}{"testString"}
				agentKpiDataModel.InfraIndicators = []interface{}{"testString"}

				// Construct an instance of the CreateAgentDataOptions model
				createAgentDataOptionsModel := new(schematicsv1.CreateAgentDataOptions)
				createAgentDataOptionsModel.Name = core.StringPtr("MyDevAgent")
				createAgentDataOptionsModel.ResourceGroup = core.StringPtr("Default")
				createAgentDataOptionsModel.Version = core.StringPtr("v1.0.0")
				createAgentDataOptionsModel.SchematicsLocation = core.StringPtr("us-south")
				createAgentDataOptionsModel.AgentLocation = core.StringPtr("us-south")
				createAgentDataOptionsModel.AgentInfrastructure = agentInfrastructureModel
				createAgentDataOptionsModel.Description = core.StringPtr("Create Agent")
				createAgentDataOptionsModel.Tags = []string{"testString"}
				createAgentDataOptionsModel.AgentMetadata = []schematicsv1.AgentMetadataInfo{*agentMetadataInfoModel}
				createAgentDataOptionsModel.AgentInputs = []schematicsv1.VariableData{*variableDataModel}
				createAgentDataOptionsModel.UserState = agentUserStateModel
				createAgentDataOptionsModel.AgentKpi = agentKpiDataModel
				createAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.CreateAgentData(createAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.CreateAgentData(createAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateAgentData(createAgentDataOptions *CreateAgentDataOptions)`, func() {
		createAgentDataPath := "/v2/agents"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAgentDataPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Create Agent", "resource_group": "Default", "tags": ["Tags"], "version": "v1.0.0", "schematics_location": "us-south", "agent_location": "us-south", "agent_infrastructure": {"infra_type": "ibm_kubernetes", "cluster_id": "ClusterID", "cluster_resource_group": "ClusterResourceGroup", "cos_instance_name": "CosInstanceName", "cos_bucket_name": "CosBucketName", "cos_bucket_region": "CosBucketRegion"}, "agent_metadata": [{"name": "purpose", "value": ["Value"]}], "agent_inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "user_state": {"state": "enable", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "agent_crn": "AgentCrn", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "creation_by": "CreationBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "system_state": {"status_code": "error", "status_message": "StatusMessage"}, "agent_kpi": {"availability_indicator": "available", "lifecycle_indicator": "consistent", "percent_usage_indicator": "PercentUsageIndicator", "application_indicators": ["anyValue"], "infra_indicators": ["anyValue"]}, "recent_prs_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}, "recent_deploy_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "is_redeployed": false, "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}, "recent_health_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}}`)
				}))
			})
			It(`Invoke CreateAgentData successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the AgentInfrastructure model
				agentInfrastructureModel := new(schematicsv1.AgentInfrastructure)
				agentInfrastructureModel.InfraType = core.StringPtr("ibm_kubernetes")
				agentInfrastructureModel.ClusterID = core.StringPtr("testString")
				agentInfrastructureModel.ClusterResourceGroup = core.StringPtr("testString")
				agentInfrastructureModel.CosInstanceName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketRegion = core.StringPtr("testString")

				// Construct an instance of the AgentMetadataInfo model
				agentMetadataInfoModel := new(schematicsv1.AgentMetadataInfo)
				agentMetadataInfoModel.Name = core.StringPtr("purpose")
				agentMetadataInfoModel.Value = []string{"git", "terraform", "ansible"}

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the AgentKPIData model
				agentKpiDataModel := new(schematicsv1.AgentKPIData)
				agentKpiDataModel.AvailabilityIndicator = core.StringPtr("available")
				agentKpiDataModel.LifecycleIndicator = core.StringPtr("consistent")
				agentKpiDataModel.PercentUsageIndicator = core.StringPtr("testString")
				agentKpiDataModel.ApplicationIndicators = []interface{}{"testString"}
				agentKpiDataModel.InfraIndicators = []interface{}{"testString"}

				// Construct an instance of the CreateAgentDataOptions model
				createAgentDataOptionsModel := new(schematicsv1.CreateAgentDataOptions)
				createAgentDataOptionsModel.Name = core.StringPtr("MyDevAgent")
				createAgentDataOptionsModel.ResourceGroup = core.StringPtr("Default")
				createAgentDataOptionsModel.Version = core.StringPtr("v1.0.0")
				createAgentDataOptionsModel.SchematicsLocation = core.StringPtr("us-south")
				createAgentDataOptionsModel.AgentLocation = core.StringPtr("us-south")
				createAgentDataOptionsModel.AgentInfrastructure = agentInfrastructureModel
				createAgentDataOptionsModel.Description = core.StringPtr("Create Agent")
				createAgentDataOptionsModel.Tags = []string{"testString"}
				createAgentDataOptionsModel.AgentMetadata = []schematicsv1.AgentMetadataInfo{*agentMetadataInfoModel}
				createAgentDataOptionsModel.AgentInputs = []schematicsv1.VariableData{*variableDataModel}
				createAgentDataOptionsModel.UserState = agentUserStateModel
				createAgentDataOptionsModel.AgentKpi = agentKpiDataModel
				createAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.CreateAgentDataWithContext(ctx, createAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.CreateAgentData(createAgentDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.CreateAgentDataWithContext(ctx, createAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createAgentDataPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Create Agent", "resource_group": "Default", "tags": ["Tags"], "version": "v1.0.0", "schematics_location": "us-south", "agent_location": "us-south", "agent_infrastructure": {"infra_type": "ibm_kubernetes", "cluster_id": "ClusterID", "cluster_resource_group": "ClusterResourceGroup", "cos_instance_name": "CosInstanceName", "cos_bucket_name": "CosBucketName", "cos_bucket_region": "CosBucketRegion"}, "agent_metadata": [{"name": "purpose", "value": ["Value"]}], "agent_inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "user_state": {"state": "enable", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "agent_crn": "AgentCrn", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "creation_by": "CreationBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "system_state": {"status_code": "error", "status_message": "StatusMessage"}, "agent_kpi": {"availability_indicator": "available", "lifecycle_indicator": "consistent", "percent_usage_indicator": "PercentUsageIndicator", "application_indicators": ["anyValue"], "infra_indicators": ["anyValue"]}, "recent_prs_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}, "recent_deploy_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "is_redeployed": false, "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}, "recent_health_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}}`)
				}))
			})
			It(`Invoke CreateAgentData successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.CreateAgentData(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AgentInfrastructure model
				agentInfrastructureModel := new(schematicsv1.AgentInfrastructure)
				agentInfrastructureModel.InfraType = core.StringPtr("ibm_kubernetes")
				agentInfrastructureModel.ClusterID = core.StringPtr("testString")
				agentInfrastructureModel.ClusterResourceGroup = core.StringPtr("testString")
				agentInfrastructureModel.CosInstanceName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketRegion = core.StringPtr("testString")

				// Construct an instance of the AgentMetadataInfo model
				agentMetadataInfoModel := new(schematicsv1.AgentMetadataInfo)
				agentMetadataInfoModel.Name = core.StringPtr("purpose")
				agentMetadataInfoModel.Value = []string{"git", "terraform", "ansible"}

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the AgentKPIData model
				agentKpiDataModel := new(schematicsv1.AgentKPIData)
				agentKpiDataModel.AvailabilityIndicator = core.StringPtr("available")
				agentKpiDataModel.LifecycleIndicator = core.StringPtr("consistent")
				agentKpiDataModel.PercentUsageIndicator = core.StringPtr("testString")
				agentKpiDataModel.ApplicationIndicators = []interface{}{"testString"}
				agentKpiDataModel.InfraIndicators = []interface{}{"testString"}

				// Construct an instance of the CreateAgentDataOptions model
				createAgentDataOptionsModel := new(schematicsv1.CreateAgentDataOptions)
				createAgentDataOptionsModel.Name = core.StringPtr("MyDevAgent")
				createAgentDataOptionsModel.ResourceGroup = core.StringPtr("Default")
				createAgentDataOptionsModel.Version = core.StringPtr("v1.0.0")
				createAgentDataOptionsModel.SchematicsLocation = core.StringPtr("us-south")
				createAgentDataOptionsModel.AgentLocation = core.StringPtr("us-south")
				createAgentDataOptionsModel.AgentInfrastructure = agentInfrastructureModel
				createAgentDataOptionsModel.Description = core.StringPtr("Create Agent")
				createAgentDataOptionsModel.Tags = []string{"testString"}
				createAgentDataOptionsModel.AgentMetadata = []schematicsv1.AgentMetadataInfo{*agentMetadataInfoModel}
				createAgentDataOptionsModel.AgentInputs = []schematicsv1.VariableData{*variableDataModel}
				createAgentDataOptionsModel.UserState = agentUserStateModel
				createAgentDataOptionsModel.AgentKpi = agentKpiDataModel
				createAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.CreateAgentData(createAgentDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateAgentData with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the AgentInfrastructure model
				agentInfrastructureModel := new(schematicsv1.AgentInfrastructure)
				agentInfrastructureModel.InfraType = core.StringPtr("ibm_kubernetes")
				agentInfrastructureModel.ClusterID = core.StringPtr("testString")
				agentInfrastructureModel.ClusterResourceGroup = core.StringPtr("testString")
				agentInfrastructureModel.CosInstanceName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketRegion = core.StringPtr("testString")

				// Construct an instance of the AgentMetadataInfo model
				agentMetadataInfoModel := new(schematicsv1.AgentMetadataInfo)
				agentMetadataInfoModel.Name = core.StringPtr("purpose")
				agentMetadataInfoModel.Value = []string{"git", "terraform", "ansible"}

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the AgentKPIData model
				agentKpiDataModel := new(schematicsv1.AgentKPIData)
				agentKpiDataModel.AvailabilityIndicator = core.StringPtr("available")
				agentKpiDataModel.LifecycleIndicator = core.StringPtr("consistent")
				agentKpiDataModel.PercentUsageIndicator = core.StringPtr("testString")
				agentKpiDataModel.ApplicationIndicators = []interface{}{"testString"}
				agentKpiDataModel.InfraIndicators = []interface{}{"testString"}

				// Construct an instance of the CreateAgentDataOptions model
				createAgentDataOptionsModel := new(schematicsv1.CreateAgentDataOptions)
				createAgentDataOptionsModel.Name = core.StringPtr("MyDevAgent")
				createAgentDataOptionsModel.ResourceGroup = core.StringPtr("Default")
				createAgentDataOptionsModel.Version = core.StringPtr("v1.0.0")
				createAgentDataOptionsModel.SchematicsLocation = core.StringPtr("us-south")
				createAgentDataOptionsModel.AgentLocation = core.StringPtr("us-south")
				createAgentDataOptionsModel.AgentInfrastructure = agentInfrastructureModel
				createAgentDataOptionsModel.Description = core.StringPtr("Create Agent")
				createAgentDataOptionsModel.Tags = []string{"testString"}
				createAgentDataOptionsModel.AgentMetadata = []schematicsv1.AgentMetadataInfo{*agentMetadataInfoModel}
				createAgentDataOptionsModel.AgentInputs = []schematicsv1.VariableData{*variableDataModel}
				createAgentDataOptionsModel.UserState = agentUserStateModel
				createAgentDataOptionsModel.AgentKpi = agentKpiDataModel
				createAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.CreateAgentData(createAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateAgentDataOptions model with no property values
				createAgentDataOptionsModelNew := new(schematicsv1.CreateAgentDataOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.CreateAgentData(createAgentDataOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateAgentData successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the AgentInfrastructure model
				agentInfrastructureModel := new(schematicsv1.AgentInfrastructure)
				agentInfrastructureModel.InfraType = core.StringPtr("ibm_kubernetes")
				agentInfrastructureModel.ClusterID = core.StringPtr("testString")
				agentInfrastructureModel.ClusterResourceGroup = core.StringPtr("testString")
				agentInfrastructureModel.CosInstanceName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketRegion = core.StringPtr("testString")

				// Construct an instance of the AgentMetadataInfo model
				agentMetadataInfoModel := new(schematicsv1.AgentMetadataInfo)
				agentMetadataInfoModel.Name = core.StringPtr("purpose")
				agentMetadataInfoModel.Value = []string{"git", "terraform", "ansible"}

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the AgentKPIData model
				agentKpiDataModel := new(schematicsv1.AgentKPIData)
				agentKpiDataModel.AvailabilityIndicator = core.StringPtr("available")
				agentKpiDataModel.LifecycleIndicator = core.StringPtr("consistent")
				agentKpiDataModel.PercentUsageIndicator = core.StringPtr("testString")
				agentKpiDataModel.ApplicationIndicators = []interface{}{"testString"}
				agentKpiDataModel.InfraIndicators = []interface{}{"testString"}

				// Construct an instance of the CreateAgentDataOptions model
				createAgentDataOptionsModel := new(schematicsv1.CreateAgentDataOptions)
				createAgentDataOptionsModel.Name = core.StringPtr("MyDevAgent")
				createAgentDataOptionsModel.ResourceGroup = core.StringPtr("Default")
				createAgentDataOptionsModel.Version = core.StringPtr("v1.0.0")
				createAgentDataOptionsModel.SchematicsLocation = core.StringPtr("us-south")
				createAgentDataOptionsModel.AgentLocation = core.StringPtr("us-south")
				createAgentDataOptionsModel.AgentInfrastructure = agentInfrastructureModel
				createAgentDataOptionsModel.Description = core.StringPtr("Create Agent")
				createAgentDataOptionsModel.Tags = []string{"testString"}
				createAgentDataOptionsModel.AgentMetadata = []schematicsv1.AgentMetadataInfo{*agentMetadataInfoModel}
				createAgentDataOptionsModel.AgentInputs = []schematicsv1.VariableData{*variableDataModel}
				createAgentDataOptionsModel.UserState = agentUserStateModel
				createAgentDataOptionsModel.AgentKpi = agentKpiDataModel
				createAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.CreateAgentData(createAgentDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAgentData(getAgentDataOptions *GetAgentDataOptions) - Operation response error`, func() {
		getAgentDataPath := "/v2/agents/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAgentDataPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetAgentData with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetAgentDataOptions model
				getAgentDataOptionsModel := new(schematicsv1.GetAgentDataOptions)
				getAgentDataOptionsModel.AgentID = core.StringPtr("testString")
				getAgentDataOptionsModel.Profile = core.StringPtr("summary")
				getAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetAgentData(getAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetAgentData(getAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetAgentData(getAgentDataOptions *GetAgentDataOptions)`, func() {
		getAgentDataPath := "/v2/agents/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAgentDataPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Create Agent", "resource_group": "Default", "tags": ["Tags"], "version": "v1.0.0", "schematics_location": "us-south", "agent_location": "us-south", "agent_infrastructure": {"infra_type": "ibm_kubernetes", "cluster_id": "ClusterID", "cluster_resource_group": "ClusterResourceGroup", "cos_instance_name": "CosInstanceName", "cos_bucket_name": "CosBucketName", "cos_bucket_region": "CosBucketRegion"}, "agent_metadata": [{"name": "purpose", "value": ["Value"]}], "agent_inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "user_state": {"state": "enable", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "agent_crn": "AgentCrn", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "creation_by": "CreationBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "system_state": {"status_code": "error", "status_message": "StatusMessage"}, "agent_kpi": {"availability_indicator": "available", "lifecycle_indicator": "consistent", "percent_usage_indicator": "PercentUsageIndicator", "application_indicators": ["anyValue"], "infra_indicators": ["anyValue"]}, "recent_prs_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}, "recent_deploy_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "is_redeployed": false, "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}, "recent_health_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}}`)
				}))
			})
			It(`Invoke GetAgentData successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetAgentDataOptions model
				getAgentDataOptionsModel := new(schematicsv1.GetAgentDataOptions)
				getAgentDataOptionsModel.AgentID = core.StringPtr("testString")
				getAgentDataOptionsModel.Profile = core.StringPtr("summary")
				getAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetAgentDataWithContext(ctx, getAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetAgentData(getAgentDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetAgentDataWithContext(ctx, getAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getAgentDataPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Create Agent", "resource_group": "Default", "tags": ["Tags"], "version": "v1.0.0", "schematics_location": "us-south", "agent_location": "us-south", "agent_infrastructure": {"infra_type": "ibm_kubernetes", "cluster_id": "ClusterID", "cluster_resource_group": "ClusterResourceGroup", "cos_instance_name": "CosInstanceName", "cos_bucket_name": "CosBucketName", "cos_bucket_region": "CosBucketRegion"}, "agent_metadata": [{"name": "purpose", "value": ["Value"]}], "agent_inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "user_state": {"state": "enable", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "agent_crn": "AgentCrn", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "creation_by": "CreationBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "system_state": {"status_code": "error", "status_message": "StatusMessage"}, "agent_kpi": {"availability_indicator": "available", "lifecycle_indicator": "consistent", "percent_usage_indicator": "PercentUsageIndicator", "application_indicators": ["anyValue"], "infra_indicators": ["anyValue"]}, "recent_prs_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}, "recent_deploy_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "is_redeployed": false, "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}, "recent_health_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}}`)
				}))
			})
			It(`Invoke GetAgentData successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetAgentData(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetAgentDataOptions model
				getAgentDataOptionsModel := new(schematicsv1.GetAgentDataOptions)
				getAgentDataOptionsModel.AgentID = core.StringPtr("testString")
				getAgentDataOptionsModel.Profile = core.StringPtr("summary")
				getAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetAgentData(getAgentDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetAgentData with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetAgentDataOptions model
				getAgentDataOptionsModel := new(schematicsv1.GetAgentDataOptions)
				getAgentDataOptionsModel.AgentID = core.StringPtr("testString")
				getAgentDataOptionsModel.Profile = core.StringPtr("summary")
				getAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetAgentData(getAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetAgentDataOptions model with no property values
				getAgentDataOptionsModelNew := new(schematicsv1.GetAgentDataOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetAgentData(getAgentDataOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetAgentData successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetAgentDataOptions model
				getAgentDataOptionsModel := new(schematicsv1.GetAgentDataOptions)
				getAgentDataOptionsModel.AgentID = core.StringPtr("testString")
				getAgentDataOptionsModel.Profile = core.StringPtr("summary")
				getAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetAgentData(getAgentDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateAgentData(updateAgentDataOptions *UpdateAgentDataOptions) - Operation response error`, func() {
		updateAgentDataPath := "/v2/agents/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAgentDataPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateAgentData with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the AgentInfrastructure model
				agentInfrastructureModel := new(schematicsv1.AgentInfrastructure)
				agentInfrastructureModel.InfraType = core.StringPtr("ibm_kubernetes")
				agentInfrastructureModel.ClusterID = core.StringPtr("testString")
				agentInfrastructureModel.ClusterResourceGroup = core.StringPtr("testString")
				agentInfrastructureModel.CosInstanceName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketRegion = core.StringPtr("testString")

				// Construct an instance of the AgentMetadataInfo model
				agentMetadataInfoModel := new(schematicsv1.AgentMetadataInfo)
				agentMetadataInfoModel.Name = core.StringPtr("purpose")
				agentMetadataInfoModel.Value = []string{"git", "terraform", "ansible"}

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the AgentKPIData model
				agentKpiDataModel := new(schematicsv1.AgentKPIData)
				agentKpiDataModel.AvailabilityIndicator = core.StringPtr("available")
				agentKpiDataModel.LifecycleIndicator = core.StringPtr("consistent")
				agentKpiDataModel.PercentUsageIndicator = core.StringPtr("testString")
				agentKpiDataModel.ApplicationIndicators = []interface{}{"testString"}
				agentKpiDataModel.InfraIndicators = []interface{}{"testString"}

				// Construct an instance of the UpdateAgentDataOptions model
				updateAgentDataOptionsModel := new(schematicsv1.UpdateAgentDataOptions)
				updateAgentDataOptionsModel.AgentID = core.StringPtr("testString")
				updateAgentDataOptionsModel.Name = core.StringPtr("MyDevAgent")
				updateAgentDataOptionsModel.ResourceGroup = core.StringPtr("Default")
				updateAgentDataOptionsModel.Version = core.StringPtr("v1.0.0")
				updateAgentDataOptionsModel.SchematicsLocation = core.StringPtr("us-south")
				updateAgentDataOptionsModel.AgentLocation = core.StringPtr("us-south")
				updateAgentDataOptionsModel.AgentInfrastructure = agentInfrastructureModel
				updateAgentDataOptionsModel.Description = core.StringPtr("Create Agent")
				updateAgentDataOptionsModel.Tags = []string{"testString"}
				updateAgentDataOptionsModel.AgentMetadata = []schematicsv1.AgentMetadataInfo{*agentMetadataInfoModel}
				updateAgentDataOptionsModel.AgentInputs = []schematicsv1.VariableData{*variableDataModel}
				updateAgentDataOptionsModel.UserState = agentUserStateModel
				updateAgentDataOptionsModel.AgentKpi = agentKpiDataModel
				updateAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.UpdateAgentData(updateAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.UpdateAgentData(updateAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateAgentData(updateAgentDataOptions *UpdateAgentDataOptions)`, func() {
		updateAgentDataPath := "/v2/agents/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAgentDataPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Create Agent", "resource_group": "Default", "tags": ["Tags"], "version": "v1.0.0", "schematics_location": "us-south", "agent_location": "us-south", "agent_infrastructure": {"infra_type": "ibm_kubernetes", "cluster_id": "ClusterID", "cluster_resource_group": "ClusterResourceGroup", "cos_instance_name": "CosInstanceName", "cos_bucket_name": "CosBucketName", "cos_bucket_region": "CosBucketRegion"}, "agent_metadata": [{"name": "purpose", "value": ["Value"]}], "agent_inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "user_state": {"state": "enable", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "agent_crn": "AgentCrn", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "creation_by": "CreationBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "system_state": {"status_code": "error", "status_message": "StatusMessage"}, "agent_kpi": {"availability_indicator": "available", "lifecycle_indicator": "consistent", "percent_usage_indicator": "PercentUsageIndicator", "application_indicators": ["anyValue"], "infra_indicators": ["anyValue"]}, "recent_prs_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}, "recent_deploy_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "is_redeployed": false, "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}, "recent_health_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}}`)
				}))
			})
			It(`Invoke UpdateAgentData successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the AgentInfrastructure model
				agentInfrastructureModel := new(schematicsv1.AgentInfrastructure)
				agentInfrastructureModel.InfraType = core.StringPtr("ibm_kubernetes")
				agentInfrastructureModel.ClusterID = core.StringPtr("testString")
				agentInfrastructureModel.ClusterResourceGroup = core.StringPtr("testString")
				agentInfrastructureModel.CosInstanceName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketRegion = core.StringPtr("testString")

				// Construct an instance of the AgentMetadataInfo model
				agentMetadataInfoModel := new(schematicsv1.AgentMetadataInfo)
				agentMetadataInfoModel.Name = core.StringPtr("purpose")
				agentMetadataInfoModel.Value = []string{"git", "terraform", "ansible"}

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the AgentKPIData model
				agentKpiDataModel := new(schematicsv1.AgentKPIData)
				agentKpiDataModel.AvailabilityIndicator = core.StringPtr("available")
				agentKpiDataModel.LifecycleIndicator = core.StringPtr("consistent")
				agentKpiDataModel.PercentUsageIndicator = core.StringPtr("testString")
				agentKpiDataModel.ApplicationIndicators = []interface{}{"testString"}
				agentKpiDataModel.InfraIndicators = []interface{}{"testString"}

				// Construct an instance of the UpdateAgentDataOptions model
				updateAgentDataOptionsModel := new(schematicsv1.UpdateAgentDataOptions)
				updateAgentDataOptionsModel.AgentID = core.StringPtr("testString")
				updateAgentDataOptionsModel.Name = core.StringPtr("MyDevAgent")
				updateAgentDataOptionsModel.ResourceGroup = core.StringPtr("Default")
				updateAgentDataOptionsModel.Version = core.StringPtr("v1.0.0")
				updateAgentDataOptionsModel.SchematicsLocation = core.StringPtr("us-south")
				updateAgentDataOptionsModel.AgentLocation = core.StringPtr("us-south")
				updateAgentDataOptionsModel.AgentInfrastructure = agentInfrastructureModel
				updateAgentDataOptionsModel.Description = core.StringPtr("Create Agent")
				updateAgentDataOptionsModel.Tags = []string{"testString"}
				updateAgentDataOptionsModel.AgentMetadata = []schematicsv1.AgentMetadataInfo{*agentMetadataInfoModel}
				updateAgentDataOptionsModel.AgentInputs = []schematicsv1.VariableData{*variableDataModel}
				updateAgentDataOptionsModel.UserState = agentUserStateModel
				updateAgentDataOptionsModel.AgentKpi = agentKpiDataModel
				updateAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.UpdateAgentDataWithContext(ctx, updateAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.UpdateAgentData(updateAgentDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.UpdateAgentDataWithContext(ctx, updateAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateAgentDataPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "MyDevAgent", "description": "Create Agent", "resource_group": "Default", "tags": ["Tags"], "version": "v1.0.0", "schematics_location": "us-south", "agent_location": "us-south", "agent_infrastructure": {"infra_type": "ibm_kubernetes", "cluster_id": "ClusterID", "cluster_resource_group": "ClusterResourceGroup", "cos_instance_name": "CosInstanceName", "cos_bucket_name": "CosBucketName", "cos_bucket_region": "CosBucketRegion"}, "agent_metadata": [{"name": "purpose", "value": ["Value"]}], "agent_inputs": [{"name": "Name", "value": "Value", "use_default": true, "metadata": {"type": "boolean", "aliases": ["Aliases"], "description": "Description", "cloud_data_type": "CloudDataType", "default_value": "DefaultValue", "link_status": "normal", "secure": true, "immutable": false, "hidden": true, "required": true, "options": ["Options"], "min_value": 8, "max_value": 8, "min_length": 9, "max_length": 9, "matches": "Matches", "position": 8, "group_by": "GroupBy", "source": "Source"}, "link": "Link"}], "user_state": {"state": "enable", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "agent_crn": "AgentCrn", "id": "ID", "created_at": "2019-01-01T12:00:00.000Z", "creation_by": "CreationBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "system_state": {"status_code": "error", "status_message": "StatusMessage"}, "agent_kpi": {"availability_indicator": "available", "lifecycle_indicator": "consistent", "percent_usage_indicator": "PercentUsageIndicator", "application_indicators": ["anyValue"], "infra_indicators": ["anyValue"]}, "recent_prs_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}, "recent_deploy_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "is_redeployed": false, "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}, "recent_health_job": {"agent_id": "AgentID", "job_id": "JobID", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "agent_version": "v1.0.0", "status_code": "job_pending", "status_message": "StatusMessage", "log_url": "LogURL"}}`)
				}))
			})
			It(`Invoke UpdateAgentData successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.UpdateAgentData(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AgentInfrastructure model
				agentInfrastructureModel := new(schematicsv1.AgentInfrastructure)
				agentInfrastructureModel.InfraType = core.StringPtr("ibm_kubernetes")
				agentInfrastructureModel.ClusterID = core.StringPtr("testString")
				agentInfrastructureModel.ClusterResourceGroup = core.StringPtr("testString")
				agentInfrastructureModel.CosInstanceName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketRegion = core.StringPtr("testString")

				// Construct an instance of the AgentMetadataInfo model
				agentMetadataInfoModel := new(schematicsv1.AgentMetadataInfo)
				agentMetadataInfoModel.Name = core.StringPtr("purpose")
				agentMetadataInfoModel.Value = []string{"git", "terraform", "ansible"}

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the AgentKPIData model
				agentKpiDataModel := new(schematicsv1.AgentKPIData)
				agentKpiDataModel.AvailabilityIndicator = core.StringPtr("available")
				agentKpiDataModel.LifecycleIndicator = core.StringPtr("consistent")
				agentKpiDataModel.PercentUsageIndicator = core.StringPtr("testString")
				agentKpiDataModel.ApplicationIndicators = []interface{}{"testString"}
				agentKpiDataModel.InfraIndicators = []interface{}{"testString"}

				// Construct an instance of the UpdateAgentDataOptions model
				updateAgentDataOptionsModel := new(schematicsv1.UpdateAgentDataOptions)
				updateAgentDataOptionsModel.AgentID = core.StringPtr("testString")
				updateAgentDataOptionsModel.Name = core.StringPtr("MyDevAgent")
				updateAgentDataOptionsModel.ResourceGroup = core.StringPtr("Default")
				updateAgentDataOptionsModel.Version = core.StringPtr("v1.0.0")
				updateAgentDataOptionsModel.SchematicsLocation = core.StringPtr("us-south")
				updateAgentDataOptionsModel.AgentLocation = core.StringPtr("us-south")
				updateAgentDataOptionsModel.AgentInfrastructure = agentInfrastructureModel
				updateAgentDataOptionsModel.Description = core.StringPtr("Create Agent")
				updateAgentDataOptionsModel.Tags = []string{"testString"}
				updateAgentDataOptionsModel.AgentMetadata = []schematicsv1.AgentMetadataInfo{*agentMetadataInfoModel}
				updateAgentDataOptionsModel.AgentInputs = []schematicsv1.VariableData{*variableDataModel}
				updateAgentDataOptionsModel.UserState = agentUserStateModel
				updateAgentDataOptionsModel.AgentKpi = agentKpiDataModel
				updateAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.UpdateAgentData(updateAgentDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateAgentData with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the AgentInfrastructure model
				agentInfrastructureModel := new(schematicsv1.AgentInfrastructure)
				agentInfrastructureModel.InfraType = core.StringPtr("ibm_kubernetes")
				agentInfrastructureModel.ClusterID = core.StringPtr("testString")
				agentInfrastructureModel.ClusterResourceGroup = core.StringPtr("testString")
				agentInfrastructureModel.CosInstanceName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketRegion = core.StringPtr("testString")

				// Construct an instance of the AgentMetadataInfo model
				agentMetadataInfoModel := new(schematicsv1.AgentMetadataInfo)
				agentMetadataInfoModel.Name = core.StringPtr("purpose")
				agentMetadataInfoModel.Value = []string{"git", "terraform", "ansible"}

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the AgentKPIData model
				agentKpiDataModel := new(schematicsv1.AgentKPIData)
				agentKpiDataModel.AvailabilityIndicator = core.StringPtr("available")
				agentKpiDataModel.LifecycleIndicator = core.StringPtr("consistent")
				agentKpiDataModel.PercentUsageIndicator = core.StringPtr("testString")
				agentKpiDataModel.ApplicationIndicators = []interface{}{"testString"}
				agentKpiDataModel.InfraIndicators = []interface{}{"testString"}

				// Construct an instance of the UpdateAgentDataOptions model
				updateAgentDataOptionsModel := new(schematicsv1.UpdateAgentDataOptions)
				updateAgentDataOptionsModel.AgentID = core.StringPtr("testString")
				updateAgentDataOptionsModel.Name = core.StringPtr("MyDevAgent")
				updateAgentDataOptionsModel.ResourceGroup = core.StringPtr("Default")
				updateAgentDataOptionsModel.Version = core.StringPtr("v1.0.0")
				updateAgentDataOptionsModel.SchematicsLocation = core.StringPtr("us-south")
				updateAgentDataOptionsModel.AgentLocation = core.StringPtr("us-south")
				updateAgentDataOptionsModel.AgentInfrastructure = agentInfrastructureModel
				updateAgentDataOptionsModel.Description = core.StringPtr("Create Agent")
				updateAgentDataOptionsModel.Tags = []string{"testString"}
				updateAgentDataOptionsModel.AgentMetadata = []schematicsv1.AgentMetadataInfo{*agentMetadataInfoModel}
				updateAgentDataOptionsModel.AgentInputs = []schematicsv1.VariableData{*variableDataModel}
				updateAgentDataOptionsModel.UserState = agentUserStateModel
				updateAgentDataOptionsModel.AgentKpi = agentKpiDataModel
				updateAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.UpdateAgentData(updateAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateAgentDataOptions model with no property values
				updateAgentDataOptionsModelNew := new(schematicsv1.UpdateAgentDataOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.UpdateAgentData(updateAgentDataOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke UpdateAgentData successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the AgentInfrastructure model
				agentInfrastructureModel := new(schematicsv1.AgentInfrastructure)
				agentInfrastructureModel.InfraType = core.StringPtr("ibm_kubernetes")
				agentInfrastructureModel.ClusterID = core.StringPtr("testString")
				agentInfrastructureModel.ClusterResourceGroup = core.StringPtr("testString")
				agentInfrastructureModel.CosInstanceName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketRegion = core.StringPtr("testString")

				// Construct an instance of the AgentMetadataInfo model
				agentMetadataInfoModel := new(schematicsv1.AgentMetadataInfo)
				agentMetadataInfoModel.Name = core.StringPtr("purpose")
				agentMetadataInfoModel.Value = []string{"git", "terraform", "ansible"}

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				agentUserStateModel.State = core.StringPtr("enable")

				// Construct an instance of the AgentKPIData model
				agentKpiDataModel := new(schematicsv1.AgentKPIData)
				agentKpiDataModel.AvailabilityIndicator = core.StringPtr("available")
				agentKpiDataModel.LifecycleIndicator = core.StringPtr("consistent")
				agentKpiDataModel.PercentUsageIndicator = core.StringPtr("testString")
				agentKpiDataModel.ApplicationIndicators = []interface{}{"testString"}
				agentKpiDataModel.InfraIndicators = []interface{}{"testString"}

				// Construct an instance of the UpdateAgentDataOptions model
				updateAgentDataOptionsModel := new(schematicsv1.UpdateAgentDataOptions)
				updateAgentDataOptionsModel.AgentID = core.StringPtr("testString")
				updateAgentDataOptionsModel.Name = core.StringPtr("MyDevAgent")
				updateAgentDataOptionsModel.ResourceGroup = core.StringPtr("Default")
				updateAgentDataOptionsModel.Version = core.StringPtr("v1.0.0")
				updateAgentDataOptionsModel.SchematicsLocation = core.StringPtr("us-south")
				updateAgentDataOptionsModel.AgentLocation = core.StringPtr("us-south")
				updateAgentDataOptionsModel.AgentInfrastructure = agentInfrastructureModel
				updateAgentDataOptionsModel.Description = core.StringPtr("Create Agent")
				updateAgentDataOptionsModel.Tags = []string{"testString"}
				updateAgentDataOptionsModel.AgentMetadata = []schematicsv1.AgentMetadataInfo{*agentMetadataInfoModel}
				updateAgentDataOptionsModel.AgentInputs = []schematicsv1.VariableData{*variableDataModel}
				updateAgentDataOptionsModel.UserState = agentUserStateModel
				updateAgentDataOptionsModel.AgentKpi = agentKpiDataModel
				updateAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.UpdateAgentData(updateAgentDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteAgentData(deleteAgentDataOptions *DeleteAgentDataOptions)`, func() {
		deleteAgentDataPath := "/v2/agents/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteAgentDataPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteAgentData successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematicsService.DeleteAgentData(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteAgentDataOptions model
				deleteAgentDataOptionsModel := new(schematicsv1.DeleteAgentDataOptions)
				deleteAgentDataOptionsModel.AgentID = core.StringPtr("testString")
				deleteAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematicsService.DeleteAgentData(deleteAgentDataOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteAgentData with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeleteAgentDataOptions model
				deleteAgentDataOptionsModel := new(schematicsv1.DeleteAgentDataOptions)
				deleteAgentDataOptionsModel.AgentID = core.StringPtr("testString")
				deleteAgentDataOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematicsService.DeleteAgentData(deleteAgentDataOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteAgentDataOptions model with no property values
				deleteAgentDataOptionsModelNew := new(schematicsv1.DeleteAgentDataOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematicsService.DeleteAgentData(deleteAgentDataOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetPrsAgentJob(getPrsAgentJobOptions *GetPrsAgentJobOptions)`, func() {
		getPrsAgentJobPath := "/v2/agents/testString/prs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getPrsAgentJobPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GetPrsAgentJob successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetPrsAgentJobOptions model
				getPrsAgentJobOptionsModel := new(schematicsv1.GetPrsAgentJobOptions)
				getPrsAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				getPrsAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetPrsAgentJobWithContext(ctx, getPrsAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetPrsAgentJob(getPrsAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetPrsAgentJobWithContext(ctx, getPrsAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getPrsAgentJobPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GetPrsAgentJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetPrsAgentJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetPrsAgentJobOptions model
				getPrsAgentJobOptionsModel := new(schematicsv1.GetPrsAgentJobOptions)
				getPrsAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				getPrsAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetPrsAgentJob(getPrsAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetPrsAgentJob with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetPrsAgentJobOptions model
				getPrsAgentJobOptionsModel := new(schematicsv1.GetPrsAgentJobOptions)
				getPrsAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				getPrsAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetPrsAgentJob(getPrsAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetPrsAgentJobOptions model with no property values
				getPrsAgentJobOptionsModelNew := new(schematicsv1.GetPrsAgentJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetPrsAgentJob(getPrsAgentJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke GetPrsAgentJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetPrsAgentJobOptions model
				getPrsAgentJobOptionsModel := new(schematicsv1.GetPrsAgentJobOptions)
				getPrsAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				getPrsAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetPrsAgentJob(getPrsAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PrsAgentJob(prsAgentJobOptions *PrsAgentJobOptions)`, func() {
		prsAgentJobPath := "/v2/agents/testString/prs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(prsAgentJobPath))
					Expect(req.Method).To(Equal("PUT"))

					// TODO: Add check for force query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke PrsAgentJob successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the PrsAgentJobOptions model
				prsAgentJobOptionsModel := new(schematicsv1.PrsAgentJobOptions)
				prsAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				prsAgentJobOptionsModel.Force = core.BoolPtr(true)
				prsAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.PrsAgentJobWithContext(ctx, prsAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.PrsAgentJob(prsAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.PrsAgentJobWithContext(ctx, prsAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(prsAgentJobPath))
					Expect(req.Method).To(Equal("PUT"))

					// TODO: Add check for force query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke PrsAgentJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.PrsAgentJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PrsAgentJobOptions model
				prsAgentJobOptionsModel := new(schematicsv1.PrsAgentJobOptions)
				prsAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				prsAgentJobOptionsModel.Force = core.BoolPtr(true)
				prsAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.PrsAgentJob(prsAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke PrsAgentJob with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the PrsAgentJobOptions model
				prsAgentJobOptionsModel := new(schematicsv1.PrsAgentJobOptions)
				prsAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				prsAgentJobOptionsModel.Force = core.BoolPtr(true)
				prsAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.PrsAgentJob(prsAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PrsAgentJobOptions model with no property values
				prsAgentJobOptionsModelNew := new(schematicsv1.PrsAgentJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.PrsAgentJob(prsAgentJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PrsAgentJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the PrsAgentJobOptions model
				prsAgentJobOptionsModel := new(schematicsv1.PrsAgentJobOptions)
				prsAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				prsAgentJobOptionsModel.Force = core.BoolPtr(true)
				prsAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.PrsAgentJob(prsAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetHealthCheckAgentJob(getHealthCheckAgentJobOptions *GetHealthCheckAgentJobOptions)`, func() {
		getHealthCheckAgentJobPath := "/v2/agents/testString/health"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getHealthCheckAgentJobPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GetHealthCheckAgentJob successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetHealthCheckAgentJobOptions model
				getHealthCheckAgentJobOptionsModel := new(schematicsv1.GetHealthCheckAgentJobOptions)
				getHealthCheckAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				getHealthCheckAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetHealthCheckAgentJobWithContext(ctx, getHealthCheckAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetHealthCheckAgentJob(getHealthCheckAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetHealthCheckAgentJobWithContext(ctx, getHealthCheckAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getHealthCheckAgentJobPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GetHealthCheckAgentJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetHealthCheckAgentJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetHealthCheckAgentJobOptions model
				getHealthCheckAgentJobOptionsModel := new(schematicsv1.GetHealthCheckAgentJobOptions)
				getHealthCheckAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				getHealthCheckAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetHealthCheckAgentJob(getHealthCheckAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetHealthCheckAgentJob with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetHealthCheckAgentJobOptions model
				getHealthCheckAgentJobOptionsModel := new(schematicsv1.GetHealthCheckAgentJobOptions)
				getHealthCheckAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				getHealthCheckAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetHealthCheckAgentJob(getHealthCheckAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetHealthCheckAgentJobOptions model with no property values
				getHealthCheckAgentJobOptionsModelNew := new(schematicsv1.GetHealthCheckAgentJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetHealthCheckAgentJob(getHealthCheckAgentJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke GetHealthCheckAgentJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetHealthCheckAgentJobOptions model
				getHealthCheckAgentJobOptionsModel := new(schematicsv1.GetHealthCheckAgentJobOptions)
				getHealthCheckAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				getHealthCheckAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetHealthCheckAgentJob(getHealthCheckAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`HealthCheckAgentJob(healthCheckAgentJobOptions *HealthCheckAgentJobOptions)`, func() {
		healthCheckAgentJobPath := "/v2/agents/testString/health"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(healthCheckAgentJobPath))
					Expect(req.Method).To(Equal("PUT"))

					// TODO: Add check for force query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke HealthCheckAgentJob successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the HealthCheckAgentJobOptions model
				healthCheckAgentJobOptionsModel := new(schematicsv1.HealthCheckAgentJobOptions)
				healthCheckAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				healthCheckAgentJobOptionsModel.Force = core.BoolPtr(true)
				healthCheckAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.HealthCheckAgentJobWithContext(ctx, healthCheckAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.HealthCheckAgentJob(healthCheckAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.HealthCheckAgentJobWithContext(ctx, healthCheckAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(healthCheckAgentJobPath))
					Expect(req.Method).To(Equal("PUT"))

					// TODO: Add check for force query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke HealthCheckAgentJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.HealthCheckAgentJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the HealthCheckAgentJobOptions model
				healthCheckAgentJobOptionsModel := new(schematicsv1.HealthCheckAgentJobOptions)
				healthCheckAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				healthCheckAgentJobOptionsModel.Force = core.BoolPtr(true)
				healthCheckAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.HealthCheckAgentJob(healthCheckAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke HealthCheckAgentJob with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the HealthCheckAgentJobOptions model
				healthCheckAgentJobOptionsModel := new(schematicsv1.HealthCheckAgentJobOptions)
				healthCheckAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				healthCheckAgentJobOptionsModel.Force = core.BoolPtr(true)
				healthCheckAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.HealthCheckAgentJob(healthCheckAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the HealthCheckAgentJobOptions model with no property values
				healthCheckAgentJobOptionsModelNew := new(schematicsv1.HealthCheckAgentJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.HealthCheckAgentJob(healthCheckAgentJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke HealthCheckAgentJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the HealthCheckAgentJobOptions model
				healthCheckAgentJobOptionsModel := new(schematicsv1.HealthCheckAgentJobOptions)
				healthCheckAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				healthCheckAgentJobOptionsModel.Force = core.BoolPtr(true)
				healthCheckAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.HealthCheckAgentJob(healthCheckAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDeployAgentJob(getDeployAgentJobOptions *GetDeployAgentJobOptions)`, func() {
		getDeployAgentJobPath := "/v2/agents/testString/deploy"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDeployAgentJobPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GetDeployAgentJob successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetDeployAgentJobOptions model
				getDeployAgentJobOptionsModel := new(schematicsv1.GetDeployAgentJobOptions)
				getDeployAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				getDeployAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetDeployAgentJobWithContext(ctx, getDeployAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetDeployAgentJob(getDeployAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetDeployAgentJobWithContext(ctx, getDeployAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDeployAgentJobPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke GetDeployAgentJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetDeployAgentJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDeployAgentJobOptions model
				getDeployAgentJobOptionsModel := new(schematicsv1.GetDeployAgentJobOptions)
				getDeployAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				getDeployAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetDeployAgentJob(getDeployAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetDeployAgentJob with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetDeployAgentJobOptions model
				getDeployAgentJobOptionsModel := new(schematicsv1.GetDeployAgentJobOptions)
				getDeployAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				getDeployAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetDeployAgentJob(getDeployAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDeployAgentJobOptions model with no property values
				getDeployAgentJobOptionsModelNew := new(schematicsv1.GetDeployAgentJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetDeployAgentJob(getDeployAgentJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke GetDeployAgentJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetDeployAgentJobOptions model
				getDeployAgentJobOptionsModel := new(schematicsv1.GetDeployAgentJobOptions)
				getDeployAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				getDeployAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetDeployAgentJob(getDeployAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeployAgentJob(deployAgentJobOptions *DeployAgentJobOptions)`, func() {
		deployAgentJobPath := "/v2/agents/testString/deploy"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deployAgentJobPath))
					Expect(req.Method).To(Equal("PUT"))

					// TODO: Add check for force query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke DeployAgentJob successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the DeployAgentJobOptions model
				deployAgentJobOptionsModel := new(schematicsv1.DeployAgentJobOptions)
				deployAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				deployAgentJobOptionsModel.Force = core.BoolPtr(true)
				deployAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.DeployAgentJobWithContext(ctx, deployAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.DeployAgentJob(deployAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.DeployAgentJobWithContext(ctx, deployAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deployAgentJobPath))
					Expect(req.Method).To(Equal("PUT"))

					// TODO: Add check for force query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `"OperationResponse"`)
				}))
			})
			It(`Invoke DeployAgentJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.DeployAgentJob(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DeployAgentJobOptions model
				deployAgentJobOptionsModel := new(schematicsv1.DeployAgentJobOptions)
				deployAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				deployAgentJobOptionsModel.Force = core.BoolPtr(true)
				deployAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.DeployAgentJob(deployAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke DeployAgentJob with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeployAgentJobOptions model
				deployAgentJobOptionsModel := new(schematicsv1.DeployAgentJobOptions)
				deployAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				deployAgentJobOptionsModel.Force = core.BoolPtr(true)
				deployAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.DeployAgentJob(deployAgentJobOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the DeployAgentJobOptions model with no property values
				deployAgentJobOptionsModelNew := new(schematicsv1.DeployAgentJobOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.DeployAgentJob(deployAgentJobOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke DeployAgentJob successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeployAgentJobOptions model
				deployAgentJobOptionsModel := new(schematicsv1.DeployAgentJobOptions)
				deployAgentJobOptionsModel.AgentID = core.StringPtr("testString")
				deployAgentJobOptionsModel.Force = core.BoolPtr(true)
				deployAgentJobOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.DeployAgentJob(deployAgentJobOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetKmsSettings(getKmsSettingsOptions *GetKmsSettingsOptions) - Operation response error`, func() {
		getKmsSettingsPath := "/v2/settings/kms"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getKmsSettingsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetKmsSettings with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetKmsSettingsOptions model
				getKmsSettingsOptionsModel := new(schematicsv1.GetKmsSettingsOptions)
				getKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				getKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetKmsSettings(getKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetKmsSettings(getKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetKmsSettings(getKmsSettingsOptions *GetKmsSettingsOptions)`, func() {
		getKmsSettingsPath := "/v2/settings/kms"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getKmsSettingsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "primary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}, "secondary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}}`)
				}))
			})
			It(`Invoke GetKmsSettings successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetKmsSettingsOptions model
				getKmsSettingsOptionsModel := new(schematicsv1.GetKmsSettingsOptions)
				getKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				getKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetKmsSettingsWithContext(ctx, getKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetKmsSettings(getKmsSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetKmsSettingsWithContext(ctx, getKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getKmsSettingsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "primary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}, "secondary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}}`)
				}))
			})
			It(`Invoke GetKmsSettings successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetKmsSettings(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetKmsSettingsOptions model
				getKmsSettingsOptionsModel := new(schematicsv1.GetKmsSettingsOptions)
				getKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				getKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetKmsSettings(getKmsSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetKmsSettings with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetKmsSettingsOptions model
				getKmsSettingsOptionsModel := new(schematicsv1.GetKmsSettingsOptions)
				getKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				getKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetKmsSettings(getKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetKmsSettingsOptions model with no property values
				getKmsSettingsOptionsModelNew := new(schematicsv1.GetKmsSettingsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetKmsSettings(getKmsSettingsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetKmsSettings successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetKmsSettingsOptions model
				getKmsSettingsOptionsModel := new(schematicsv1.GetKmsSettingsOptions)
				getKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				getKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetKmsSettings(getKmsSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateKmsSettings(updateKmsSettingsOptions *UpdateKmsSettingsOptions) - Operation response error`, func() {
		updateKmsSettingsPath := "/v2/settings/kms"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateKmsSettingsPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateKmsSettings with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the KMSSettingsPrimaryCrk model
				kmsSettingsPrimaryCrkModel := new(schematicsv1.KMSSettingsPrimaryCrk)
				kmsSettingsPrimaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the KMSSettingsSecondaryCrk model
				kmsSettingsSecondaryCrkModel := new(schematicsv1.KMSSettingsSecondaryCrk)
				kmsSettingsSecondaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the UpdateKmsSettingsOptions model
				updateKmsSettingsOptionsModel := new(schematicsv1.UpdateKmsSettingsOptions)
				updateKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.PrimaryCrk = kmsSettingsPrimaryCrkModel
				updateKmsSettingsOptionsModel.SecondaryCrk = kmsSettingsSecondaryCrkModel
				updateKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.UpdateKmsSettings(updateKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.UpdateKmsSettings(updateKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateKmsSettings(updateKmsSettingsOptions *UpdateKmsSettingsOptions)`, func() {
		updateKmsSettingsPath := "/v2/settings/kms"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateKmsSettingsPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "primary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}, "secondary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}}`)
				}))
			})
			It(`Invoke UpdateKmsSettings successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the KMSSettingsPrimaryCrk model
				kmsSettingsPrimaryCrkModel := new(schematicsv1.KMSSettingsPrimaryCrk)
				kmsSettingsPrimaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the KMSSettingsSecondaryCrk model
				kmsSettingsSecondaryCrkModel := new(schematicsv1.KMSSettingsSecondaryCrk)
				kmsSettingsSecondaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the UpdateKmsSettingsOptions model
				updateKmsSettingsOptionsModel := new(schematicsv1.UpdateKmsSettingsOptions)
				updateKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.PrimaryCrk = kmsSettingsPrimaryCrkModel
				updateKmsSettingsOptionsModel.SecondaryCrk = kmsSettingsSecondaryCrkModel
				updateKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.UpdateKmsSettingsWithContext(ctx, updateKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.UpdateKmsSettings(updateKmsSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.UpdateKmsSettingsWithContext(ctx, updateKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateKmsSettingsPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "primary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}, "secondary_crk": {"kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "key_crn": "KeyCrn"}}`)
				}))
			})
			It(`Invoke UpdateKmsSettings successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.UpdateKmsSettings(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the KMSSettingsPrimaryCrk model
				kmsSettingsPrimaryCrkModel := new(schematicsv1.KMSSettingsPrimaryCrk)
				kmsSettingsPrimaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the KMSSettingsSecondaryCrk model
				kmsSettingsSecondaryCrkModel := new(schematicsv1.KMSSettingsSecondaryCrk)
				kmsSettingsSecondaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the UpdateKmsSettingsOptions model
				updateKmsSettingsOptionsModel := new(schematicsv1.UpdateKmsSettingsOptions)
				updateKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.PrimaryCrk = kmsSettingsPrimaryCrkModel
				updateKmsSettingsOptionsModel.SecondaryCrk = kmsSettingsSecondaryCrkModel
				updateKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.UpdateKmsSettings(updateKmsSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateKmsSettings with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the KMSSettingsPrimaryCrk model
				kmsSettingsPrimaryCrkModel := new(schematicsv1.KMSSettingsPrimaryCrk)
				kmsSettingsPrimaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the KMSSettingsSecondaryCrk model
				kmsSettingsSecondaryCrkModel := new(schematicsv1.KMSSettingsSecondaryCrk)
				kmsSettingsSecondaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the UpdateKmsSettingsOptions model
				updateKmsSettingsOptionsModel := new(schematicsv1.UpdateKmsSettingsOptions)
				updateKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.PrimaryCrk = kmsSettingsPrimaryCrkModel
				updateKmsSettingsOptionsModel.SecondaryCrk = kmsSettingsSecondaryCrkModel
				updateKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.UpdateKmsSettings(updateKmsSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateKmsSettings successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the KMSSettingsPrimaryCrk model
				kmsSettingsPrimaryCrkModel := new(schematicsv1.KMSSettingsPrimaryCrk)
				kmsSettingsPrimaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the KMSSettingsSecondaryCrk model
				kmsSettingsSecondaryCrkModel := new(schematicsv1.KMSSettingsSecondaryCrk)
				kmsSettingsSecondaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KeyCrn = core.StringPtr("testString")

				// Construct an instance of the UpdateKmsSettingsOptions model
				updateKmsSettingsOptionsModel := new(schematicsv1.UpdateKmsSettingsOptions)
				updateKmsSettingsOptionsModel.Location = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.ResourceGroup = core.StringPtr("testString")
				updateKmsSettingsOptionsModel.PrimaryCrk = kmsSettingsPrimaryCrkModel
				updateKmsSettingsOptionsModel.SecondaryCrk = kmsSettingsSecondaryCrkModel
				updateKmsSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.UpdateKmsSettings(updateKmsSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListKms(listKmsOptions *ListKmsOptions) - Operation response error`, func() {
		listKmsPath := "/v2/settings/kms_instances"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listKmsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["encryption_scheme"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["resource_group"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListKms with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListKmsOptions model
				listKmsOptionsModel := new(schematicsv1.ListKmsOptions)
				listKmsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				listKmsOptionsModel.Location = core.StringPtr("testString")
				listKmsOptionsModel.ResourceGroup = core.StringPtr("testString")
				listKmsOptionsModel.Limit = core.Int64Ptr(int64(100))
				listKmsOptionsModel.Sort = core.StringPtr("testString")
				listKmsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListKms(listKmsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListKms(listKmsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListKms(listKmsOptions *ListKmsOptions)`, func() {
		listKmsPath := "/v2/settings/kms_instances"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listKmsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["encryption_scheme"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["resource_group"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "kms_instances": [{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "kms_crn": "KmsCrn", "kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "kms_public_endpoint": "KmsPublicEndpoint", "keys": [{"name": "Name", "crn": "Crn", "error": "Error"}]}]}`)
				}))
			})
			It(`Invoke ListKms successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListKmsOptions model
				listKmsOptionsModel := new(schematicsv1.ListKmsOptions)
				listKmsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				listKmsOptionsModel.Location = core.StringPtr("testString")
				listKmsOptionsModel.ResourceGroup = core.StringPtr("testString")
				listKmsOptionsModel.Limit = core.Int64Ptr(int64(100))
				listKmsOptionsModel.Sort = core.StringPtr("testString")
				listKmsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListKmsWithContext(ctx, listKmsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListKms(listKmsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListKmsWithContext(ctx, listKmsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listKmsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["encryption_scheme"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["location"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["resource_group"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "kms_instances": [{"location": "Location", "encryption_scheme": "EncryptionScheme", "resource_group": "ResourceGroup", "kms_crn": "KmsCrn", "kms_name": "KmsName", "kms_private_endpoint": "KmsPrivateEndpoint", "kms_public_endpoint": "KmsPublicEndpoint", "keys": [{"name": "Name", "crn": "Crn", "error": "Error"}]}]}`)
				}))
			})
			It(`Invoke ListKms successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListKms(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListKmsOptions model
				listKmsOptionsModel := new(schematicsv1.ListKmsOptions)
				listKmsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				listKmsOptionsModel.Location = core.StringPtr("testString")
				listKmsOptionsModel.ResourceGroup = core.StringPtr("testString")
				listKmsOptionsModel.Limit = core.Int64Ptr(int64(100))
				listKmsOptionsModel.Sort = core.StringPtr("testString")
				listKmsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListKms(listKmsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListKms with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListKmsOptions model
				listKmsOptionsModel := new(schematicsv1.ListKmsOptions)
				listKmsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				listKmsOptionsModel.Location = core.StringPtr("testString")
				listKmsOptionsModel.ResourceGroup = core.StringPtr("testString")
				listKmsOptionsModel.Limit = core.Int64Ptr(int64(100))
				listKmsOptionsModel.Sort = core.StringPtr("testString")
				listKmsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListKms(listKmsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListKmsOptions model with no property values
				listKmsOptionsModelNew := new(schematicsv1.ListKmsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.ListKms(listKmsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListKms successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListKmsOptions model
				listKmsOptionsModel := new(schematicsv1.ListKmsOptions)
				listKmsOptionsModel.EncryptionScheme = core.StringPtr("testString")
				listKmsOptionsModel.Location = core.StringPtr("testString")
				listKmsOptionsModel.ResourceGroup = core.StringPtr("testString")
				listKmsOptionsModel.Limit = core.Int64Ptr(int64(100))
				listKmsOptionsModel.Sort = core.StringPtr("testString")
				listKmsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ListKms(listKmsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListPolicy(listPolicyOptions *ListPolicyOptions) - Operation response error`, func() {
		listPolicyPath := "/v2/settings/policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listPolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListPolicy with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListPolicyOptions model
				listPolicyOptionsModel := new(schematicsv1.ListPolicyOptions)
				listPolicyOptionsModel.Offset = core.Int64Ptr(int64(0))
				listPolicyOptionsModel.Limit = core.Int64Ptr(int64(100))
				listPolicyOptionsModel.Profile = core.StringPtr("summary")
				listPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.ListPolicy(listPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.ListPolicy(listPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListPolicy(listPolicyOptions *ListPolicyOptions)`, func() {
		listPolicyPath := "/v2/settings/policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listPolicyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "policies": [{"name": "Agent1-DevWS", "id": "ID", "crn": "Crn", "account": "Account", "description": "Policy for job execution of secured workspaces on agent1", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "policy_kind": "agent_assignment_policy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListPolicy successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the ListPolicyOptions model
				listPolicyOptionsModel := new(schematicsv1.ListPolicyOptions)
				listPolicyOptionsModel.Offset = core.Int64Ptr(int64(0))
				listPolicyOptionsModel.Limit = core.Int64Ptr(int64(100))
				listPolicyOptionsModel.Profile = core.StringPtr("summary")
				listPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.ListPolicyWithContext(ctx, listPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.ListPolicy(listPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.ListPolicyWithContext(ctx, listPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listPolicyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["offset"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(100))}))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"total_count": 10, "limit": 5, "offset": 6, "policies": [{"name": "Agent1-DevWS", "id": "ID", "crn": "Crn", "account": "Account", "description": "Policy for job execution of secured workspaces on agent1", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "policy_kind": "agent_assignment_policy", "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy"}]}`)
				}))
			})
			It(`Invoke ListPolicy successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.ListPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListPolicyOptions model
				listPolicyOptionsModel := new(schematicsv1.ListPolicyOptions)
				listPolicyOptionsModel.Offset = core.Int64Ptr(int64(0))
				listPolicyOptionsModel.Limit = core.Int64Ptr(int64(100))
				listPolicyOptionsModel.Profile = core.StringPtr("summary")
				listPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.ListPolicy(listPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListPolicy with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListPolicyOptions model
				listPolicyOptionsModel := new(schematicsv1.ListPolicyOptions)
				listPolicyOptionsModel.Offset = core.Int64Ptr(int64(0))
				listPolicyOptionsModel.Limit = core.Int64Ptr(int64(100))
				listPolicyOptionsModel.Profile = core.StringPtr("summary")
				listPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.ListPolicy(listPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListPolicy successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the ListPolicyOptions model
				listPolicyOptionsModel := new(schematicsv1.ListPolicyOptions)
				listPolicyOptionsModel.Offset = core.Int64Ptr(int64(0))
				listPolicyOptionsModel.Limit = core.Int64Ptr(int64(100))
				listPolicyOptionsModel.Profile = core.StringPtr("summary")
				listPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.ListPolicy(listPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreatePolicy(createPolicyOptions *CreatePolicyOptions) - Operation response error`, func() {
		createPolicyPath := "/v2/settings/policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createPolicyPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreatePolicy with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the PolicyObjectSelector model
				policyObjectSelectorModel := new(schematicsv1.PolicyObjectSelector)
				policyObjectSelectorModel.Kind = core.StringPtr("workspace")
				policyObjectSelectorModel.Tags = []string{"testString"}
				policyObjectSelectorModel.ResourceGroups = []string{"testString"}
				policyObjectSelectorModel.Locations = []string{"us-south"}

				// Construct an instance of the PolicyObjects model
				policyObjectsModel := new(schematicsv1.PolicyObjects)
				policyObjectsModel.SelectorKind = core.StringPtr("ids")
				policyObjectsModel.SelectorIds = []string{"testString"}
				policyObjectsModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the AgentAssignmentPolicyParameter model
				agentAssignmentPolicyParameterModel := new(schematicsv1.AgentAssignmentPolicyParameter)
				agentAssignmentPolicyParameterModel.SelectorKind = core.StringPtr("ids")
				agentAssignmentPolicyParameterModel.SelectorIds = []string{"testString"}
				agentAssignmentPolicyParameterModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the PolicyParameter model
				policyParameterModel := new(schematicsv1.PolicyParameter)
				policyParameterModel.AgentAssignmentPolicyParameter = agentAssignmentPolicyParameterModel

				// Construct an instance of the ScopedResource model
				scopedResourceModel := new(schematicsv1.ScopedResource)
				scopedResourceModel.Kind = core.StringPtr("workspace")
				scopedResourceModel.ID = core.StringPtr("testString")

				// Construct an instance of the CreatePolicyOptions model
				createPolicyOptionsModel := new(schematicsv1.CreatePolicyOptions)
				createPolicyOptionsModel.Name = core.StringPtr("Agent1-DevWS")
				createPolicyOptionsModel.Description = core.StringPtr("Policy for job execution of secured workspaces on agent1")
				createPolicyOptionsModel.ResourceGroup = core.StringPtr("Default")
				createPolicyOptionsModel.Tags = []string{"policy:secured-job"}
				createPolicyOptionsModel.Location = core.StringPtr("us-south")
				createPolicyOptionsModel.State = userStateModel
				createPolicyOptionsModel.Kind = core.StringPtr("agent_assignment_policy")
				createPolicyOptionsModel.Target = policyObjectsModel
				createPolicyOptionsModel.Parameter = policyParameterModel
				createPolicyOptionsModel.ScopedResources = []schematicsv1.ScopedResource{*scopedResourceModel}
				createPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.CreatePolicy(createPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.CreatePolicy(createPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreatePolicy(createPolicyOptions *CreatePolicyOptions)`, func() {
		createPolicyPath := "/v2/settings/policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createPolicyPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "Agent1-DevWS", "description": "Policy for job execution of secured workspaces on agent1", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "kind": "agent_assignment_policy", "target": {"selector_kind": "ids", "selector_ids": ["SelectorIds"], "selector_scope": [{"kind": "workspace", "tags": ["Tags"], "resource_groups": ["ResourceGroups"], "locations": ["us-south"]}]}, "parameter": {"agent_assignment_policy_parameter": {"selector_kind": "ids", "selector_ids": ["SelectorIds"], "selector_scope": [{"kind": "workspace", "tags": ["Tags"], "resource_groups": ["ResourceGroups"], "locations": ["us-south"]}]}}, "id": "ID", "crn": "Crn", "account": "Account", "scoped_resources": [{"kind": "workspace", "id": "ID"}], "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreatePolicy successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the PolicyObjectSelector model
				policyObjectSelectorModel := new(schematicsv1.PolicyObjectSelector)
				policyObjectSelectorModel.Kind = core.StringPtr("workspace")
				policyObjectSelectorModel.Tags = []string{"testString"}
				policyObjectSelectorModel.ResourceGroups = []string{"testString"}
				policyObjectSelectorModel.Locations = []string{"us-south"}

				// Construct an instance of the PolicyObjects model
				policyObjectsModel := new(schematicsv1.PolicyObjects)
				policyObjectsModel.SelectorKind = core.StringPtr("ids")
				policyObjectsModel.SelectorIds = []string{"testString"}
				policyObjectsModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the AgentAssignmentPolicyParameter model
				agentAssignmentPolicyParameterModel := new(schematicsv1.AgentAssignmentPolicyParameter)
				agentAssignmentPolicyParameterModel.SelectorKind = core.StringPtr("ids")
				agentAssignmentPolicyParameterModel.SelectorIds = []string{"testString"}
				agentAssignmentPolicyParameterModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the PolicyParameter model
				policyParameterModel := new(schematicsv1.PolicyParameter)
				policyParameterModel.AgentAssignmentPolicyParameter = agentAssignmentPolicyParameterModel

				// Construct an instance of the ScopedResource model
				scopedResourceModel := new(schematicsv1.ScopedResource)
				scopedResourceModel.Kind = core.StringPtr("workspace")
				scopedResourceModel.ID = core.StringPtr("testString")

				// Construct an instance of the CreatePolicyOptions model
				createPolicyOptionsModel := new(schematicsv1.CreatePolicyOptions)
				createPolicyOptionsModel.Name = core.StringPtr("Agent1-DevWS")
				createPolicyOptionsModel.Description = core.StringPtr("Policy for job execution of secured workspaces on agent1")
				createPolicyOptionsModel.ResourceGroup = core.StringPtr("Default")
				createPolicyOptionsModel.Tags = []string{"policy:secured-job"}
				createPolicyOptionsModel.Location = core.StringPtr("us-south")
				createPolicyOptionsModel.State = userStateModel
				createPolicyOptionsModel.Kind = core.StringPtr("agent_assignment_policy")
				createPolicyOptionsModel.Target = policyObjectsModel
				createPolicyOptionsModel.Parameter = policyParameterModel
				createPolicyOptionsModel.ScopedResources = []schematicsv1.ScopedResource{*scopedResourceModel}
				createPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.CreatePolicyWithContext(ctx, createPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.CreatePolicy(createPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.CreatePolicyWithContext(ctx, createPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createPolicyPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"name": "Agent1-DevWS", "description": "Policy for job execution of secured workspaces on agent1", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "kind": "agent_assignment_policy", "target": {"selector_kind": "ids", "selector_ids": ["SelectorIds"], "selector_scope": [{"kind": "workspace", "tags": ["Tags"], "resource_groups": ["ResourceGroups"], "locations": ["us-south"]}]}, "parameter": {"agent_assignment_policy_parameter": {"selector_kind": "ids", "selector_ids": ["SelectorIds"], "selector_scope": [{"kind": "workspace", "tags": ["Tags"], "resource_groups": ["ResourceGroups"], "locations": ["us-south"]}]}}, "id": "ID", "crn": "Crn", "account": "Account", "scoped_resources": [{"kind": "workspace", "id": "ID"}], "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke CreatePolicy successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.CreatePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the PolicyObjectSelector model
				policyObjectSelectorModel := new(schematicsv1.PolicyObjectSelector)
				policyObjectSelectorModel.Kind = core.StringPtr("workspace")
				policyObjectSelectorModel.Tags = []string{"testString"}
				policyObjectSelectorModel.ResourceGroups = []string{"testString"}
				policyObjectSelectorModel.Locations = []string{"us-south"}

				// Construct an instance of the PolicyObjects model
				policyObjectsModel := new(schematicsv1.PolicyObjects)
				policyObjectsModel.SelectorKind = core.StringPtr("ids")
				policyObjectsModel.SelectorIds = []string{"testString"}
				policyObjectsModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the AgentAssignmentPolicyParameter model
				agentAssignmentPolicyParameterModel := new(schematicsv1.AgentAssignmentPolicyParameter)
				agentAssignmentPolicyParameterModel.SelectorKind = core.StringPtr("ids")
				agentAssignmentPolicyParameterModel.SelectorIds = []string{"testString"}
				agentAssignmentPolicyParameterModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the PolicyParameter model
				policyParameterModel := new(schematicsv1.PolicyParameter)
				policyParameterModel.AgentAssignmentPolicyParameter = agentAssignmentPolicyParameterModel

				// Construct an instance of the ScopedResource model
				scopedResourceModel := new(schematicsv1.ScopedResource)
				scopedResourceModel.Kind = core.StringPtr("workspace")
				scopedResourceModel.ID = core.StringPtr("testString")

				// Construct an instance of the CreatePolicyOptions model
				createPolicyOptionsModel := new(schematicsv1.CreatePolicyOptions)
				createPolicyOptionsModel.Name = core.StringPtr("Agent1-DevWS")
				createPolicyOptionsModel.Description = core.StringPtr("Policy for job execution of secured workspaces on agent1")
				createPolicyOptionsModel.ResourceGroup = core.StringPtr("Default")
				createPolicyOptionsModel.Tags = []string{"policy:secured-job"}
				createPolicyOptionsModel.Location = core.StringPtr("us-south")
				createPolicyOptionsModel.State = userStateModel
				createPolicyOptionsModel.Kind = core.StringPtr("agent_assignment_policy")
				createPolicyOptionsModel.Target = policyObjectsModel
				createPolicyOptionsModel.Parameter = policyParameterModel
				createPolicyOptionsModel.ScopedResources = []schematicsv1.ScopedResource{*scopedResourceModel}
				createPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.CreatePolicy(createPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreatePolicy with error: Operation request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the PolicyObjectSelector model
				policyObjectSelectorModel := new(schematicsv1.PolicyObjectSelector)
				policyObjectSelectorModel.Kind = core.StringPtr("workspace")
				policyObjectSelectorModel.Tags = []string{"testString"}
				policyObjectSelectorModel.ResourceGroups = []string{"testString"}
				policyObjectSelectorModel.Locations = []string{"us-south"}

				// Construct an instance of the PolicyObjects model
				policyObjectsModel := new(schematicsv1.PolicyObjects)
				policyObjectsModel.SelectorKind = core.StringPtr("ids")
				policyObjectsModel.SelectorIds = []string{"testString"}
				policyObjectsModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the AgentAssignmentPolicyParameter model
				agentAssignmentPolicyParameterModel := new(schematicsv1.AgentAssignmentPolicyParameter)
				agentAssignmentPolicyParameterModel.SelectorKind = core.StringPtr("ids")
				agentAssignmentPolicyParameterModel.SelectorIds = []string{"testString"}
				agentAssignmentPolicyParameterModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the PolicyParameter model
				policyParameterModel := new(schematicsv1.PolicyParameter)
				policyParameterModel.AgentAssignmentPolicyParameter = agentAssignmentPolicyParameterModel

				// Construct an instance of the ScopedResource model
				scopedResourceModel := new(schematicsv1.ScopedResource)
				scopedResourceModel.Kind = core.StringPtr("workspace")
				scopedResourceModel.ID = core.StringPtr("testString")

				// Construct an instance of the CreatePolicyOptions model
				createPolicyOptionsModel := new(schematicsv1.CreatePolicyOptions)
				createPolicyOptionsModel.Name = core.StringPtr("Agent1-DevWS")
				createPolicyOptionsModel.Description = core.StringPtr("Policy for job execution of secured workspaces on agent1")
				createPolicyOptionsModel.ResourceGroup = core.StringPtr("Default")
				createPolicyOptionsModel.Tags = []string{"policy:secured-job"}
				createPolicyOptionsModel.Location = core.StringPtr("us-south")
				createPolicyOptionsModel.State = userStateModel
				createPolicyOptionsModel.Kind = core.StringPtr("agent_assignment_policy")
				createPolicyOptionsModel.Target = policyObjectsModel
				createPolicyOptionsModel.Parameter = policyParameterModel
				createPolicyOptionsModel.ScopedResources = []schematicsv1.ScopedResource{*scopedResourceModel}
				createPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.CreatePolicy(createPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreatePolicy successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the PolicyObjectSelector model
				policyObjectSelectorModel := new(schematicsv1.PolicyObjectSelector)
				policyObjectSelectorModel.Kind = core.StringPtr("workspace")
				policyObjectSelectorModel.Tags = []string{"testString"}
				policyObjectSelectorModel.ResourceGroups = []string{"testString"}
				policyObjectSelectorModel.Locations = []string{"us-south"}

				// Construct an instance of the PolicyObjects model
				policyObjectsModel := new(schematicsv1.PolicyObjects)
				policyObjectsModel.SelectorKind = core.StringPtr("ids")
				policyObjectsModel.SelectorIds = []string{"testString"}
				policyObjectsModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the AgentAssignmentPolicyParameter model
				agentAssignmentPolicyParameterModel := new(schematicsv1.AgentAssignmentPolicyParameter)
				agentAssignmentPolicyParameterModel.SelectorKind = core.StringPtr("ids")
				agentAssignmentPolicyParameterModel.SelectorIds = []string{"testString"}
				agentAssignmentPolicyParameterModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the PolicyParameter model
				policyParameterModel := new(schematicsv1.PolicyParameter)
				policyParameterModel.AgentAssignmentPolicyParameter = agentAssignmentPolicyParameterModel

				// Construct an instance of the ScopedResource model
				scopedResourceModel := new(schematicsv1.ScopedResource)
				scopedResourceModel.Kind = core.StringPtr("workspace")
				scopedResourceModel.ID = core.StringPtr("testString")

				// Construct an instance of the CreatePolicyOptions model
				createPolicyOptionsModel := new(schematicsv1.CreatePolicyOptions)
				createPolicyOptionsModel.Name = core.StringPtr("Agent1-DevWS")
				createPolicyOptionsModel.Description = core.StringPtr("Policy for job execution of secured workspaces on agent1")
				createPolicyOptionsModel.ResourceGroup = core.StringPtr("Default")
				createPolicyOptionsModel.Tags = []string{"policy:secured-job"}
				createPolicyOptionsModel.Location = core.StringPtr("us-south")
				createPolicyOptionsModel.State = userStateModel
				createPolicyOptionsModel.Kind = core.StringPtr("agent_assignment_policy")
				createPolicyOptionsModel.Target = policyObjectsModel
				createPolicyOptionsModel.Parameter = policyParameterModel
				createPolicyOptionsModel.ScopedResources = []schematicsv1.ScopedResource{*scopedResourceModel}
				createPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.CreatePolicy(createPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetPolicy(getPolicyOptions *GetPolicyOptions) - Operation response error`, func() {
		getPolicyPath := "/v2/settings/policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getPolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetPolicy with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetPolicyOptions model
				getPolicyOptionsModel := new(schematicsv1.GetPolicyOptions)
				getPolicyOptionsModel.PolicyID = core.StringPtr("testString")
				getPolicyOptionsModel.Profile = core.StringPtr("summary")
				getPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.GetPolicy(getPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.GetPolicy(getPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetPolicy(getPolicyOptions *GetPolicyOptions)`, func() {
		getPolicyPath := "/v2/settings/policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getPolicyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Agent1-DevWS", "description": "Policy for job execution of secured workspaces on agent1", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "kind": "agent_assignment_policy", "target": {"selector_kind": "ids", "selector_ids": ["SelectorIds"], "selector_scope": [{"kind": "workspace", "tags": ["Tags"], "resource_groups": ["ResourceGroups"], "locations": ["us-south"]}]}, "parameter": {"agent_assignment_policy_parameter": {"selector_kind": "ids", "selector_ids": ["SelectorIds"], "selector_scope": [{"kind": "workspace", "tags": ["Tags"], "resource_groups": ["ResourceGroups"], "locations": ["us-south"]}]}}, "id": "ID", "crn": "Crn", "account": "Account", "scoped_resources": [{"kind": "workspace", "id": "ID"}], "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetPolicy successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the GetPolicyOptions model
				getPolicyOptionsModel := new(schematicsv1.GetPolicyOptions)
				getPolicyOptionsModel.PolicyID = core.StringPtr("testString")
				getPolicyOptionsModel.Profile = core.StringPtr("summary")
				getPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.GetPolicyWithContext(ctx, getPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.GetPolicy(getPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.GetPolicyWithContext(ctx, getPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getPolicyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["profile"]).To(Equal([]string{"summary"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Agent1-DevWS", "description": "Policy for job execution of secured workspaces on agent1", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "kind": "agent_assignment_policy", "target": {"selector_kind": "ids", "selector_ids": ["SelectorIds"], "selector_scope": [{"kind": "workspace", "tags": ["Tags"], "resource_groups": ["ResourceGroups"], "locations": ["us-south"]}]}, "parameter": {"agent_assignment_policy_parameter": {"selector_kind": "ids", "selector_ids": ["SelectorIds"], "selector_scope": [{"kind": "workspace", "tags": ["Tags"], "resource_groups": ["ResourceGroups"], "locations": ["us-south"]}]}}, "id": "ID", "crn": "Crn", "account": "Account", "scoped_resources": [{"kind": "workspace", "id": "ID"}], "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetPolicy successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.GetPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetPolicyOptions model
				getPolicyOptionsModel := new(schematicsv1.GetPolicyOptions)
				getPolicyOptionsModel.PolicyID = core.StringPtr("testString")
				getPolicyOptionsModel.Profile = core.StringPtr("summary")
				getPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.GetPolicy(getPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetPolicy with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetPolicyOptions model
				getPolicyOptionsModel := new(schematicsv1.GetPolicyOptions)
				getPolicyOptionsModel.PolicyID = core.StringPtr("testString")
				getPolicyOptionsModel.Profile = core.StringPtr("summary")
				getPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.GetPolicy(getPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetPolicyOptions model with no property values
				getPolicyOptionsModelNew := new(schematicsv1.GetPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.GetPolicy(getPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetPolicy successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the GetPolicyOptions model
				getPolicyOptionsModel := new(schematicsv1.GetPolicyOptions)
				getPolicyOptionsModel.PolicyID = core.StringPtr("testString")
				getPolicyOptionsModel.Profile = core.StringPtr("summary")
				getPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.GetPolicy(getPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeletePolicy(deletePolicyOptions *DeletePolicyOptions)`, func() {
		deletePolicyPath := "/v2/settings/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deletePolicyPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeletePolicy successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := schematicsService.DeletePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeletePolicyOptions model
				deletePolicyOptionsModel := new(schematicsv1.DeletePolicyOptions)
				deletePolicyOptionsModel.PolicyID = core.StringPtr("testString")
				deletePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = schematicsService.DeletePolicy(deletePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeletePolicy with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the DeletePolicyOptions model
				deletePolicyOptionsModel := new(schematicsv1.DeletePolicyOptions)
				deletePolicyOptionsModel.PolicyID = core.StringPtr("testString")
				deletePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := schematicsService.DeletePolicy(deletePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeletePolicyOptions model with no property values
				deletePolicyOptionsModelNew := new(schematicsv1.DeletePolicyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = schematicsService.DeletePolicy(deletePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdatePolicy(updatePolicyOptions *UpdatePolicyOptions) - Operation response error`, func() {
		updatePolicyPath := "/v2/settings/policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updatePolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdatePolicy with error: Operation response processing error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the PolicyObjectSelector model
				policyObjectSelectorModel := new(schematicsv1.PolicyObjectSelector)
				policyObjectSelectorModel.Kind = core.StringPtr("workspace")
				policyObjectSelectorModel.Tags = []string{"testString"}
				policyObjectSelectorModel.ResourceGroups = []string{"testString"}
				policyObjectSelectorModel.Locations = []string{"us-south"}

				// Construct an instance of the PolicyObjects model
				policyObjectsModel := new(schematicsv1.PolicyObjects)
				policyObjectsModel.SelectorKind = core.StringPtr("ids")
				policyObjectsModel.SelectorIds = []string{"testString"}
				policyObjectsModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the AgentAssignmentPolicyParameter model
				agentAssignmentPolicyParameterModel := new(schematicsv1.AgentAssignmentPolicyParameter)
				agentAssignmentPolicyParameterModel.SelectorKind = core.StringPtr("ids")
				agentAssignmentPolicyParameterModel.SelectorIds = []string{"testString"}
				agentAssignmentPolicyParameterModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the PolicyParameter model
				policyParameterModel := new(schematicsv1.PolicyParameter)
				policyParameterModel.AgentAssignmentPolicyParameter = agentAssignmentPolicyParameterModel

				// Construct an instance of the ScopedResource model
				scopedResourceModel := new(schematicsv1.ScopedResource)
				scopedResourceModel.Kind = core.StringPtr("workspace")
				scopedResourceModel.ID = core.StringPtr("testString")

				// Construct an instance of the UpdatePolicyOptions model
				updatePolicyOptionsModel := new(schematicsv1.UpdatePolicyOptions)
				updatePolicyOptionsModel.PolicyID = core.StringPtr("testString")
				updatePolicyOptionsModel.Name = core.StringPtr("Agent1-DevWS")
				updatePolicyOptionsModel.Description = core.StringPtr("Policy for job execution of secured workspaces on agent1")
				updatePolicyOptionsModel.ResourceGroup = core.StringPtr("Default")
				updatePolicyOptionsModel.Tags = []string{"policy:secured-job"}
				updatePolicyOptionsModel.Location = core.StringPtr("us-south")
				updatePolicyOptionsModel.State = userStateModel
				updatePolicyOptionsModel.Kind = core.StringPtr("agent_assignment_policy")
				updatePolicyOptionsModel.Target = policyObjectsModel
				updatePolicyOptionsModel.Parameter = policyParameterModel
				updatePolicyOptionsModel.ScopedResources = []schematicsv1.ScopedResource{*scopedResourceModel}
				updatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := schematicsService.UpdatePolicy(updatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				schematicsService.EnableRetries(0, 0)
				result, response, operationErr = schematicsService.UpdatePolicy(updatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdatePolicy(updatePolicyOptions *UpdatePolicyOptions)`, func() {
		updatePolicyPath := "/v2/settings/policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updatePolicyPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Agent1-DevWS", "description": "Policy for job execution of secured workspaces on agent1", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "kind": "agent_assignment_policy", "target": {"selector_kind": "ids", "selector_ids": ["SelectorIds"], "selector_scope": [{"kind": "workspace", "tags": ["Tags"], "resource_groups": ["ResourceGroups"], "locations": ["us-south"]}]}, "parameter": {"agent_assignment_policy_parameter": {"selector_kind": "ids", "selector_ids": ["SelectorIds"], "selector_scope": [{"kind": "workspace", "tags": ["Tags"], "resource_groups": ["ResourceGroups"], "locations": ["us-south"]}]}}, "id": "ID", "crn": "Crn", "account": "Account", "scoped_resources": [{"kind": "workspace", "id": "ID"}], "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdatePolicy successfully with retries`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())
				schematicsService.EnableRetries(0, 0)

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the PolicyObjectSelector model
				policyObjectSelectorModel := new(schematicsv1.PolicyObjectSelector)
				policyObjectSelectorModel.Kind = core.StringPtr("workspace")
				policyObjectSelectorModel.Tags = []string{"testString"}
				policyObjectSelectorModel.ResourceGroups = []string{"testString"}
				policyObjectSelectorModel.Locations = []string{"us-south"}

				// Construct an instance of the PolicyObjects model
				policyObjectsModel := new(schematicsv1.PolicyObjects)
				policyObjectsModel.SelectorKind = core.StringPtr("ids")
				policyObjectsModel.SelectorIds = []string{"testString"}
				policyObjectsModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the AgentAssignmentPolicyParameter model
				agentAssignmentPolicyParameterModel := new(schematicsv1.AgentAssignmentPolicyParameter)
				agentAssignmentPolicyParameterModel.SelectorKind = core.StringPtr("ids")
				agentAssignmentPolicyParameterModel.SelectorIds = []string{"testString"}
				agentAssignmentPolicyParameterModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the PolicyParameter model
				policyParameterModel := new(schematicsv1.PolicyParameter)
				policyParameterModel.AgentAssignmentPolicyParameter = agentAssignmentPolicyParameterModel

				// Construct an instance of the ScopedResource model
				scopedResourceModel := new(schematicsv1.ScopedResource)
				scopedResourceModel.Kind = core.StringPtr("workspace")
				scopedResourceModel.ID = core.StringPtr("testString")

				// Construct an instance of the UpdatePolicyOptions model
				updatePolicyOptionsModel := new(schematicsv1.UpdatePolicyOptions)
				updatePolicyOptionsModel.PolicyID = core.StringPtr("testString")
				updatePolicyOptionsModel.Name = core.StringPtr("Agent1-DevWS")
				updatePolicyOptionsModel.Description = core.StringPtr("Policy for job execution of secured workspaces on agent1")
				updatePolicyOptionsModel.ResourceGroup = core.StringPtr("Default")
				updatePolicyOptionsModel.Tags = []string{"policy:secured-job"}
				updatePolicyOptionsModel.Location = core.StringPtr("us-south")
				updatePolicyOptionsModel.State = userStateModel
				updatePolicyOptionsModel.Kind = core.StringPtr("agent_assignment_policy")
				updatePolicyOptionsModel.Target = policyObjectsModel
				updatePolicyOptionsModel.Parameter = policyParameterModel
				updatePolicyOptionsModel.ScopedResources = []schematicsv1.ScopedResource{*scopedResourceModel}
				updatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := schematicsService.UpdatePolicyWithContext(ctx, updatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				schematicsService.DisableRetries()
				result, response, operationErr := schematicsService.UpdatePolicy(updatePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = schematicsService.UpdatePolicyWithContext(ctx, updatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updatePolicyPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"name": "Agent1-DevWS", "description": "Policy for job execution of secured workspaces on agent1", "resource_group": "Default", "tags": ["Tags"], "location": "us-south", "state": {"state": "draft", "set_by": "SetBy", "set_at": "2019-01-01T12:00:00.000Z"}, "kind": "agent_assignment_policy", "target": {"selector_kind": "ids", "selector_ids": ["SelectorIds"], "selector_scope": [{"kind": "workspace", "tags": ["Tags"], "resource_groups": ["ResourceGroups"], "locations": ["us-south"]}]}, "parameter": {"agent_assignment_policy_parameter": {"selector_kind": "ids", "selector_ids": ["SelectorIds"], "selector_scope": [{"kind": "workspace", "tags": ["Tags"], "resource_groups": ["ResourceGroups"], "locations": ["us-south"]}]}}, "id": "ID", "crn": "Crn", "account": "Account", "scoped_resources": [{"kind": "workspace", "id": "ID"}], "created_at": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdatePolicy successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := schematicsService.UpdatePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the PolicyObjectSelector model
				policyObjectSelectorModel := new(schematicsv1.PolicyObjectSelector)
				policyObjectSelectorModel.Kind = core.StringPtr("workspace")
				policyObjectSelectorModel.Tags = []string{"testString"}
				policyObjectSelectorModel.ResourceGroups = []string{"testString"}
				policyObjectSelectorModel.Locations = []string{"us-south"}

				// Construct an instance of the PolicyObjects model
				policyObjectsModel := new(schematicsv1.PolicyObjects)
				policyObjectsModel.SelectorKind = core.StringPtr("ids")
				policyObjectsModel.SelectorIds = []string{"testString"}
				policyObjectsModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the AgentAssignmentPolicyParameter model
				agentAssignmentPolicyParameterModel := new(schematicsv1.AgentAssignmentPolicyParameter)
				agentAssignmentPolicyParameterModel.SelectorKind = core.StringPtr("ids")
				agentAssignmentPolicyParameterModel.SelectorIds = []string{"testString"}
				agentAssignmentPolicyParameterModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the PolicyParameter model
				policyParameterModel := new(schematicsv1.PolicyParameter)
				policyParameterModel.AgentAssignmentPolicyParameter = agentAssignmentPolicyParameterModel

				// Construct an instance of the ScopedResource model
				scopedResourceModel := new(schematicsv1.ScopedResource)
				scopedResourceModel.Kind = core.StringPtr("workspace")
				scopedResourceModel.ID = core.StringPtr("testString")

				// Construct an instance of the UpdatePolicyOptions model
				updatePolicyOptionsModel := new(schematicsv1.UpdatePolicyOptions)
				updatePolicyOptionsModel.PolicyID = core.StringPtr("testString")
				updatePolicyOptionsModel.Name = core.StringPtr("Agent1-DevWS")
				updatePolicyOptionsModel.Description = core.StringPtr("Policy for job execution of secured workspaces on agent1")
				updatePolicyOptionsModel.ResourceGroup = core.StringPtr("Default")
				updatePolicyOptionsModel.Tags = []string{"policy:secured-job"}
				updatePolicyOptionsModel.Location = core.StringPtr("us-south")
				updatePolicyOptionsModel.State = userStateModel
				updatePolicyOptionsModel.Kind = core.StringPtr("agent_assignment_policy")
				updatePolicyOptionsModel.Target = policyObjectsModel
				updatePolicyOptionsModel.Parameter = policyParameterModel
				updatePolicyOptionsModel.ScopedResources = []schematicsv1.ScopedResource{*scopedResourceModel}
				updatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = schematicsService.UpdatePolicy(updatePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdatePolicy with error: Operation validation and request error`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the PolicyObjectSelector model
				policyObjectSelectorModel := new(schematicsv1.PolicyObjectSelector)
				policyObjectSelectorModel.Kind = core.StringPtr("workspace")
				policyObjectSelectorModel.Tags = []string{"testString"}
				policyObjectSelectorModel.ResourceGroups = []string{"testString"}
				policyObjectSelectorModel.Locations = []string{"us-south"}

				// Construct an instance of the PolicyObjects model
				policyObjectsModel := new(schematicsv1.PolicyObjects)
				policyObjectsModel.SelectorKind = core.StringPtr("ids")
				policyObjectsModel.SelectorIds = []string{"testString"}
				policyObjectsModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the AgentAssignmentPolicyParameter model
				agentAssignmentPolicyParameterModel := new(schematicsv1.AgentAssignmentPolicyParameter)
				agentAssignmentPolicyParameterModel.SelectorKind = core.StringPtr("ids")
				agentAssignmentPolicyParameterModel.SelectorIds = []string{"testString"}
				agentAssignmentPolicyParameterModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the PolicyParameter model
				policyParameterModel := new(schematicsv1.PolicyParameter)
				policyParameterModel.AgentAssignmentPolicyParameter = agentAssignmentPolicyParameterModel

				// Construct an instance of the ScopedResource model
				scopedResourceModel := new(schematicsv1.ScopedResource)
				scopedResourceModel.Kind = core.StringPtr("workspace")
				scopedResourceModel.ID = core.StringPtr("testString")

				// Construct an instance of the UpdatePolicyOptions model
				updatePolicyOptionsModel := new(schematicsv1.UpdatePolicyOptions)
				updatePolicyOptionsModel.PolicyID = core.StringPtr("testString")
				updatePolicyOptionsModel.Name = core.StringPtr("Agent1-DevWS")
				updatePolicyOptionsModel.Description = core.StringPtr("Policy for job execution of secured workspaces on agent1")
				updatePolicyOptionsModel.ResourceGroup = core.StringPtr("Default")
				updatePolicyOptionsModel.Tags = []string{"policy:secured-job"}
				updatePolicyOptionsModel.Location = core.StringPtr("us-south")
				updatePolicyOptionsModel.State = userStateModel
				updatePolicyOptionsModel.Kind = core.StringPtr("agent_assignment_policy")
				updatePolicyOptionsModel.Target = policyObjectsModel
				updatePolicyOptionsModel.Parameter = policyParameterModel
				updatePolicyOptionsModel.ScopedResources = []schematicsv1.ScopedResource{*scopedResourceModel}
				updatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := schematicsService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := schematicsService.UpdatePolicy(updatePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdatePolicyOptions model with no property values
				updatePolicyOptionsModelNew := new(schematicsv1.UpdatePolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = schematicsService.UpdatePolicy(updatePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdatePolicy successfully`, func() {
				schematicsService, serviceErr := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(schematicsService).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")

				// Construct an instance of the PolicyObjectSelector model
				policyObjectSelectorModel := new(schematicsv1.PolicyObjectSelector)
				policyObjectSelectorModel.Kind = core.StringPtr("workspace")
				policyObjectSelectorModel.Tags = []string{"testString"}
				policyObjectSelectorModel.ResourceGroups = []string{"testString"}
				policyObjectSelectorModel.Locations = []string{"us-south"}

				// Construct an instance of the PolicyObjects model
				policyObjectsModel := new(schematicsv1.PolicyObjects)
				policyObjectsModel.SelectorKind = core.StringPtr("ids")
				policyObjectsModel.SelectorIds = []string{"testString"}
				policyObjectsModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the AgentAssignmentPolicyParameter model
				agentAssignmentPolicyParameterModel := new(schematicsv1.AgentAssignmentPolicyParameter)
				agentAssignmentPolicyParameterModel.SelectorKind = core.StringPtr("ids")
				agentAssignmentPolicyParameterModel.SelectorIds = []string{"testString"}
				agentAssignmentPolicyParameterModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}

				// Construct an instance of the PolicyParameter model
				policyParameterModel := new(schematicsv1.PolicyParameter)
				policyParameterModel.AgentAssignmentPolicyParameter = agentAssignmentPolicyParameterModel

				// Construct an instance of the ScopedResource model
				scopedResourceModel := new(schematicsv1.ScopedResource)
				scopedResourceModel.Kind = core.StringPtr("workspace")
				scopedResourceModel.ID = core.StringPtr("testString")

				// Construct an instance of the UpdatePolicyOptions model
				updatePolicyOptionsModel := new(schematicsv1.UpdatePolicyOptions)
				updatePolicyOptionsModel.PolicyID = core.StringPtr("testString")
				updatePolicyOptionsModel.Name = core.StringPtr("Agent1-DevWS")
				updatePolicyOptionsModel.Description = core.StringPtr("Policy for job execution of secured workspaces on agent1")
				updatePolicyOptionsModel.ResourceGroup = core.StringPtr("Default")
				updatePolicyOptionsModel.Tags = []string{"policy:secured-job"}
				updatePolicyOptionsModel.Location = core.StringPtr("us-south")
				updatePolicyOptionsModel.State = userStateModel
				updatePolicyOptionsModel.Kind = core.StringPtr("agent_assignment_policy")
				updatePolicyOptionsModel.Target = policyObjectsModel
				updatePolicyOptionsModel.Parameter = policyParameterModel
				updatePolicyOptionsModel.ScopedResources = []schematicsv1.ScopedResource{*scopedResourceModel}
				updatePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := schematicsService.UpdatePolicy(updatePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Model constructor tests`, func() {
		Context(`Using a service client instance`, func() {
			schematicsService, _ := schematicsv1.NewSchematicsV1(&schematicsv1.SchematicsV1Options{
				URL:           "http://schematicsv1modelgenerator.com",
				Authenticator: &core.NoAuthAuthenticator{},
			})
			It(`Invoke NewAgent successfully`, func() {
				name := "MyDevAgent"
				agentLocation := "us-south"
				location := "us-south"
				profileID := "testString"
				_model, err := schematicsService.NewAgent(name, agentLocation, location, profileID)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewAgentData successfully`, func() {
				name := "MyDevAgent"
				resourceGroup := "Default"
				version := "v1.0.0"
				schematicsLocation := "us-south"
				agentLocation := "us-south"
				var agentInfrastructure *schematicsv1.AgentInfrastructure = nil
				_, err := schematicsService.NewAgentData(name, resourceGroup, version, schematicsLocation, agentLocation, agentInfrastructure)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewApplyWorkspaceCommandOptions successfully`, func() {
				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				Expect(workspaceActivityOptionsTemplateModel).ToNot(BeNil())
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}
				Expect(workspaceActivityOptionsTemplateModel.Target).To(Equal([]string{"testString"}))
				Expect(workspaceActivityOptionsTemplateModel.TfVars).To(Equal([]string{"testString"}))

				// Construct an instance of the ApplyWorkspaceCommandOptions model
				wID := "testString"
				refreshToken := "testString"
				applyWorkspaceCommandOptionsModel := schematicsService.NewApplyWorkspaceCommandOptions(wID, refreshToken)
				applyWorkspaceCommandOptionsModel.SetWID("testString")
				applyWorkspaceCommandOptionsModel.SetRefreshToken("testString")
				applyWorkspaceCommandOptionsModel.SetActionOptions(workspaceActivityOptionsTemplateModel)
				applyWorkspaceCommandOptionsModel.SetDelegatedToken("testString")
				applyWorkspaceCommandOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(applyWorkspaceCommandOptionsModel).ToNot(BeNil())
				Expect(applyWorkspaceCommandOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(applyWorkspaceCommandOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(applyWorkspaceCommandOptionsModel.ActionOptions).To(Equal(workspaceActivityOptionsTemplateModel))
				Expect(applyWorkspaceCommandOptionsModel.DelegatedToken).To(Equal(core.StringPtr("testString")))
				Expect(applyWorkspaceCommandOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewBlueprint successfully`, func() {
				name := "Toronto Dev Environtment"
				_model, err := schematicsService.NewBlueprint(name)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCreateActionOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				Expect(gitSourceModel).ToNot(BeNil())
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")
				Expect(gitSourceModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitBranch).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				Expect(catalogSourceModel).ToNot(BeNil())
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")
				Expect(catalogSourceModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.CatalogID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingTargetKind).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersionFlavourName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingProvisionerWorkingDirectory).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.DryRun).To(Equal(core.BoolPtr(true)))
				Expect(catalogSourceModel.OwningAccount).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemIconURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.LaunchURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(gitSourceModel))
				Expect(externalSourceModel.Catalog).To(Equal(catalogSourceModel))

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematicsv1.CredentialVariableMetadata)
				Expect(credentialVariableMetadataModel).ToNot(BeNil())
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")
				Expect(credentialVariableMetadataModel.Type).To(Equal(core.StringPtr("string")))
				Expect(credentialVariableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(credentialVariableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(credentialVariableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(credentialVariableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(credentialVariableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(credentialVariableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(credentialVariableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.Source).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematicsv1.CredentialVariableData)
				Expect(credentialVariableDataModel).ToNot(BeNil())
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel
				Expect(credentialVariableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(credentialVariableDataModel.Metadata).To(Equal(credentialVariableMetadataModel))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))

				// Construct an instance of the CreateActionOptions model
				createActionOptionsModel := schematicsService.NewCreateActionOptions()
				createActionOptionsModel.SetName("Stop Action")
				createActionOptionsModel.SetDescription("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				createActionOptionsModel.SetLocation("us-south")
				createActionOptionsModel.SetResourceGroup("testString")
				createActionOptionsModel.SetBastionConnectionType("ssh")
				createActionOptionsModel.SetInventoryConnectionType("ssh")
				createActionOptionsModel.SetTags([]string{"testString"})
				createActionOptionsModel.SetUserState(userStateModel)
				createActionOptionsModel.SetSourceReadmeURL("testString")
				createActionOptionsModel.SetSource(externalSourceModel)
				createActionOptionsModel.SetSourceType("local")
				createActionOptionsModel.SetCommandParameter("testString")
				createActionOptionsModel.SetInventory("testString")
				createActionOptionsModel.SetCredentials([]schematicsv1.CredentialVariableData{*credentialVariableDataModel})
				createActionOptionsModel.SetBastion(bastionResourceDefinitionModel)
				createActionOptionsModel.SetBastionCredential(credentialVariableDataModel)
				createActionOptionsModel.SetTargetsIni("testString")
				createActionOptionsModel.SetInputs([]schematicsv1.VariableData{*variableDataModel})
				createActionOptionsModel.SetOutputs([]schematicsv1.VariableData{*variableDataModel})
				createActionOptionsModel.SetSettings([]schematicsv1.VariableData{*variableDataModel})
				createActionOptionsModel.SetXGithubToken("testString")
				createActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createActionOptionsModel).ToNot(BeNil())
				Expect(createActionOptionsModel.Name).To(Equal(core.StringPtr("Stop Action")))
				Expect(createActionOptionsModel.Description).To(Equal(core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")))
				Expect(createActionOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(createActionOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(createActionOptionsModel.BastionConnectionType).To(Equal(core.StringPtr("ssh")))
				Expect(createActionOptionsModel.InventoryConnectionType).To(Equal(core.StringPtr("ssh")))
				Expect(createActionOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(createActionOptionsModel.UserState).To(Equal(userStateModel))
				Expect(createActionOptionsModel.SourceReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(createActionOptionsModel.Source).To(Equal(externalSourceModel))
				Expect(createActionOptionsModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(createActionOptionsModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(createActionOptionsModel.Inventory).To(Equal(core.StringPtr("testString")))
				Expect(createActionOptionsModel.Credentials).To(Equal([]schematicsv1.CredentialVariableData{*credentialVariableDataModel}))
				Expect(createActionOptionsModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(createActionOptionsModel.BastionCredential).To(Equal(credentialVariableDataModel))
				Expect(createActionOptionsModel.TargetsIni).To(Equal(core.StringPtr("testString")))
				Expect(createActionOptionsModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(createActionOptionsModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(createActionOptionsModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(createActionOptionsModel.XGithubToken).To(Equal(core.StringPtr("testString")))
				Expect(createActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateAgentDataOptions successfully`, func() {
				// Construct an instance of the AgentInfrastructure model
				agentInfrastructureModel := new(schematicsv1.AgentInfrastructure)
				Expect(agentInfrastructureModel).ToNot(BeNil())
				agentInfrastructureModel.InfraType = core.StringPtr("ibm_kubernetes")
				agentInfrastructureModel.ClusterID = core.StringPtr("testString")
				agentInfrastructureModel.ClusterResourceGroup = core.StringPtr("testString")
				agentInfrastructureModel.CosInstanceName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketRegion = core.StringPtr("testString")
				Expect(agentInfrastructureModel.InfraType).To(Equal(core.StringPtr("ibm_kubernetes")))
				Expect(agentInfrastructureModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(agentInfrastructureModel.ClusterResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(agentInfrastructureModel.CosInstanceName).To(Equal(core.StringPtr("testString")))
				Expect(agentInfrastructureModel.CosBucketName).To(Equal(core.StringPtr("testString")))
				Expect(agentInfrastructureModel.CosBucketRegion).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the AgentMetadataInfo model
				agentMetadataInfoModel := new(schematicsv1.AgentMetadataInfo)
				Expect(agentMetadataInfoModel).ToNot(BeNil())
				agentMetadataInfoModel.Name = core.StringPtr("purpose")
				agentMetadataInfoModel.Value = []string{"git", "terraform", "ansible"}
				Expect(agentMetadataInfoModel.Name).To(Equal(core.StringPtr("purpose")))
				Expect(agentMetadataInfoModel.Value).To(Equal([]string{"git", "terraform", "ansible"}))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				Expect(agentUserStateModel).ToNot(BeNil())
				agentUserStateModel.State = core.StringPtr("enable")
				Expect(agentUserStateModel.State).To(Equal(core.StringPtr("enable")))

				// Construct an instance of the AgentKPIData model
				agentKpiDataModel := new(schematicsv1.AgentKPIData)
				Expect(agentKpiDataModel).ToNot(BeNil())
				agentKpiDataModel.AvailabilityIndicator = core.StringPtr("available")
				agentKpiDataModel.LifecycleIndicator = core.StringPtr("consistent")
				agentKpiDataModel.PercentUsageIndicator = core.StringPtr("testString")
				agentKpiDataModel.ApplicationIndicators = []interface{}{"testString"}
				agentKpiDataModel.InfraIndicators = []interface{}{"testString"}
				Expect(agentKpiDataModel.AvailabilityIndicator).To(Equal(core.StringPtr("available")))
				Expect(agentKpiDataModel.LifecycleIndicator).To(Equal(core.StringPtr("consistent")))
				Expect(agentKpiDataModel.PercentUsageIndicator).To(Equal(core.StringPtr("testString")))
				Expect(agentKpiDataModel.ApplicationIndicators).To(Equal([]interface{}{"testString"}))
				Expect(agentKpiDataModel.InfraIndicators).To(Equal([]interface{}{"testString"}))

				// Construct an instance of the CreateAgentDataOptions model
				createAgentDataOptionsName := "MyDevAgent"
				createAgentDataOptionsResourceGroup := "Default"
				createAgentDataOptionsVersion := "v1.0.0"
				createAgentDataOptionsSchematicsLocation := "us-south"
				createAgentDataOptionsAgentLocation := "us-south"
				var createAgentDataOptionsAgentInfrastructure *schematicsv1.AgentInfrastructure = nil
				createAgentDataOptionsModel := schematicsService.NewCreateAgentDataOptions(createAgentDataOptionsName, createAgentDataOptionsResourceGroup, createAgentDataOptionsVersion, createAgentDataOptionsSchematicsLocation, createAgentDataOptionsAgentLocation, createAgentDataOptionsAgentInfrastructure)
				createAgentDataOptionsModel.SetName("MyDevAgent")
				createAgentDataOptionsModel.SetResourceGroup("Default")
				createAgentDataOptionsModel.SetVersion("v1.0.0")
				createAgentDataOptionsModel.SetSchematicsLocation("us-south")
				createAgentDataOptionsModel.SetAgentLocation("us-south")
				createAgentDataOptionsModel.SetAgentInfrastructure(agentInfrastructureModel)
				createAgentDataOptionsModel.SetDescription("Create Agent")
				createAgentDataOptionsModel.SetTags([]string{"testString"})
				createAgentDataOptionsModel.SetAgentMetadata([]schematicsv1.AgentMetadataInfo{*agentMetadataInfoModel})
				createAgentDataOptionsModel.SetAgentInputs([]schematicsv1.VariableData{*variableDataModel})
				createAgentDataOptionsModel.SetUserState(agentUserStateModel)
				createAgentDataOptionsModel.SetAgentKpi(agentKpiDataModel)
				createAgentDataOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createAgentDataOptionsModel).ToNot(BeNil())
				Expect(createAgentDataOptionsModel.Name).To(Equal(core.StringPtr("MyDevAgent")))
				Expect(createAgentDataOptionsModel.ResourceGroup).To(Equal(core.StringPtr("Default")))
				Expect(createAgentDataOptionsModel.Version).To(Equal(core.StringPtr("v1.0.0")))
				Expect(createAgentDataOptionsModel.SchematicsLocation).To(Equal(core.StringPtr("us-south")))
				Expect(createAgentDataOptionsModel.AgentLocation).To(Equal(core.StringPtr("us-south")))
				Expect(createAgentDataOptionsModel.AgentInfrastructure).To(Equal(agentInfrastructureModel))
				Expect(createAgentDataOptionsModel.Description).To(Equal(core.StringPtr("Create Agent")))
				Expect(createAgentDataOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(createAgentDataOptionsModel.AgentMetadata).To(Equal([]schematicsv1.AgentMetadataInfo{*agentMetadataInfoModel}))
				Expect(createAgentDataOptionsModel.AgentInputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(createAgentDataOptionsModel.UserState).To(Equal(agentUserStateModel))
				Expect(createAgentDataOptionsModel.AgentKpi).To(Equal(agentKpiDataModel))
				Expect(createAgentDataOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateBlueprintOptions successfully`, func() {
				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				Expect(gitSourceModel).ToNot(BeNil())
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")
				Expect(gitSourceModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitBranch).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				Expect(catalogSourceModel).ToNot(BeNil())
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")
				Expect(catalogSourceModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.CatalogID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingTargetKind).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersionFlavourName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingProvisionerWorkingDirectory).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.DryRun).To(Equal(core.BoolPtr(true)))
				Expect(catalogSourceModel.OwningAccount).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemIconURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.LaunchURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(gitSourceModel))
				Expect(externalSourceModel.Catalog).To(Equal(catalogSourceModel))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematicsv1.BlueprintConfigItem)
				Expect(blueprintConfigItemModel).ToNot(BeNil())
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				Expect(blueprintConfigItemModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(blueprintConfigItemModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(blueprintConfigItemModel.Source).To(Equal(externalSourceModel))
				Expect(blueprintConfigItemModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematicsv1.BlueprintFlow)
				Expect(blueprintFlowModel).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the CreateBlueprintOptions model
				createBlueprintOptionsName := "Toronto Dev Environtment"
				createBlueprintOptionsModel := schematicsService.NewCreateBlueprintOptions(createBlueprintOptionsName)
				createBlueprintOptionsModel.SetName("Toronto Dev Environtment")
				createBlueprintOptionsModel.SetSchemaVersion("1.0")
				createBlueprintOptionsModel.SetSource(externalSourceModel)
				createBlueprintOptionsModel.SetConfig([]schematicsv1.BlueprintConfigItem{*blueprintConfigItemModel})
				createBlueprintOptionsModel.SetDescription("Deploys dev environtment instance in Toronto Region")
				createBlueprintOptionsModel.SetResourceGroup("Default")
				createBlueprintOptionsModel.SetTags([]string{"blueprint:Tor-Dev"})
				createBlueprintOptionsModel.SetLocation("us-south")
				createBlueprintOptionsModel.SetInputs([]schematicsv1.VariableData{*variableDataModel})
				createBlueprintOptionsModel.SetSettings([]schematicsv1.VariableData{*variableDataModel})
				createBlueprintOptionsModel.SetFlow(blueprintFlowModel)
				createBlueprintOptionsModel.SetUserState(userStateModel)
				createBlueprintOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createBlueprintOptionsModel).ToNot(BeNil())
				Expect(createBlueprintOptionsModel.Name).To(Equal(core.StringPtr("Toronto Dev Environtment")))
				Expect(createBlueprintOptionsModel.SchemaVersion).To(Equal(core.StringPtr("1.0")))
				Expect(createBlueprintOptionsModel.Source).To(Equal(externalSourceModel))
				Expect(createBlueprintOptionsModel.Config).To(Equal([]schematicsv1.BlueprintConfigItem{*blueprintConfigItemModel}))
				Expect(createBlueprintOptionsModel.Description).To(Equal(core.StringPtr("Deploys dev environtment instance in Toronto Region")))
				Expect(createBlueprintOptionsModel.ResourceGroup).To(Equal(core.StringPtr("Default")))
				Expect(createBlueprintOptionsModel.Tags).To(Equal([]string{"blueprint:Tor-Dev"}))
				Expect(createBlueprintOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(createBlueprintOptionsModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(createBlueprintOptionsModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(createBlueprintOptionsModel.Flow).To(Equal(blueprintFlowModel))
				Expect(createBlueprintOptionsModel.UserState).To(Equal(userStateModel))
				Expect(createBlueprintOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInventoryOptions successfully`, func() {
				// Construct an instance of the CreateInventoryOptions model
				createInventoryOptionsModel := schematicsService.NewCreateInventoryOptions()
				createInventoryOptionsModel.SetName("testString")
				createInventoryOptionsModel.SetDescription("testString")
				createInventoryOptionsModel.SetLocation("us-south")
				createInventoryOptionsModel.SetResourceGroup("testString")
				createInventoryOptionsModel.SetInventoriesIni("testString")
				createInventoryOptionsModel.SetResourceQueries([]string{"testString"})
				createInventoryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInventoryOptionsModel).ToNot(BeNil())
				Expect(createInventoryOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(createInventoryOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(createInventoryOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(createInventoryOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(createInventoryOptionsModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(createInventoryOptionsModel.ResourceQueries).To(Equal([]string{"testString"}))
				Expect(createInventoryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateJobOptions successfully`, func() {
				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				Expect(jobStatusWorkitemModel).ToNot(BeNil())
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobStatusWorkitemModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkitemModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				Expect(jobStatusFlowModel).ToNot(BeNil())
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobStatusFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusFlowModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.Workitems).To(Equal([]schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}))
				Expect(jobStatusFlowModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				Expect(jobStatusTemplateModel).ToNot(BeNil())
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobStatusTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobStatusTemplateModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusTemplateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				Expect(jobStatusWorkspaceModel).ToNot(BeNil())
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobStatusWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkspaceModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.FlowStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusWorkspaceModel.TemplateStatus).To(Equal([]schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}))
				Expect(jobStatusWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				Expect(jobStatusActionModel).ToNot(BeNil())
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobStatusActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusActionModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.BastionStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.BastionStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.TargetsStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.TargetsStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				Expect(jobStatusSchematicsResourcesModel).ToNot(BeNil())
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobStatusSchematicsResourcesModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSchematicsResourcesModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.SchematicsResourceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				Expect(jobStatusSystemModel).ToNot(BeNil())
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobStatusSystemModel.SystemStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSystemModel.SystemStatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSystemModel.SchematicsResourceStatus).To(Equal([]schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}))
				Expect(jobStatusSystemModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				Expect(jobStatusModel).ToNot(BeNil())
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				Expect(jobStatusModel.PositionInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.TotalInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.WorkspaceJobStatus).To(Equal(jobStatusWorkspaceModel))
				Expect(jobStatusModel.ActionJobStatus).To(Equal(jobStatusActionModel))
				Expect(jobStatusModel.SystemJobStatus).To(Equal(jobStatusSystemModel))
				Expect(jobStatusModel.FlowJobStatus).To(Equal(jobStatusFlowModel))

				// Construct an instance of the CartOrderData model
				cartOrderDataModel := new(schematicsv1.CartOrderData)
				Expect(cartOrderDataModel).ToNot(BeNil())
				cartOrderDataModel.Name = core.StringPtr("testString")
				cartOrderDataModel.Value = core.StringPtr("testString")
				cartOrderDataModel.Type = core.StringPtr("testString")
				cartOrderDataModel.UsageKind = []string{"servicetags"}
				Expect(cartOrderDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(cartOrderDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(cartOrderDataModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(cartOrderDataModel.UsageKind).To(Equal([]string{"servicetags"}))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				Expect(jobDataTemplateModel).ToNot(BeNil())
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobDataTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobDataTemplateModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				Expect(jobDataWorkspaceModel).ToNot(BeNil())
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobDataWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.TemplateData).To(Equal([]schematicsv1.JobDataTemplate{*jobDataTemplateModel}))
				Expect(jobDataWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				Expect(inventoryResourceRecordModel).ToNot(BeNil())
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				Expect(inventoryResourceRecordModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(inventoryResourceRecordModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.ResourceQueries).To(Equal([]string{"testString"}))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				Expect(jobDataActionModel).ToNot(BeNil())
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				Expect(jobDataActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))
				Expect(jobDataActionModel.InventoryRecord).To(Equal(inventoryResourceRecordModel))
				Expect(jobDataActionModel.MaterializedInventory).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				Expect(jobDataSystemModel).ToNot(BeNil())
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobDataSystemModel.KeyID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataSystemModel.SchematicsResourceID).To(Equal([]string{"testString"}))
				Expect(jobDataSystemModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				Expect(gitSourceModel).ToNot(BeNil())
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")
				Expect(gitSourceModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitBranch).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				Expect(catalogSourceModel).ToNot(BeNil())
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")
				Expect(catalogSourceModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.CatalogID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingTargetKind).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersionFlavourName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingProvisionerWorkingDirectory).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.DryRun).To(Equal(core.BoolPtr(true)))
				Expect(catalogSourceModel.OwningAccount).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemIconURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.LaunchURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(gitSourceModel))
				Expect(externalSourceModel.Catalog).To(Equal(catalogSourceModel))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				Expect(jobDataWorkItemLastJobModel).ToNot(BeNil())
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				Expect(jobDataWorkItemLastJobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobDataWorkItemLastJobModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.JobStatus).To(Equal(core.StringPtr("job_pending")))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				Expect(jobDataWorkItemModel).ToNot(BeNil())
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobDataWorkItemModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.Layers).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(jobDataWorkItemModel.Source).To(Equal(externalSourceModel))
				Expect(jobDataWorkItemModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.LastJob).To(Equal(jobDataWorkItemLastJobModel))
				Expect(jobDataWorkItemModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				Expect(jobDataFlowModel).ToNot(BeNil())
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobDataFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.Workitems).To(Equal([]schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}))
				Expect(jobDataFlowModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				Expect(jobDataModel).ToNot(BeNil())
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				Expect(jobDataModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobDataModel.WorkspaceJobData).To(Equal(jobDataWorkspaceModel))
				Expect(jobDataModel.ActionJobData).To(Equal(jobDataActionModel))
				Expect(jobDataModel.SystemJobData).To(Equal(jobDataSystemModel))
				Expect(jobDataModel.FlowJobData).To(Equal(jobDataFlowModel))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)
				Expect(jobLogSummaryRepoDownloadJobModel).ToNot(BeNil())

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)
				Expect(jobLogSummaryWorkspaceJobModel).ToNot(BeNil())

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				Expect(jobLogSummaryWorkitemsModel).ToNot(BeNil())
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				Expect(jobLogSummaryWorkitemsModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.LogURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				Expect(jobLogSummaryFlowJobModel).ToNot(BeNil())
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				Expect(jobLogSummaryFlowJobModel.Workitems).To(Equal([]schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				Expect(jobLogSummaryActionJobRecapModel).ToNot(BeNil())
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				Expect(jobLogSummaryActionJobRecapModel.Target).To(Equal([]string{"testString"}))
				Expect(jobLogSummaryActionJobRecapModel.Ok).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Changed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Skipped).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Unreachable).To(Equal(core.Float64Ptr(float64(72.5))))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				Expect(jobLogSummaryActionJobModel).ToNot(BeNil())
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				Expect(jobLogSummaryActionJobModel.Recap).To(Equal(jobLogSummaryActionJobRecapModel))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				Expect(jobLogSummarySystemJobModel).ToNot(BeNil())
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				Expect(jobLogSummarySystemJobModel.Success).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				Expect(jobLogSummaryModel).ToNot(BeNil())
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				Expect(jobLogSummaryModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobLogSummaryModel.RepoDownloadJob).To(Equal(jobLogSummaryRepoDownloadJobModel))
				Expect(jobLogSummaryModel.WorkspaceJob).To(Equal(jobLogSummaryWorkspaceJobModel))
				Expect(jobLogSummaryModel.FlowJob).To(Equal(jobLogSummaryFlowJobModel))
				Expect(jobLogSummaryModel.ActionJob).To(Equal(jobLogSummaryActionJobModel))
				Expect(jobLogSummaryModel.SystemJob).To(Equal(jobLogSummarySystemJobModel))

				// Construct an instance of the AgentInfo model
				agentInfoModel := new(schematicsv1.AgentInfo)
				Expect(agentInfoModel).ToNot(BeNil())
				agentInfoModel.ID = core.StringPtr("testString")
				agentInfoModel.Name = core.StringPtr("testString")
				agentInfoModel.AssignmentPolicyID = core.StringPtr("testString")
				Expect(agentInfoModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(agentInfoModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(agentInfoModel.AssignmentPolicyID).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreateJobOptions model
				refreshToken := "testString"
				createJobOptionsModel := schematicsService.NewCreateJobOptions(refreshToken)
				createJobOptionsModel.SetRefreshToken("testString")
				createJobOptionsModel.SetCommandObject("workspace")
				createJobOptionsModel.SetCommandObjectID("testString")
				createJobOptionsModel.SetCommandName("workspace_plan")
				createJobOptionsModel.SetCommandParameter("testString")
				createJobOptionsModel.SetCommandOptions([]string{"testString"})
				createJobOptionsModel.SetInputs([]schematicsv1.VariableData{*variableDataModel})
				createJobOptionsModel.SetSettings([]schematicsv1.VariableData{*variableDataModel})
				createJobOptionsModel.SetTags([]string{"testString"})
				createJobOptionsModel.SetLocation("us-south")
				createJobOptionsModel.SetStatus(jobStatusModel)
				createJobOptionsModel.SetCartOrderData([]schematicsv1.CartOrderData{*cartOrderDataModel})
				createJobOptionsModel.SetData(jobDataModel)
				createJobOptionsModel.SetBastion(bastionResourceDefinitionModel)
				createJobOptionsModel.SetLogSummary(jobLogSummaryModel)
				createJobOptionsModel.SetAgent(agentInfoModel)
				createJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createJobOptionsModel).ToNot(BeNil())
				Expect(createJobOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(createJobOptionsModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(createJobOptionsModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(createJobOptionsModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(createJobOptionsModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(createJobOptionsModel.CommandOptions).To(Equal([]string{"testString"}))
				Expect(createJobOptionsModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(createJobOptionsModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(createJobOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(createJobOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(createJobOptionsModel.Status).To(Equal(jobStatusModel))
				Expect(createJobOptionsModel.CartOrderData).To(Equal([]schematicsv1.CartOrderData{*cartOrderDataModel}))
				Expect(createJobOptionsModel.Data).To(Equal(jobDataModel))
				Expect(createJobOptionsModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(createJobOptionsModel.LogSummary).To(Equal(jobLogSummaryModel))
				Expect(createJobOptionsModel.Agent).To(Equal(agentInfoModel))
				Expect(createJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreatePolicyOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the PolicyObjectSelector model
				policyObjectSelectorModel := new(schematicsv1.PolicyObjectSelector)
				Expect(policyObjectSelectorModel).ToNot(BeNil())
				policyObjectSelectorModel.Kind = core.StringPtr("workspace")
				policyObjectSelectorModel.Tags = []string{"testString"}
				policyObjectSelectorModel.ResourceGroups = []string{"testString"}
				policyObjectSelectorModel.Locations = []string{"us-south"}
				Expect(policyObjectSelectorModel.Kind).To(Equal(core.StringPtr("workspace")))
				Expect(policyObjectSelectorModel.Tags).To(Equal([]string{"testString"}))
				Expect(policyObjectSelectorModel.ResourceGroups).To(Equal([]string{"testString"}))
				Expect(policyObjectSelectorModel.Locations).To(Equal([]string{"us-south"}))

				// Construct an instance of the PolicyObjects model
				policyObjectsModel := new(schematicsv1.PolicyObjects)
				Expect(policyObjectsModel).ToNot(BeNil())
				policyObjectsModel.SelectorKind = core.StringPtr("ids")
				policyObjectsModel.SelectorIds = []string{"testString"}
				policyObjectsModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}
				Expect(policyObjectsModel.SelectorKind).To(Equal(core.StringPtr("ids")))
				Expect(policyObjectsModel.SelectorIds).To(Equal([]string{"testString"}))
				Expect(policyObjectsModel.SelectorScope).To(Equal([]schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}))

				// Construct an instance of the AgentAssignmentPolicyParameter model
				agentAssignmentPolicyParameterModel := new(schematicsv1.AgentAssignmentPolicyParameter)
				Expect(agentAssignmentPolicyParameterModel).ToNot(BeNil())
				agentAssignmentPolicyParameterModel.SelectorKind = core.StringPtr("ids")
				agentAssignmentPolicyParameterModel.SelectorIds = []string{"testString"}
				agentAssignmentPolicyParameterModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}
				Expect(agentAssignmentPolicyParameterModel.SelectorKind).To(Equal(core.StringPtr("ids")))
				Expect(agentAssignmentPolicyParameterModel.SelectorIds).To(Equal([]string{"testString"}))
				Expect(agentAssignmentPolicyParameterModel.SelectorScope).To(Equal([]schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}))

				// Construct an instance of the PolicyParameter model
				policyParameterModel := new(schematicsv1.PolicyParameter)
				Expect(policyParameterModel).ToNot(BeNil())
				policyParameterModel.AgentAssignmentPolicyParameter = agentAssignmentPolicyParameterModel
				Expect(policyParameterModel.AgentAssignmentPolicyParameter).To(Equal(agentAssignmentPolicyParameterModel))

				// Construct an instance of the ScopedResource model
				scopedResourceModel := new(schematicsv1.ScopedResource)
				Expect(scopedResourceModel).ToNot(BeNil())
				scopedResourceModel.Kind = core.StringPtr("workspace")
				scopedResourceModel.ID = core.StringPtr("testString")
				Expect(scopedResourceModel.Kind).To(Equal(core.StringPtr("workspace")))
				Expect(scopedResourceModel.ID).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CreatePolicyOptions model
				createPolicyOptionsModel := schematicsService.NewCreatePolicyOptions()
				createPolicyOptionsModel.SetName("Agent1-DevWS")
				createPolicyOptionsModel.SetDescription("Policy for job execution of secured workspaces on agent1")
				createPolicyOptionsModel.SetResourceGroup("Default")
				createPolicyOptionsModel.SetTags([]string{"policy:secured-job"})
				createPolicyOptionsModel.SetLocation("us-south")
				createPolicyOptionsModel.SetState(userStateModel)
				createPolicyOptionsModel.SetKind("agent_assignment_policy")
				createPolicyOptionsModel.SetTarget(policyObjectsModel)
				createPolicyOptionsModel.SetParameter(policyParameterModel)
				createPolicyOptionsModel.SetScopedResources([]schematicsv1.ScopedResource{*scopedResourceModel})
				createPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createPolicyOptionsModel).ToNot(BeNil())
				Expect(createPolicyOptionsModel.Name).To(Equal(core.StringPtr("Agent1-DevWS")))
				Expect(createPolicyOptionsModel.Description).To(Equal(core.StringPtr("Policy for job execution of secured workspaces on agent1")))
				Expect(createPolicyOptionsModel.ResourceGroup).To(Equal(core.StringPtr("Default")))
				Expect(createPolicyOptionsModel.Tags).To(Equal([]string{"policy:secured-job"}))
				Expect(createPolicyOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(createPolicyOptionsModel.State).To(Equal(userStateModel))
				Expect(createPolicyOptionsModel.Kind).To(Equal(core.StringPtr("agent_assignment_policy")))
				Expect(createPolicyOptionsModel.Target).To(Equal(policyObjectsModel))
				Expect(createPolicyOptionsModel.Parameter).To(Equal(policyParameterModel))
				Expect(createPolicyOptionsModel.ScopedResources).To(Equal([]schematicsv1.ScopedResource{*scopedResourceModel}))
				Expect(createPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateResourceQueryOptions successfully`, func() {
				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				Expect(resourceQueryParamModel).ToNot(BeNil())
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")
				Expect(resourceQueryParamModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(resourceQueryParamModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(resourceQueryParamModel.Description).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				Expect(resourceQueryModel).ToNot(BeNil())
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}
				Expect(resourceQueryModel.QueryType).To(Equal(core.StringPtr("workspaces")))
				Expect(resourceQueryModel.QueryCondition).To(Equal([]schematicsv1.ResourceQueryParam{*resourceQueryParamModel}))
				Expect(resourceQueryModel.QuerySelect).To(Equal([]string{"testString"}))

				// Construct an instance of the CreateResourceQueryOptions model
				createResourceQueryOptionsModel := schematicsService.NewCreateResourceQueryOptions()
				createResourceQueryOptionsModel.SetType("vsi")
				createResourceQueryOptionsModel.SetName("testString")
				createResourceQueryOptionsModel.SetQueries([]schematicsv1.ResourceQuery{*resourceQueryModel})
				createResourceQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createResourceQueryOptionsModel).ToNot(BeNil())
				Expect(createResourceQueryOptionsModel.Type).To(Equal(core.StringPtr("vsi")))
				Expect(createResourceQueryOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(createResourceQueryOptionsModel.Queries).To(Equal([]schematicsv1.ResourceQuery{*resourceQueryModel}))
				Expect(createResourceQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateWorkspaceDeletionJobOptions successfully`, func() {
				// Construct an instance of the CreateWorkspaceDeletionJobOptions model
				refreshToken := "testString"
				createWorkspaceDeletionJobOptionsModel := schematicsService.NewCreateWorkspaceDeletionJobOptions(refreshToken)
				createWorkspaceDeletionJobOptionsModel.SetRefreshToken("testString")
				createWorkspaceDeletionJobOptionsModel.SetJob("testString")
				createWorkspaceDeletionJobOptionsModel.SetVersion("testString")
				createWorkspaceDeletionJobOptionsModel.SetWorkspaces([]string{"testString"})
				createWorkspaceDeletionJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createWorkspaceDeletionJobOptionsModel).ToNot(BeNil())
				Expect(createWorkspaceDeletionJobOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceDeletionJobOptionsModel.Job).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceDeletionJobOptionsModel.Version).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceDeletionJobOptionsModel.Workspaces).To(Equal([]string{"testString"}))
				Expect(createWorkspaceDeletionJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateWorkspaceOptions successfully`, func() {
				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				Expect(serviceExtensionsModel).ToNot(BeNil())
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")
				Expect(serviceExtensionsModel.Name).To(Equal(core.StringPtr("flavor")))
				Expect(serviceExtensionsModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(serviceExtensionsModel.Type).To(Equal(core.StringPtr("string")))

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				Expect(catalogRefModel).ToNot(BeNil())
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}
				Expect(catalogRefModel.DryRun).To(Equal(core.BoolPtr(true)))
				Expect(catalogRefModel.OwningAccount).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemIconURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemID).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemName).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.LaunchURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ServiceExtensions).To(Equal([]schematicsv1.ServiceExtensions{*serviceExtensionsModel}))

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				Expect(dependenciesModel).ToNot(BeNil())
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}
				Expect(dependenciesModel.Parents).To(Equal([]string{"testString"}))
				Expect(dependenciesModel.Children).To(Equal([]string{"testString"}))

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				Expect(sharedTargetDataModel).ToNot(BeNil())
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")
				Expect(sharedTargetDataModel.ClusterCreatedOn).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterName).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterType).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.EntitlementKeys).To(Equal([]map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(sharedTargetDataModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.Region).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.WorkerCount).To(Equal(core.Int64Ptr(int64(26))))
				Expect(sharedTargetDataModel.WorkerMachineType).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				Expect(environmentValuesMetadataModel).ToNot(BeNil())
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)
				Expect(environmentValuesMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(environmentValuesMetadataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(environmentValuesMetadataModel.Secure).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				Expect(injectTerraformTemplateInnerTftParametersItemModel).ToNot(BeNil())
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")
				Expect(injectTerraformTemplateInnerTftParametersItemModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerTftParametersItemModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				Expect(injectTerraformTemplateInnerModel).ToNot(BeNil())
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}
				Expect(injectTerraformTemplateInnerModel.TftGitURL).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerModel.TftGitToken).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerModel.TftPrefix).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerModel.InjectionType).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerModel.TftName).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerModel.TftParameters).To(Equal([]schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}))

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				Expect(workspaceVariableRequestModel).ToNot(BeNil())
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")
				Expect(workspaceVariableRequestModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(workspaceVariableRequestModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(workspaceVariableRequestModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				Expect(templateSourceDataRequestModel).ToNot(BeNil())
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}
				Expect(templateSourceDataRequestModel.EnvValues).To(Equal([]map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(templateSourceDataRequestModel.EnvValuesMetadata).To(Equal([]schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}))
				Expect(templateSourceDataRequestModel.Folder).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Compact).To(Equal(core.BoolPtr(true)))
				Expect(templateSourceDataRequestModel.InitStateFile).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Injectors).To(Equal([]schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}))
				Expect(templateSourceDataRequestModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.UninstallScriptName).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Values).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.ValuesMetadata).To(Equal([]map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(templateSourceDataRequestModel.Variablestore).To(Equal([]schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}))

				// Construct an instance of the TemplateRepoRequest model
				templateRepoRequestModel := new(schematicsv1.TemplateRepoRequest)
				Expect(templateRepoRequestModel).ToNot(BeNil())
				templateRepoRequestModel.Branch = core.StringPtr("testString")
				templateRepoRequestModel.Release = core.StringPtr("testString")
				templateRepoRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoRequestModel.URL = core.StringPtr("testString")
				Expect(templateRepoRequestModel.Branch).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoRequestModel.Release).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoRequestModel.RepoShaValue).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoRequestModel.RepoURL).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoRequestModel.URL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the WorkspaceStatusRequest model
				workspaceStatusRequestModel := new(schematicsv1.WorkspaceStatusRequest)
				Expect(workspaceStatusRequestModel).ToNot(BeNil())
				workspaceStatusRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(workspaceStatusRequestModel.Frozen).To(Equal(core.BoolPtr(true)))
				Expect(workspaceStatusRequestModel.FrozenAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))
				Expect(workspaceStatusRequestModel.FrozenBy).To(Equal(core.StringPtr("testString")))
				Expect(workspaceStatusRequestModel.Locked).To(Equal(core.BoolPtr(true)))
				Expect(workspaceStatusRequestModel.LockedBy).To(Equal(core.StringPtr("testString")))
				Expect(workspaceStatusRequestModel.LockedTime).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the CreateWorkspaceOptions model
				createWorkspaceOptionsModel := schematicsService.NewCreateWorkspaceOptions()
				createWorkspaceOptionsModel.SetAppliedShareddataIds([]string{"testString"})
				createWorkspaceOptionsModel.SetCatalogRef(catalogRefModel)
				createWorkspaceOptionsModel.SetDependencies(dependenciesModel)
				createWorkspaceOptionsModel.SetDescription("testString")
				createWorkspaceOptionsModel.SetLocation("testString")
				createWorkspaceOptionsModel.SetName("testString")
				createWorkspaceOptionsModel.SetResourceGroup("testString")
				createWorkspaceOptionsModel.SetSharedData(sharedTargetDataModel)
				createWorkspaceOptionsModel.SetTags([]string{"testString"})
				createWorkspaceOptionsModel.SetTemplateData([]schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel})
				createWorkspaceOptionsModel.SetTemplateRef("testString")
				createWorkspaceOptionsModel.SetTemplateRepo(templateRepoRequestModel)
				createWorkspaceOptionsModel.SetType([]string{"testString"})
				createWorkspaceOptionsModel.SetWorkspaceStatus(workspaceStatusRequestModel)
				createWorkspaceOptionsModel.SetAgentID("testString")
				createWorkspaceOptionsModel.SetXGithubToken("testString")
				createWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createWorkspaceOptionsModel).ToNot(BeNil())
				Expect(createWorkspaceOptionsModel.AppliedShareddataIds).To(Equal([]string{"testString"}))
				Expect(createWorkspaceOptionsModel.CatalogRef).To(Equal(catalogRefModel))
				Expect(createWorkspaceOptionsModel.Dependencies).To(Equal(dependenciesModel))
				Expect(createWorkspaceOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceOptionsModel.SharedData).To(Equal(sharedTargetDataModel))
				Expect(createWorkspaceOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(createWorkspaceOptionsModel.TemplateData).To(Equal([]schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}))
				Expect(createWorkspaceOptionsModel.TemplateRef).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceOptionsModel.TemplateRepo).To(Equal(templateRepoRequestModel))
				Expect(createWorkspaceOptionsModel.Type).To(Equal([]string{"testString"}))
				Expect(createWorkspaceOptionsModel.WorkspaceStatus).To(Equal(workspaceStatusRequestModel))
				Expect(createWorkspaceOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceOptionsModel.XGithubToken).To(Equal(core.StringPtr("testString")))
				Expect(createWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteActionOptions successfully`, func() {
				// Construct an instance of the DeleteActionOptions model
				actionID := "testString"
				deleteActionOptionsModel := schematicsService.NewDeleteActionOptions(actionID)
				deleteActionOptionsModel.SetActionID("testString")
				deleteActionOptionsModel.SetForce(true)
				deleteActionOptionsModel.SetPropagate(true)
				deleteActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteActionOptionsModel).ToNot(BeNil())
				Expect(deleteActionOptionsModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(deleteActionOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteActionOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteAgentDataOptions successfully`, func() {
				// Construct an instance of the DeleteAgentDataOptions model
				agentID := "testString"
				deleteAgentDataOptionsModel := schematicsService.NewDeleteAgentDataOptions(agentID)
				deleteAgentDataOptionsModel.SetAgentID("testString")
				deleteAgentDataOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteAgentDataOptionsModel).ToNot(BeNil())
				Expect(deleteAgentDataOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(deleteAgentDataOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteAgentOptions successfully`, func() {
				// Construct an instance of the DeleteAgentOptions model
				agentID := "testString"
				deleteAgentOptionsModel := schematicsService.NewDeleteAgentOptions(agentID)
				deleteAgentOptionsModel.SetAgentID("testString")
				deleteAgentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteAgentOptionsModel).ToNot(BeNil())
				Expect(deleteAgentOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(deleteAgentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteBlueprintOptions successfully`, func() {
				// Construct an instance of the DeleteBlueprintOptions model
				blueprintID := "testString"
				deleteBlueprintOptionsModel := schematicsService.NewDeleteBlueprintOptions(blueprintID)
				deleteBlueprintOptionsModel.SetBlueprintID("testString")
				deleteBlueprintOptionsModel.SetProfile("ids")
				deleteBlueprintOptionsModel.SetDestroy(true)
				deleteBlueprintOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteBlueprintOptionsModel).ToNot(BeNil())
				Expect(deleteBlueprintOptionsModel.BlueprintID).To(Equal(core.StringPtr("testString")))
				Expect(deleteBlueprintOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(deleteBlueprintOptionsModel.Destroy).To(Equal(core.BoolPtr(true)))
				Expect(deleteBlueprintOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInventoryOptions successfully`, func() {
				// Construct an instance of the DeleteInventoryOptions model
				inventoryID := "testString"
				deleteInventoryOptionsModel := schematicsService.NewDeleteInventoryOptions(inventoryID)
				deleteInventoryOptionsModel.SetInventoryID("testString")
				deleteInventoryOptionsModel.SetForce(true)
				deleteInventoryOptionsModel.SetPropagate(true)
				deleteInventoryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInventoryOptionsModel).ToNot(BeNil())
				Expect(deleteInventoryOptionsModel.InventoryID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInventoryOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteInventoryOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteInventoryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteJobOptions successfully`, func() {
				// Construct an instance of the DeleteJobOptions model
				jobID := "testString"
				refreshToken := "testString"
				deleteJobOptionsModel := schematicsService.NewDeleteJobOptions(jobID, refreshToken)
				deleteJobOptionsModel.SetJobID("testString")
				deleteJobOptionsModel.SetRefreshToken("testString")
				deleteJobOptionsModel.SetForce(true)
				deleteJobOptionsModel.SetPropagate(true)
				deleteJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteJobOptionsModel).ToNot(BeNil())
				Expect(deleteJobOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(deleteJobOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(deleteJobOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteJobOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeletePolicyOptions successfully`, func() {
				// Construct an instance of the DeletePolicyOptions model
				policyID := "testString"
				deletePolicyOptionsModel := schematicsService.NewDeletePolicyOptions(policyID)
				deletePolicyOptionsModel.SetPolicyID("testString")
				deletePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deletePolicyOptionsModel).ToNot(BeNil())
				Expect(deletePolicyOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(deletePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteResourcesQueryOptions successfully`, func() {
				// Construct an instance of the DeleteResourcesQueryOptions model
				queryID := "testString"
				deleteResourcesQueryOptionsModel := schematicsService.NewDeleteResourcesQueryOptions(queryID)
				deleteResourcesQueryOptionsModel.SetQueryID("testString")
				deleteResourcesQueryOptionsModel.SetForce(true)
				deleteResourcesQueryOptionsModel.SetPropagate(true)
				deleteResourcesQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteResourcesQueryOptionsModel).ToNot(BeNil())
				Expect(deleteResourcesQueryOptionsModel.QueryID).To(Equal(core.StringPtr("testString")))
				Expect(deleteResourcesQueryOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deleteResourcesQueryOptionsModel.Propagate).To(Equal(core.BoolPtr(true)))
				Expect(deleteResourcesQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteWorkspaceActivityOptions successfully`, func() {
				// Construct an instance of the DeleteWorkspaceActivityOptions model
				wID := "testString"
				activityID := "testString"
				deleteWorkspaceActivityOptionsModel := schematicsService.NewDeleteWorkspaceActivityOptions(wID, activityID)
				deleteWorkspaceActivityOptionsModel.SetWID("testString")
				deleteWorkspaceActivityOptionsModel.SetActivityID("testString")
				deleteWorkspaceActivityOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteWorkspaceActivityOptionsModel).ToNot(BeNil())
				Expect(deleteWorkspaceActivityOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(deleteWorkspaceActivityOptionsModel.ActivityID).To(Equal(core.StringPtr("testString")))
				Expect(deleteWorkspaceActivityOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteWorkspaceOptions successfully`, func() {
				// Construct an instance of the DeleteWorkspaceOptions model
				refreshToken := "testString"
				wID := "testString"
				deleteWorkspaceOptionsModel := schematicsService.NewDeleteWorkspaceOptions(refreshToken, wID)
				deleteWorkspaceOptionsModel.SetRefreshToken("testString")
				deleteWorkspaceOptionsModel.SetWID("testString")
				deleteWorkspaceOptionsModel.SetDestroyResources("testString")
				deleteWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteWorkspaceOptionsModel).ToNot(BeNil())
				Expect(deleteWorkspaceOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(deleteWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(deleteWorkspaceOptionsModel.DestroyResources).To(Equal(core.StringPtr("testString")))
				Expect(deleteWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeployAgentJobOptions successfully`, func() {
				// Construct an instance of the DeployAgentJobOptions model
				agentID := "testString"
				deployAgentJobOptionsModel := schematicsService.NewDeployAgentJobOptions(agentID)
				deployAgentJobOptionsModel.SetAgentID("testString")
				deployAgentJobOptionsModel.SetForce(true)
				deployAgentJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deployAgentJobOptionsModel).ToNot(BeNil())
				Expect(deployAgentJobOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(deployAgentJobOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(deployAgentJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDestroyWorkspaceCommandOptions successfully`, func() {
				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				Expect(workspaceActivityOptionsTemplateModel).ToNot(BeNil())
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}
				Expect(workspaceActivityOptionsTemplateModel.Target).To(Equal([]string{"testString"}))
				Expect(workspaceActivityOptionsTemplateModel.TfVars).To(Equal([]string{"testString"}))

				// Construct an instance of the DestroyWorkspaceCommandOptions model
				wID := "testString"
				refreshToken := "testString"
				destroyWorkspaceCommandOptionsModel := schematicsService.NewDestroyWorkspaceCommandOptions(wID, refreshToken)
				destroyWorkspaceCommandOptionsModel.SetWID("testString")
				destroyWorkspaceCommandOptionsModel.SetRefreshToken("testString")
				destroyWorkspaceCommandOptionsModel.SetActionOptions(workspaceActivityOptionsTemplateModel)
				destroyWorkspaceCommandOptionsModel.SetDelegatedToken("testString")
				destroyWorkspaceCommandOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(destroyWorkspaceCommandOptionsModel).ToNot(BeNil())
				Expect(destroyWorkspaceCommandOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(destroyWorkspaceCommandOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(destroyWorkspaceCommandOptionsModel.ActionOptions).To(Equal(workspaceActivityOptionsTemplateModel))
				Expect(destroyWorkspaceCommandOptionsModel.DelegatedToken).To(Equal(core.StringPtr("testString")))
				Expect(destroyWorkspaceCommandOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewExecuteResourceQueryOptions successfully`, func() {
				// Construct an instance of the ExecuteResourceQueryOptions model
				queryID := "testString"
				executeResourceQueryOptionsModel := schematicsService.NewExecuteResourceQueryOptions(queryID)
				executeResourceQueryOptionsModel.SetQueryID("testString")
				executeResourceQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(executeResourceQueryOptionsModel).ToNot(BeNil())
				Expect(executeResourceQueryOptionsModel.QueryID).To(Equal(core.StringPtr("testString")))
				Expect(executeResourceQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewExternalSource successfully`, func() {
				sourceType := "local"
				_model, err := schematicsService.NewExternalSource(sourceType)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewGetActionOptions successfully`, func() {
				// Construct an instance of the GetActionOptions model
				actionID := "testString"
				getActionOptionsModel := schematicsService.NewGetActionOptions(actionID)
				getActionOptionsModel.SetActionID("testString")
				getActionOptionsModel.SetProfile("summary")
				getActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getActionOptionsModel).ToNot(BeNil())
				Expect(getActionOptionsModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(getActionOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAgentDataOptions successfully`, func() {
				// Construct an instance of the GetAgentDataOptions model
				agentID := "testString"
				getAgentDataOptionsModel := schematicsService.NewGetAgentDataOptions(agentID)
				getAgentDataOptionsModel.SetAgentID("testString")
				getAgentDataOptionsModel.SetProfile("summary")
				getAgentDataOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAgentDataOptionsModel).ToNot(BeNil())
				Expect(getAgentDataOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(getAgentDataOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getAgentDataOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAgentOptions successfully`, func() {
				// Construct an instance of the GetAgentOptions model
				agentID := "testString"
				getAgentOptionsModel := schematicsService.NewGetAgentOptions(agentID)
				getAgentOptionsModel.SetAgentID("testString")
				getAgentOptionsModel.SetProfile("summary")
				getAgentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAgentOptionsModel).ToNot(BeNil())
				Expect(getAgentOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(getAgentOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getAgentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetAllWorkspaceInputsOptions successfully`, func() {
				// Construct an instance of the GetAllWorkspaceInputsOptions model
				wID := "testString"
				getAllWorkspaceInputsOptionsModel := schematicsService.NewGetAllWorkspaceInputsOptions(wID)
				getAllWorkspaceInputsOptionsModel.SetWID("testString")
				getAllWorkspaceInputsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getAllWorkspaceInputsOptionsModel).ToNot(BeNil())
				Expect(getAllWorkspaceInputsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getAllWorkspaceInputsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetBlueprintOptions successfully`, func() {
				// Construct an instance of the GetBlueprintOptions model
				blueprintID := "testString"
				getBlueprintOptionsModel := schematicsService.NewGetBlueprintOptions(blueprintID)
				getBlueprintOptionsModel.SetBlueprintID("testString")
				getBlueprintOptionsModel.SetProfile("ids")
				getBlueprintOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getBlueprintOptionsModel).ToNot(BeNil())
				Expect(getBlueprintOptionsModel.BlueprintID).To(Equal(core.StringPtr("testString")))
				Expect(getBlueprintOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(getBlueprintOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDeployAgentJobOptions successfully`, func() {
				// Construct an instance of the GetDeployAgentJobOptions model
				agentID := "testString"
				getDeployAgentJobOptionsModel := schematicsService.NewGetDeployAgentJobOptions(agentID)
				getDeployAgentJobOptionsModel.SetAgentID("testString")
				getDeployAgentJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDeployAgentJobOptionsModel).ToNot(BeNil())
				Expect(getDeployAgentJobOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(getDeployAgentJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetHealthCheckAgentJobOptions successfully`, func() {
				// Construct an instance of the GetHealthCheckAgentJobOptions model
				agentID := "testString"
				getHealthCheckAgentJobOptionsModel := schematicsService.NewGetHealthCheckAgentJobOptions(agentID)
				getHealthCheckAgentJobOptionsModel.SetAgentID("testString")
				getHealthCheckAgentJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getHealthCheckAgentJobOptionsModel).ToNot(BeNil())
				Expect(getHealthCheckAgentJobOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(getHealthCheckAgentJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInventoryOptions successfully`, func() {
				// Construct an instance of the GetInventoryOptions model
				inventoryID := "testString"
				getInventoryOptionsModel := schematicsService.NewGetInventoryOptions(inventoryID)
				getInventoryOptionsModel.SetInventoryID("testString")
				getInventoryOptionsModel.SetProfile("summary")
				getInventoryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInventoryOptionsModel).ToNot(BeNil())
				Expect(getInventoryOptionsModel.InventoryID).To(Equal(core.StringPtr("testString")))
				Expect(getInventoryOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getInventoryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetJobFilesOptions successfully`, func() {
				// Construct an instance of the GetJobFilesOptions model
				jobID := "testString"
				fileType := "template_repo"
				getJobFilesOptionsModel := schematicsService.NewGetJobFilesOptions(jobID, fileType)
				getJobFilesOptionsModel.SetJobID("testString")
				getJobFilesOptionsModel.SetFileType("template_repo")
				getJobFilesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getJobFilesOptionsModel).ToNot(BeNil())
				Expect(getJobFilesOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(getJobFilesOptionsModel.FileType).To(Equal(core.StringPtr("template_repo")))
				Expect(getJobFilesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetJobOptions successfully`, func() {
				// Construct an instance of the GetJobOptions model
				jobID := "testString"
				getJobOptionsModel := schematicsService.NewGetJobOptions(jobID)
				getJobOptionsModel.SetJobID("testString")
				getJobOptionsModel.SetProfile("summary")
				getJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getJobOptionsModel).ToNot(BeNil())
				Expect(getJobOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(getJobOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetKmsSettingsOptions successfully`, func() {
				// Construct an instance of the GetKmsSettingsOptions model
				location := "testString"
				getKmsSettingsOptionsModel := schematicsService.NewGetKmsSettingsOptions(location)
				getKmsSettingsOptionsModel.SetLocation("testString")
				getKmsSettingsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getKmsSettingsOptionsModel).ToNot(BeNil())
				Expect(getKmsSettingsOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(getKmsSettingsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetPolicyOptions successfully`, func() {
				// Construct an instance of the GetPolicyOptions model
				policyID := "testString"
				getPolicyOptionsModel := schematicsService.NewGetPolicyOptions(policyID)
				getPolicyOptionsModel.SetPolicyID("testString")
				getPolicyOptionsModel.SetProfile("summary")
				getPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getPolicyOptionsModel).ToNot(BeNil())
				Expect(getPolicyOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(getPolicyOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(getPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetPrsAgentJobOptions successfully`, func() {
				// Construct an instance of the GetPrsAgentJobOptions model
				agentID := "testString"
				getPrsAgentJobOptionsModel := schematicsService.NewGetPrsAgentJobOptions(agentID)
				getPrsAgentJobOptionsModel.SetAgentID("testString")
				getPrsAgentJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getPrsAgentJobOptionsModel).ToNot(BeNil())
				Expect(getPrsAgentJobOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(getPrsAgentJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetResourcesQueryOptions successfully`, func() {
				// Construct an instance of the GetResourcesQueryOptions model
				queryID := "testString"
				getResourcesQueryOptionsModel := schematicsService.NewGetResourcesQueryOptions(queryID)
				getResourcesQueryOptionsModel.SetQueryID("testString")
				getResourcesQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getResourcesQueryOptionsModel).ToNot(BeNil())
				Expect(getResourcesQueryOptionsModel.QueryID).To(Equal(core.StringPtr("testString")))
				Expect(getResourcesQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSchematicsVersionOptions successfully`, func() {
				// Construct an instance of the GetSchematicsVersionOptions model
				getSchematicsVersionOptionsModel := schematicsService.NewGetSchematicsVersionOptions()
				getSchematicsVersionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSchematicsVersionOptionsModel).ToNot(BeNil())
				Expect(getSchematicsVersionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTemplateActivityLogOptions successfully`, func() {
				// Construct an instance of the GetTemplateActivityLogOptions model
				wID := "testString"
				tID := "testString"
				activityID := "testString"
				getTemplateActivityLogOptionsModel := schematicsService.NewGetTemplateActivityLogOptions(wID, tID, activityID)
				getTemplateActivityLogOptionsModel.SetWID("testString")
				getTemplateActivityLogOptionsModel.SetTID("testString")
				getTemplateActivityLogOptionsModel.SetActivityID("testString")
				getTemplateActivityLogOptionsModel.SetLogTfCmd(true)
				getTemplateActivityLogOptionsModel.SetLogTfPrefix(true)
				getTemplateActivityLogOptionsModel.SetLogTfNullResource(true)
				getTemplateActivityLogOptionsModel.SetLogTfAnsible(true)
				getTemplateActivityLogOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTemplateActivityLogOptionsModel).ToNot(BeNil())
				Expect(getTemplateActivityLogOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateActivityLogOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateActivityLogOptionsModel.ActivityID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateActivityLogOptionsModel.LogTfCmd).To(Equal(core.BoolPtr(true)))
				Expect(getTemplateActivityLogOptionsModel.LogTfPrefix).To(Equal(core.BoolPtr(true)))
				Expect(getTemplateActivityLogOptionsModel.LogTfNullResource).To(Equal(core.BoolPtr(true)))
				Expect(getTemplateActivityLogOptionsModel.LogTfAnsible).To(Equal(core.BoolPtr(true)))
				Expect(getTemplateActivityLogOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTemplateLogsOptions successfully`, func() {
				// Construct an instance of the GetTemplateLogsOptions model
				wID := "testString"
				tID := "testString"
				getTemplateLogsOptionsModel := schematicsService.NewGetTemplateLogsOptions(wID, tID)
				getTemplateLogsOptionsModel.SetWID("testString")
				getTemplateLogsOptionsModel.SetTID("testString")
				getTemplateLogsOptionsModel.SetLogTfCmd(true)
				getTemplateLogsOptionsModel.SetLogTfPrefix(true)
				getTemplateLogsOptionsModel.SetLogTfNullResource(true)
				getTemplateLogsOptionsModel.SetLogTfAnsible(true)
				getTemplateLogsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTemplateLogsOptionsModel).ToNot(BeNil())
				Expect(getTemplateLogsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateLogsOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(getTemplateLogsOptionsModel.LogTfCmd).To(Equal(core.BoolPtr(true)))
				Expect(getTemplateLogsOptionsModel.LogTfPrefix).To(Equal(core.BoolPtr(true)))
				Expect(getTemplateLogsOptionsModel.LogTfNullResource).To(Equal(core.BoolPtr(true)))
				Expect(getTemplateLogsOptionsModel.LogTfAnsible).To(Equal(core.BoolPtr(true)))
				Expect(getTemplateLogsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceActivityLogsOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceActivityLogsOptions model
				wID := "testString"
				activityID := "testString"
				getWorkspaceActivityLogsOptionsModel := schematicsService.NewGetWorkspaceActivityLogsOptions(wID, activityID)
				getWorkspaceActivityLogsOptionsModel.SetWID("testString")
				getWorkspaceActivityLogsOptionsModel.SetActivityID("testString")
				getWorkspaceActivityLogsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceActivityLogsOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceActivityLogsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceActivityLogsOptionsModel.ActivityID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceActivityLogsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceActivityOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceActivityOptions model
				wID := "testString"
				activityID := "testString"
				getWorkspaceActivityOptionsModel := schematicsService.NewGetWorkspaceActivityOptions(wID, activityID)
				getWorkspaceActivityOptionsModel.SetWID("testString")
				getWorkspaceActivityOptionsModel.SetActivityID("testString")
				getWorkspaceActivityOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceActivityOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceActivityOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceActivityOptionsModel.ActivityID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceActivityOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceDeletionJobStatusOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceDeletionJobStatusOptions model
				wjID := "testString"
				getWorkspaceDeletionJobStatusOptionsModel := schematicsService.NewGetWorkspaceDeletionJobStatusOptions(wjID)
				getWorkspaceDeletionJobStatusOptionsModel.SetWjID("testString")
				getWorkspaceDeletionJobStatusOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceDeletionJobStatusOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceDeletionJobStatusOptionsModel.WjID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceDeletionJobStatusOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceInputMetadataOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceInputMetadataOptions model
				wID := "testString"
				tID := "testString"
				getWorkspaceInputMetadataOptionsModel := schematicsService.NewGetWorkspaceInputMetadataOptions(wID, tID)
				getWorkspaceInputMetadataOptionsModel.SetWID("testString")
				getWorkspaceInputMetadataOptionsModel.SetTID("testString")
				getWorkspaceInputMetadataOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceInputMetadataOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceInputMetadataOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceInputMetadataOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceInputMetadataOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceInputsOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceInputsOptions model
				wID := "testString"
				tID := "testString"
				getWorkspaceInputsOptionsModel := schematicsService.NewGetWorkspaceInputsOptions(wID, tID)
				getWorkspaceInputsOptionsModel.SetWID("testString")
				getWorkspaceInputsOptionsModel.SetTID("testString")
				getWorkspaceInputsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceInputsOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceInputsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceInputsOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceInputsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceLogUrlsOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceLogUrlsOptions model
				wID := "testString"
				getWorkspaceLogUrlsOptionsModel := schematicsService.NewGetWorkspaceLogUrlsOptions(wID)
				getWorkspaceLogUrlsOptionsModel.SetWID("testString")
				getWorkspaceLogUrlsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceLogUrlsOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceLogUrlsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceLogUrlsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceOptions model
				wID := "testString"
				getWorkspaceOptionsModel := schematicsService.NewGetWorkspaceOptions(wID)
				getWorkspaceOptionsModel.SetWID("testString")
				getWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceOutputsOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceOutputsOptions model
				wID := "testString"
				getWorkspaceOutputsOptionsModel := schematicsService.NewGetWorkspaceOutputsOptions(wID)
				getWorkspaceOutputsOptionsModel.SetWID("testString")
				getWorkspaceOutputsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceOutputsOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceOutputsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceOutputsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceReadmeOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceReadmeOptions model
				wID := "testString"
				getWorkspaceReadmeOptionsModel := schematicsService.NewGetWorkspaceReadmeOptions(wID)
				getWorkspaceReadmeOptionsModel.SetWID("testString")
				getWorkspaceReadmeOptionsModel.SetRef("testString")
				getWorkspaceReadmeOptionsModel.SetFormatted("markdown")
				getWorkspaceReadmeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceReadmeOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceReadmeOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceReadmeOptionsModel.Ref).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceReadmeOptionsModel.Formatted).To(Equal(core.StringPtr("markdown")))
				Expect(getWorkspaceReadmeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceResourcesOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceResourcesOptions model
				wID := "testString"
				getWorkspaceResourcesOptionsModel := schematicsService.NewGetWorkspaceResourcesOptions(wID)
				getWorkspaceResourcesOptionsModel.SetWID("testString")
				getWorkspaceResourcesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceResourcesOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceResourcesOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceResourcesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceStateOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceStateOptions model
				wID := "testString"
				getWorkspaceStateOptionsModel := schematicsService.NewGetWorkspaceStateOptions(wID)
				getWorkspaceStateOptionsModel.SetWID("testString")
				getWorkspaceStateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceStateOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceStateOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceStateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetWorkspaceTemplateStateOptions successfully`, func() {
				// Construct an instance of the GetWorkspaceTemplateStateOptions model
				wID := "testString"
				tID := "testString"
				getWorkspaceTemplateStateOptionsModel := schematicsService.NewGetWorkspaceTemplateStateOptions(wID, tID)
				getWorkspaceTemplateStateOptionsModel.SetWID("testString")
				getWorkspaceTemplateStateOptionsModel.SetTID("testString")
				getWorkspaceTemplateStateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getWorkspaceTemplateStateOptionsModel).ToNot(BeNil())
				Expect(getWorkspaceTemplateStateOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceTemplateStateOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(getWorkspaceTemplateStateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewHealthCheckAgentJobOptions successfully`, func() {
				// Construct an instance of the HealthCheckAgentJobOptions model
				agentID := "testString"
				healthCheckAgentJobOptionsModel := schematicsService.NewHealthCheckAgentJobOptions(agentID)
				healthCheckAgentJobOptionsModel.SetAgentID("testString")
				healthCheckAgentJobOptionsModel.SetForce(true)
				healthCheckAgentJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(healthCheckAgentJobOptionsModel).ToNot(BeNil())
				Expect(healthCheckAgentJobOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(healthCheckAgentJobOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(healthCheckAgentJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewJobData successfully`, func() {
				jobType := "repo_download_job"
				_model, err := schematicsService.NewJobData(jobType)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewListActionsOptions successfully`, func() {
				// Construct an instance of the ListActionsOptions model
				listActionsOptionsModel := schematicsService.NewListActionsOptions()
				listActionsOptionsModel.SetOffset(int64(0))
				listActionsOptionsModel.SetLimit(int64(100))
				listActionsOptionsModel.SetSort("testString")
				listActionsOptionsModel.SetProfile("ids")
				listActionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listActionsOptionsModel).ToNot(BeNil())
				Expect(listActionsOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listActionsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(100))))
				Expect(listActionsOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listActionsOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listActionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListAgentDataOptions successfully`, func() {
				// Construct an instance of the ListAgentDataOptions model
				listAgentDataOptionsModel := schematicsService.NewListAgentDataOptions()
				listAgentDataOptionsModel.SetOffset(int64(0))
				listAgentDataOptionsModel.SetLimit(int64(100))
				listAgentDataOptionsModel.SetProfile("summary")
				listAgentDataOptionsModel.SetFilter("all")
				listAgentDataOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listAgentDataOptionsModel).ToNot(BeNil())
				Expect(listAgentDataOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listAgentDataOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(100))))
				Expect(listAgentDataOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(listAgentDataOptionsModel.Filter).To(Equal(core.StringPtr("all")))
				Expect(listAgentDataOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListAgentOptions successfully`, func() {
				// Construct an instance of the ListAgentOptions model
				listAgentOptionsModel := schematicsService.NewListAgentOptions()
				listAgentOptionsModel.SetOffset(int64(0))
				listAgentOptionsModel.SetLimit(int64(100))
				listAgentOptionsModel.SetProfile("summary")
				listAgentOptionsModel.SetFilter("all")
				listAgentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listAgentOptionsModel).ToNot(BeNil())
				Expect(listAgentOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listAgentOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(100))))
				Expect(listAgentOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(listAgentOptionsModel.Filter).To(Equal(core.StringPtr("all")))
				Expect(listAgentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListBlueprintOptions successfully`, func() {
				// Construct an instance of the ListBlueprintOptions model
				listBlueprintOptionsModel := schematicsService.NewListBlueprintOptions()
				listBlueprintOptionsModel.SetOffset(int64(0))
				listBlueprintOptionsModel.SetLimit(int64(100))
				listBlueprintOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listBlueprintOptionsModel).ToNot(BeNil())
				Expect(listBlueprintOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listBlueprintOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(100))))
				Expect(listBlueprintOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInventoriesOptions successfully`, func() {
				// Construct an instance of the ListInventoriesOptions model
				listInventoriesOptionsModel := schematicsService.NewListInventoriesOptions()
				listInventoriesOptionsModel.SetOffset(int64(0))
				listInventoriesOptionsModel.SetLimit(int64(100))
				listInventoriesOptionsModel.SetSort("testString")
				listInventoriesOptionsModel.SetProfile("ids")
				listInventoriesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInventoriesOptionsModel).ToNot(BeNil())
				Expect(listInventoriesOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listInventoriesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(100))))
				Expect(listInventoriesOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listInventoriesOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listInventoriesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListJobLogsOptions successfully`, func() {
				// Construct an instance of the ListJobLogsOptions model
				jobID := "testString"
				listJobLogsOptionsModel := schematicsService.NewListJobLogsOptions(jobID)
				listJobLogsOptionsModel.SetJobID("testString")
				listJobLogsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listJobLogsOptionsModel).ToNot(BeNil())
				Expect(listJobLogsOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(listJobLogsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListJobsOptions successfully`, func() {
				// Construct an instance of the ListJobsOptions model
				listJobsOptionsModel := schematicsService.NewListJobsOptions()
				listJobsOptionsModel.SetOffset(int64(0))
				listJobsOptionsModel.SetLimit(int64(100))
				listJobsOptionsModel.SetSort("testString")
				listJobsOptionsModel.SetProfile("ids")
				listJobsOptionsModel.SetResource("workspaces")
				listJobsOptionsModel.SetResourceID("testString")
				listJobsOptionsModel.SetActionID("testString")
				listJobsOptionsModel.SetWorkspaceID("testString")
				listJobsOptionsModel.SetList("all")
				listJobsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listJobsOptionsModel).ToNot(BeNil())
				Expect(listJobsOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listJobsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(100))))
				Expect(listJobsOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listJobsOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listJobsOptionsModel.Resource).To(Equal(core.StringPtr("workspaces")))
				Expect(listJobsOptionsModel.ResourceID).To(Equal(core.StringPtr("testString")))
				Expect(listJobsOptionsModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(listJobsOptionsModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(listJobsOptionsModel.List).To(Equal(core.StringPtr("all")))
				Expect(listJobsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListKmsOptions successfully`, func() {
				// Construct an instance of the ListKmsOptions model
				encryptionScheme := "testString"
				location := "testString"
				listKmsOptionsModel := schematicsService.NewListKmsOptions(encryptionScheme, location)
				listKmsOptionsModel.SetEncryptionScheme("testString")
				listKmsOptionsModel.SetLocation("testString")
				listKmsOptionsModel.SetResourceGroup("testString")
				listKmsOptionsModel.SetLimit(int64(100))
				listKmsOptionsModel.SetSort("testString")
				listKmsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listKmsOptionsModel).ToNot(BeNil())
				Expect(listKmsOptionsModel.EncryptionScheme).To(Equal(core.StringPtr("testString")))
				Expect(listKmsOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(listKmsOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(listKmsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(100))))
				Expect(listKmsOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listKmsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLocationsOptions successfully`, func() {
				// Construct an instance of the ListLocationsOptions model
				listLocationsOptionsModel := schematicsService.NewListLocationsOptions()
				listLocationsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLocationsOptionsModel).ToNot(BeNil())
				Expect(listLocationsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListPolicyOptions successfully`, func() {
				// Construct an instance of the ListPolicyOptions model
				listPolicyOptionsModel := schematicsService.NewListPolicyOptions()
				listPolicyOptionsModel.SetOffset(int64(0))
				listPolicyOptionsModel.SetLimit(int64(100))
				listPolicyOptionsModel.SetProfile("summary")
				listPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listPolicyOptionsModel).ToNot(BeNil())
				Expect(listPolicyOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listPolicyOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(100))))
				Expect(listPolicyOptionsModel.Profile).To(Equal(core.StringPtr("summary")))
				Expect(listPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListResourceGroupOptions successfully`, func() {
				// Construct an instance of the ListResourceGroupOptions model
				listResourceGroupOptionsModel := schematicsService.NewListResourceGroupOptions()
				listResourceGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listResourceGroupOptionsModel).ToNot(BeNil())
				Expect(listResourceGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListResourceQueryOptions successfully`, func() {
				// Construct an instance of the ListResourceQueryOptions model
				listResourceQueryOptionsModel := schematicsService.NewListResourceQueryOptions()
				listResourceQueryOptionsModel.SetOffset(int64(0))
				listResourceQueryOptionsModel.SetLimit(int64(100))
				listResourceQueryOptionsModel.SetSort("testString")
				listResourceQueryOptionsModel.SetProfile("ids")
				listResourceQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listResourceQueryOptionsModel).ToNot(BeNil())
				Expect(listResourceQueryOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listResourceQueryOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(100))))
				Expect(listResourceQueryOptionsModel.Sort).To(Equal(core.StringPtr("testString")))
				Expect(listResourceQueryOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listResourceQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSchematicsLocationOptions successfully`, func() {
				// Construct an instance of the ListSchematicsLocationOptions model
				listSchematicsLocationOptionsModel := schematicsService.NewListSchematicsLocationOptions()
				listSchematicsLocationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSchematicsLocationOptionsModel).ToNot(BeNil())
				Expect(listSchematicsLocationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListWorkspaceActivitiesOptions successfully`, func() {
				// Construct an instance of the ListWorkspaceActivitiesOptions model
				wID := "testString"
				listWorkspaceActivitiesOptionsModel := schematicsService.NewListWorkspaceActivitiesOptions(wID)
				listWorkspaceActivitiesOptionsModel.SetWID("testString")
				listWorkspaceActivitiesOptionsModel.SetOffset(int64(0))
				listWorkspaceActivitiesOptionsModel.SetLimit(int64(100))
				listWorkspaceActivitiesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listWorkspaceActivitiesOptionsModel).ToNot(BeNil())
				Expect(listWorkspaceActivitiesOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(listWorkspaceActivitiesOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listWorkspaceActivitiesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(100))))
				Expect(listWorkspaceActivitiesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListWorkspacesOptions successfully`, func() {
				// Construct an instance of the ListWorkspacesOptions model
				listWorkspacesOptionsModel := schematicsService.NewListWorkspacesOptions()
				listWorkspacesOptionsModel.SetOffset(int64(0))
				listWorkspacesOptionsModel.SetLimit(int64(100))
				listWorkspacesOptionsModel.SetProfile("ids")
				listWorkspacesOptionsModel.SetResourceGroup("testString")
				listWorkspacesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listWorkspacesOptionsModel).ToNot(BeNil())
				Expect(listWorkspacesOptionsModel.Offset).To(Equal(core.Int64Ptr(int64(0))))
				Expect(listWorkspacesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(100))))
				Expect(listWorkspacesOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(listWorkspacesOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(listWorkspacesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPlanWorkspaceCommandOptions successfully`, func() {
				// Construct an instance of the WorkspaceActivityOptionsTemplate model
				workspaceActivityOptionsTemplateModel := new(schematicsv1.WorkspaceActivityOptionsTemplate)
				Expect(workspaceActivityOptionsTemplateModel).ToNot(BeNil())
				workspaceActivityOptionsTemplateModel.Target = []string{"testString"}
				workspaceActivityOptionsTemplateModel.TfVars = []string{"testString"}
				Expect(workspaceActivityOptionsTemplateModel.Target).To(Equal([]string{"testString"}))
				Expect(workspaceActivityOptionsTemplateModel.TfVars).To(Equal([]string{"testString"}))

				// Construct an instance of the PlanWorkspaceCommandOptions model
				wID := "testString"
				refreshToken := "testString"
				planWorkspaceCommandOptionsModel := schematicsService.NewPlanWorkspaceCommandOptions(wID, refreshToken)
				planWorkspaceCommandOptionsModel.SetWID("testString")
				planWorkspaceCommandOptionsModel.SetRefreshToken("testString")
				planWorkspaceCommandOptionsModel.SetActionOptions(workspaceActivityOptionsTemplateModel)
				planWorkspaceCommandOptionsModel.SetDelegatedToken("testString")
				planWorkspaceCommandOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(planWorkspaceCommandOptionsModel).ToNot(BeNil())
				Expect(planWorkspaceCommandOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(planWorkspaceCommandOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(planWorkspaceCommandOptionsModel.ActionOptions).To(Equal(workspaceActivityOptionsTemplateModel))
				Expect(planWorkspaceCommandOptionsModel.DelegatedToken).To(Equal(core.StringPtr("testString")))
				Expect(planWorkspaceCommandOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewProcessTemplateMetaDataOptions successfully`, func() {
				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				Expect(gitSourceModel).ToNot(BeNil())
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")
				Expect(gitSourceModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitBranch).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				Expect(catalogSourceModel).ToNot(BeNil())
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")
				Expect(catalogSourceModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.CatalogID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingTargetKind).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersionFlavourName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingProvisionerWorkingDirectory).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.DryRun).To(Equal(core.BoolPtr(true)))
				Expect(catalogSourceModel.OwningAccount).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemIconURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.LaunchURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(gitSourceModel))
				Expect(externalSourceModel.Catalog).To(Equal(catalogSourceModel))

				// Construct an instance of the ProcessTemplateMetaDataOptions model
				processTemplateMetaDataOptionsTemplateType := "testString"
				var processTemplateMetaDataOptionsSource *schematicsv1.ExternalSource = nil
				processTemplateMetaDataOptionsModel := schematicsService.NewProcessTemplateMetaDataOptions(processTemplateMetaDataOptionsTemplateType, processTemplateMetaDataOptionsSource)
				processTemplateMetaDataOptionsModel.SetTemplateType("testString")
				processTemplateMetaDataOptionsModel.SetSource(externalSourceModel)
				processTemplateMetaDataOptionsModel.SetRegion("testString")
				processTemplateMetaDataOptionsModel.SetSourceType("local")
				processTemplateMetaDataOptionsModel.SetXGithubToken("testString")
				processTemplateMetaDataOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(processTemplateMetaDataOptionsModel).ToNot(BeNil())
				Expect(processTemplateMetaDataOptionsModel.TemplateType).To(Equal(core.StringPtr("testString")))
				Expect(processTemplateMetaDataOptionsModel.Source).To(Equal(externalSourceModel))
				Expect(processTemplateMetaDataOptionsModel.Region).To(Equal(core.StringPtr("testString")))
				Expect(processTemplateMetaDataOptionsModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(processTemplateMetaDataOptionsModel.XGithubToken).To(Equal(core.StringPtr("testString")))
				Expect(processTemplateMetaDataOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPrsAgentJobOptions successfully`, func() {
				// Construct an instance of the PrsAgentJobOptions model
				agentID := "testString"
				prsAgentJobOptionsModel := schematicsService.NewPrsAgentJobOptions(agentID)
				prsAgentJobOptionsModel.SetAgentID("testString")
				prsAgentJobOptionsModel.SetForce(true)
				prsAgentJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(prsAgentJobOptionsModel).ToNot(BeNil())
				Expect(prsAgentJobOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(prsAgentJobOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(prsAgentJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRefreshWorkspaceCommandOptions successfully`, func() {
				// Construct an instance of the RefreshWorkspaceCommandOptions model
				wID := "testString"
				refreshToken := "testString"
				refreshWorkspaceCommandOptionsModel := schematicsService.NewRefreshWorkspaceCommandOptions(wID, refreshToken)
				refreshWorkspaceCommandOptionsModel.SetWID("testString")
				refreshWorkspaceCommandOptionsModel.SetRefreshToken("testString")
				refreshWorkspaceCommandOptionsModel.SetDelegatedToken("testString")
				refreshWorkspaceCommandOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(refreshWorkspaceCommandOptionsModel).ToNot(BeNil())
				Expect(refreshWorkspaceCommandOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(refreshWorkspaceCommandOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(refreshWorkspaceCommandOptionsModel.DelegatedToken).To(Equal(core.StringPtr("testString")))
				Expect(refreshWorkspaceCommandOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRegisterAgentOptions successfully`, func() {
				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				Expect(agentUserStateModel).ToNot(BeNil())
				agentUserStateModel.State = core.StringPtr("enable")
				Expect(agentUserStateModel.State).To(Equal(core.StringPtr("enable")))

				// Construct an instance of the RegisterAgentOptions model
				registerAgentOptionsName := "MyDevAgent"
				registerAgentOptionsAgentLocation := "us-south"
				registerAgentOptionsLocation := "us-south"
				registerAgentOptionsProfileID := "testString"
				registerAgentOptionsModel := schematicsService.NewRegisterAgentOptions(registerAgentOptionsName, registerAgentOptionsAgentLocation, registerAgentOptionsLocation, registerAgentOptionsProfileID)
				registerAgentOptionsModel.SetName("MyDevAgent")
				registerAgentOptionsModel.SetAgentLocation("us-south")
				registerAgentOptionsModel.SetLocation("us-south")
				registerAgentOptionsModel.SetProfileID("testString")
				registerAgentOptionsModel.SetDescription("Register agent")
				registerAgentOptionsModel.SetResourceGroup("testString")
				registerAgentOptionsModel.SetTags([]string{"testString"})
				registerAgentOptionsModel.SetUserState(agentUserStateModel)
				registerAgentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(registerAgentOptionsModel).ToNot(BeNil())
				Expect(registerAgentOptionsModel.Name).To(Equal(core.StringPtr("MyDevAgent")))
				Expect(registerAgentOptionsModel.AgentLocation).To(Equal(core.StringPtr("us-south")))
				Expect(registerAgentOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(registerAgentOptionsModel.ProfileID).To(Equal(core.StringPtr("testString")))
				Expect(registerAgentOptionsModel.Description).To(Equal(core.StringPtr("Register agent")))
				Expect(registerAgentOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(registerAgentOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(registerAgentOptionsModel.UserState).To(Equal(agentUserStateModel))
				Expect(registerAgentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceBlueprintOptions successfully`, func() {
				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				Expect(gitSourceModel).ToNot(BeNil())
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")
				Expect(gitSourceModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitBranch).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				Expect(catalogSourceModel).ToNot(BeNil())
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")
				Expect(catalogSourceModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.CatalogID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingTargetKind).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersionFlavourName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingProvisionerWorkingDirectory).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.DryRun).To(Equal(core.BoolPtr(true)))
				Expect(catalogSourceModel.OwningAccount).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemIconURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.LaunchURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(gitSourceModel))
				Expect(externalSourceModel.Catalog).To(Equal(catalogSourceModel))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))

				// Construct an instance of the BlueprintConfigItem model
				blueprintConfigItemModel := new(schematicsv1.BlueprintConfigItem)
				Expect(blueprintConfigItemModel).ToNot(BeNil())
				blueprintConfigItemModel.Name = core.StringPtr("testString")
				blueprintConfigItemModel.Description = core.StringPtr("testString")
				blueprintConfigItemModel.Source = externalSourceModel
				blueprintConfigItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				Expect(blueprintConfigItemModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(blueprintConfigItemModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(blueprintConfigItemModel.Source).To(Equal(externalSourceModel))
				Expect(blueprintConfigItemModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))

				// Construct an instance of the BlueprintFlow model
				blueprintFlowModel := new(schematicsv1.BlueprintFlow)
				Expect(blueprintFlowModel).ToNot(BeNil())

				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the ReplaceBlueprintOptions model
				blueprintID := "testString"
				replaceBlueprintOptionsName := "Toronto Dev Environtment"
				replaceBlueprintOptionsModel := schematicsService.NewReplaceBlueprintOptions(blueprintID, replaceBlueprintOptionsName)
				replaceBlueprintOptionsModel.SetBlueprintID("testString")
				replaceBlueprintOptionsModel.SetName("Toronto Dev Environtment")
				replaceBlueprintOptionsModel.SetSchemaVersion("1.0")
				replaceBlueprintOptionsModel.SetSource(externalSourceModel)
				replaceBlueprintOptionsModel.SetConfig([]schematicsv1.BlueprintConfigItem{*blueprintConfigItemModel})
				replaceBlueprintOptionsModel.SetDescription("Deploys dev environtment instance in Toronto Region")
				replaceBlueprintOptionsModel.SetResourceGroup("Default")
				replaceBlueprintOptionsModel.SetTags([]string{"blueprint:Tor-Dev"})
				replaceBlueprintOptionsModel.SetLocation("us-south")
				replaceBlueprintOptionsModel.SetInputs([]schematicsv1.VariableData{*variableDataModel})
				replaceBlueprintOptionsModel.SetSettings([]schematicsv1.VariableData{*variableDataModel})
				replaceBlueprintOptionsModel.SetFlow(blueprintFlowModel)
				replaceBlueprintOptionsModel.SetUserState(userStateModel)
				replaceBlueprintOptionsModel.SetProfile("ids")
				replaceBlueprintOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceBlueprintOptionsModel).ToNot(BeNil())
				Expect(replaceBlueprintOptionsModel.BlueprintID).To(Equal(core.StringPtr("testString")))
				Expect(replaceBlueprintOptionsModel.Name).To(Equal(core.StringPtr("Toronto Dev Environtment")))
				Expect(replaceBlueprintOptionsModel.SchemaVersion).To(Equal(core.StringPtr("1.0")))
				Expect(replaceBlueprintOptionsModel.Source).To(Equal(externalSourceModel))
				Expect(replaceBlueprintOptionsModel.Config).To(Equal([]schematicsv1.BlueprintConfigItem{*blueprintConfigItemModel}))
				Expect(replaceBlueprintOptionsModel.Description).To(Equal(core.StringPtr("Deploys dev environtment instance in Toronto Region")))
				Expect(replaceBlueprintOptionsModel.ResourceGroup).To(Equal(core.StringPtr("Default")))
				Expect(replaceBlueprintOptionsModel.Tags).To(Equal([]string{"blueprint:Tor-Dev"}))
				Expect(replaceBlueprintOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(replaceBlueprintOptionsModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(replaceBlueprintOptionsModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(replaceBlueprintOptionsModel.Flow).To(Equal(blueprintFlowModel))
				Expect(replaceBlueprintOptionsModel.UserState).To(Equal(userStateModel))
				Expect(replaceBlueprintOptionsModel.Profile).To(Equal(core.StringPtr("ids")))
				Expect(replaceBlueprintOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceInventoryOptions successfully`, func() {
				// Construct an instance of the ReplaceInventoryOptions model
				inventoryID := "testString"
				replaceInventoryOptionsModel := schematicsService.NewReplaceInventoryOptions(inventoryID)
				replaceInventoryOptionsModel.SetInventoryID("testString")
				replaceInventoryOptionsModel.SetName("testString")
				replaceInventoryOptionsModel.SetDescription("testString")
				replaceInventoryOptionsModel.SetLocation("us-south")
				replaceInventoryOptionsModel.SetResourceGroup("testString")
				replaceInventoryOptionsModel.SetInventoriesIni("testString")
				replaceInventoryOptionsModel.SetResourceQueries([]string{"testString"})
				replaceInventoryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceInventoryOptionsModel).ToNot(BeNil())
				Expect(replaceInventoryOptionsModel.InventoryID).To(Equal(core.StringPtr("testString")))
				Expect(replaceInventoryOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(replaceInventoryOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(replaceInventoryOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(replaceInventoryOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(replaceInventoryOptionsModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(replaceInventoryOptionsModel.ResourceQueries).To(Equal([]string{"testString"}))
				Expect(replaceInventoryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceResourcesQueryOptions successfully`, func() {
				// Construct an instance of the ResourceQueryParam model
				resourceQueryParamModel := new(schematicsv1.ResourceQueryParam)
				Expect(resourceQueryParamModel).ToNot(BeNil())
				resourceQueryParamModel.Name = core.StringPtr("testString")
				resourceQueryParamModel.Value = core.StringPtr("testString")
				resourceQueryParamModel.Description = core.StringPtr("testString")
				Expect(resourceQueryParamModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(resourceQueryParamModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(resourceQueryParamModel.Description).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ResourceQuery model
				resourceQueryModel := new(schematicsv1.ResourceQuery)
				Expect(resourceQueryModel).ToNot(BeNil())
				resourceQueryModel.QueryType = core.StringPtr("workspaces")
				resourceQueryModel.QueryCondition = []schematicsv1.ResourceQueryParam{*resourceQueryParamModel}
				resourceQueryModel.QuerySelect = []string{"testString"}
				Expect(resourceQueryModel.QueryType).To(Equal(core.StringPtr("workspaces")))
				Expect(resourceQueryModel.QueryCondition).To(Equal([]schematicsv1.ResourceQueryParam{*resourceQueryParamModel}))
				Expect(resourceQueryModel.QuerySelect).To(Equal([]string{"testString"}))

				// Construct an instance of the ReplaceResourcesQueryOptions model
				queryID := "testString"
				replaceResourcesQueryOptionsModel := schematicsService.NewReplaceResourcesQueryOptions(queryID)
				replaceResourcesQueryOptionsModel.SetQueryID("testString")
				replaceResourcesQueryOptionsModel.SetType("vsi")
				replaceResourcesQueryOptionsModel.SetName("testString")
				replaceResourcesQueryOptionsModel.SetQueries([]schematicsv1.ResourceQuery{*resourceQueryModel})
				replaceResourcesQueryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceResourcesQueryOptionsModel).ToNot(BeNil())
				Expect(replaceResourcesQueryOptionsModel.QueryID).To(Equal(core.StringPtr("testString")))
				Expect(replaceResourcesQueryOptionsModel.Type).To(Equal(core.StringPtr("vsi")))
				Expect(replaceResourcesQueryOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(replaceResourcesQueryOptionsModel.Queries).To(Equal([]schematicsv1.ResourceQuery{*resourceQueryModel}))
				Expect(replaceResourcesQueryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceWorkspaceInputsOptions successfully`, func() {
				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				Expect(workspaceVariableRequestModel).ToNot(BeNil())
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")
				Expect(workspaceVariableRequestModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(workspaceVariableRequestModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(workspaceVariableRequestModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceWorkspaceInputsOptions model
				wID := "testString"
				tID := "testString"
				replaceWorkspaceInputsOptionsModel := schematicsService.NewReplaceWorkspaceInputsOptions(wID, tID)
				replaceWorkspaceInputsOptionsModel.SetWID("testString")
				replaceWorkspaceInputsOptionsModel.SetTID("testString")
				replaceWorkspaceInputsOptionsModel.SetEnvValues([]map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}})
				replaceWorkspaceInputsOptionsModel.SetValues("testString")
				replaceWorkspaceInputsOptionsModel.SetVariablestore([]schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel})
				replaceWorkspaceInputsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceWorkspaceInputsOptionsModel).ToNot(BeNil())
				Expect(replaceWorkspaceInputsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkspaceInputsOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkspaceInputsOptionsModel.EnvValues).To(Equal([]map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(replaceWorkspaceInputsOptionsModel.Values).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkspaceInputsOptionsModel.Variablestore).To(Equal([]schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}))
				Expect(replaceWorkspaceInputsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceWorkspaceOptions successfully`, func() {
				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				Expect(serviceExtensionsModel).ToNot(BeNil())
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")
				Expect(serviceExtensionsModel.Name).To(Equal(core.StringPtr("flavor")))
				Expect(serviceExtensionsModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(serviceExtensionsModel.Type).To(Equal(core.StringPtr("string")))

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				Expect(catalogRefModel).ToNot(BeNil())
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}
				Expect(catalogRefModel.DryRun).To(Equal(core.BoolPtr(true)))
				Expect(catalogRefModel.OwningAccount).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemIconURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemID).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemName).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.LaunchURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ServiceExtensions).To(Equal([]schematicsv1.ServiceExtensions{*serviceExtensionsModel}))

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				Expect(dependenciesModel).ToNot(BeNil())
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}
				Expect(dependenciesModel.Parents).To(Equal([]string{"testString"}))
				Expect(dependenciesModel.Children).To(Equal([]string{"testString"}))

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				Expect(sharedTargetDataModel).ToNot(BeNil())
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")
				Expect(sharedTargetDataModel.ClusterCreatedOn).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterName).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterType).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.EntitlementKeys).To(Equal([]map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(sharedTargetDataModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.Region).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.WorkerCount).To(Equal(core.Int64Ptr(int64(26))))
				Expect(sharedTargetDataModel.WorkerMachineType).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				Expect(environmentValuesMetadataModel).ToNot(BeNil())
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)
				Expect(environmentValuesMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(environmentValuesMetadataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(environmentValuesMetadataModel.Secure).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				Expect(injectTerraformTemplateInnerTftParametersItemModel).ToNot(BeNil())
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")
				Expect(injectTerraformTemplateInnerTftParametersItemModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerTftParametersItemModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				Expect(injectTerraformTemplateInnerModel).ToNot(BeNil())
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}
				Expect(injectTerraformTemplateInnerModel.TftGitURL).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerModel.TftGitToken).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerModel.TftPrefix).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerModel.InjectionType).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerModel.TftName).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerModel.TftParameters).To(Equal([]schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}))

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				Expect(workspaceVariableRequestModel).ToNot(BeNil())
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")
				Expect(workspaceVariableRequestModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(workspaceVariableRequestModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(workspaceVariableRequestModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				Expect(templateSourceDataRequestModel).ToNot(BeNil())
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}
				Expect(templateSourceDataRequestModel.EnvValues).To(Equal([]map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(templateSourceDataRequestModel.EnvValuesMetadata).To(Equal([]schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}))
				Expect(templateSourceDataRequestModel.Folder).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Compact).To(Equal(core.BoolPtr(true)))
				Expect(templateSourceDataRequestModel.InitStateFile).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Injectors).To(Equal([]schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}))
				Expect(templateSourceDataRequestModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.UninstallScriptName).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Values).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.ValuesMetadata).To(Equal([]map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(templateSourceDataRequestModel.Variablestore).To(Equal([]schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}))

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				Expect(templateRepoUpdateRequestModel).ToNot(BeNil())
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")
				Expect(templateRepoUpdateRequestModel.Branch).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUpdateRequestModel.Release).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUpdateRequestModel.RepoShaValue).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUpdateRequestModel.RepoURL).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUpdateRequestModel.URL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				Expect(workspaceStatusUpdateRequestModel).ToNot(BeNil())
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(workspaceStatusUpdateRequestModel.Frozen).To(Equal(core.BoolPtr(true)))
				Expect(workspaceStatusUpdateRequestModel.FrozenAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))
				Expect(workspaceStatusUpdateRequestModel.FrozenBy).To(Equal(core.StringPtr("testString")))
				Expect(workspaceStatusUpdateRequestModel.Locked).To(Equal(core.BoolPtr(true)))
				Expect(workspaceStatusUpdateRequestModel.LockedBy).To(Equal(core.StringPtr("testString")))
				Expect(workspaceStatusUpdateRequestModel.LockedTime).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				Expect(workspaceStatusMessageModel).ToNot(BeNil())
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")
				Expect(workspaceStatusMessageModel.StatusCode).To(Equal(core.StringPtr("testString")))
				Expect(workspaceStatusMessageModel.StatusMsg).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceWorkspaceOptions model
				wID := "testString"
				replaceWorkspaceOptionsModel := schematicsService.NewReplaceWorkspaceOptions(wID)
				replaceWorkspaceOptionsModel.SetWID("testString")
				replaceWorkspaceOptionsModel.SetCatalogRef(catalogRefModel)
				replaceWorkspaceOptionsModel.SetDescription("testString")
				replaceWorkspaceOptionsModel.SetDependencies(dependenciesModel)
				replaceWorkspaceOptionsModel.SetName("testString")
				replaceWorkspaceOptionsModel.SetSharedData(sharedTargetDataModel)
				replaceWorkspaceOptionsModel.SetTags([]string{"testString"})
				replaceWorkspaceOptionsModel.SetTemplateData([]schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel})
				replaceWorkspaceOptionsModel.SetTemplateRepo(templateRepoUpdateRequestModel)
				replaceWorkspaceOptionsModel.SetType([]string{"testString"})
				replaceWorkspaceOptionsModel.SetWorkspaceStatus(workspaceStatusUpdateRequestModel)
				replaceWorkspaceOptionsModel.SetWorkspaceStatusMsg(workspaceStatusMessageModel)
				replaceWorkspaceOptionsModel.SetAgentID("testString")
				replaceWorkspaceOptionsModel.SetXGithubToken("testString")
				replaceWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceWorkspaceOptionsModel).ToNot(BeNil())
				Expect(replaceWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkspaceOptionsModel.CatalogRef).To(Equal(catalogRefModel))
				Expect(replaceWorkspaceOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkspaceOptionsModel.Dependencies).To(Equal(dependenciesModel))
				Expect(replaceWorkspaceOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkspaceOptionsModel.SharedData).To(Equal(sharedTargetDataModel))
				Expect(replaceWorkspaceOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(replaceWorkspaceOptionsModel.TemplateData).To(Equal([]schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}))
				Expect(replaceWorkspaceOptionsModel.TemplateRepo).To(Equal(templateRepoUpdateRequestModel))
				Expect(replaceWorkspaceOptionsModel.Type).To(Equal([]string{"testString"}))
				Expect(replaceWorkspaceOptionsModel.WorkspaceStatus).To(Equal(workspaceStatusUpdateRequestModel))
				Expect(replaceWorkspaceOptionsModel.WorkspaceStatusMsg).To(Equal(workspaceStatusMessageModel))
				Expect(replaceWorkspaceOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkspaceOptionsModel.XGithubToken).To(Equal(core.StringPtr("testString")))
				Expect(replaceWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRunWorkspaceCommandsOptions successfully`, func() {
				// Construct an instance of the TerraformCommand model
				terraformCommandModel := new(schematicsv1.TerraformCommand)
				Expect(terraformCommandModel).ToNot(BeNil())
				terraformCommandModel.Command = core.StringPtr("testString")
				terraformCommandModel.CommandParams = core.StringPtr("testString")
				terraformCommandModel.CommandName = core.StringPtr("testString")
				terraformCommandModel.CommandDesc = core.StringPtr("testString")
				terraformCommandModel.CommandOnError = core.StringPtr("testString")
				terraformCommandModel.CommandDependsOn = core.StringPtr("testString")
				terraformCommandModel.CommandStatus = core.StringPtr("testString")
				Expect(terraformCommandModel.Command).To(Equal(core.StringPtr("testString")))
				Expect(terraformCommandModel.CommandParams).To(Equal(core.StringPtr("testString")))
				Expect(terraformCommandModel.CommandName).To(Equal(core.StringPtr("testString")))
				Expect(terraformCommandModel.CommandDesc).To(Equal(core.StringPtr("testString")))
				Expect(terraformCommandModel.CommandOnError).To(Equal(core.StringPtr("testString")))
				Expect(terraformCommandModel.CommandDependsOn).To(Equal(core.StringPtr("testString")))
				Expect(terraformCommandModel.CommandStatus).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the RunWorkspaceCommandsOptions model
				wID := "testString"
				refreshToken := "testString"
				runWorkspaceCommandsOptionsModel := schematicsService.NewRunWorkspaceCommandsOptions(wID, refreshToken)
				runWorkspaceCommandsOptionsModel.SetWID("testString")
				runWorkspaceCommandsOptionsModel.SetRefreshToken("testString")
				runWorkspaceCommandsOptionsModel.SetCommands([]schematicsv1.TerraformCommand{*terraformCommandModel})
				runWorkspaceCommandsOptionsModel.SetOperationName("testString")
				runWorkspaceCommandsOptionsModel.SetDescription("testString")
				runWorkspaceCommandsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(runWorkspaceCommandsOptionsModel).ToNot(BeNil())
				Expect(runWorkspaceCommandsOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(runWorkspaceCommandsOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(runWorkspaceCommandsOptionsModel.Commands).To(Equal([]schematicsv1.TerraformCommand{*terraformCommandModel}))
				Expect(runWorkspaceCommandsOptionsModel.OperationName).To(Equal(core.StringPtr("testString")))
				Expect(runWorkspaceCommandsOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(runWorkspaceCommandsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewTemplateRepoUploadOptions successfully`, func() {
				// Construct an instance of the TemplateRepoUploadOptions model
				wID := "testString"
				tID := "testString"
				templateRepoUploadOptionsModel := schematicsService.NewTemplateRepoUploadOptions(wID, tID)
				templateRepoUploadOptionsModel.SetWID("testString")
				templateRepoUploadOptionsModel.SetTID("testString")
				templateRepoUploadOptionsModel.SetFile(CreateMockReader("This is a mock file."))
				templateRepoUploadOptionsModel.SetFileContentType("testString")
				templateRepoUploadOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(templateRepoUploadOptionsModel).ToNot(BeNil())
				Expect(templateRepoUploadOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUploadOptionsModel.TID).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUploadOptionsModel.File).To(Equal(CreateMockReader("This is a mock file.")))
				Expect(templateRepoUploadOptionsModel.FileContentType).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUploadOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateActionOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				Expect(gitSourceModel).ToNot(BeNil())
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")
				Expect(gitSourceModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitBranch).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				Expect(catalogSourceModel).ToNot(BeNil())
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")
				Expect(catalogSourceModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.CatalogID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingTargetKind).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersionFlavourName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingProvisionerWorkingDirectory).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.DryRun).To(Equal(core.BoolPtr(true)))
				Expect(catalogSourceModel.OwningAccount).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemIconURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.LaunchURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(gitSourceModel))
				Expect(externalSourceModel.Catalog).To(Equal(catalogSourceModel))

				// Construct an instance of the CredentialVariableMetadata model
				credentialVariableMetadataModel := new(schematicsv1.CredentialVariableMetadata)
				Expect(credentialVariableMetadataModel).ToNot(BeNil())
				credentialVariableMetadataModel.Type = core.StringPtr("string")
				credentialVariableMetadataModel.Aliases = []string{"testString"}
				credentialVariableMetadataModel.Description = core.StringPtr("testString")
				credentialVariableMetadataModel.CloudDataType = core.StringPtr("testString")
				credentialVariableMetadataModel.DefaultValue = core.StringPtr("testString")
				credentialVariableMetadataModel.LinkStatus = core.StringPtr("normal")
				credentialVariableMetadataModel.Immutable = core.BoolPtr(true)
				credentialVariableMetadataModel.Hidden = core.BoolPtr(true)
				credentialVariableMetadataModel.Required = core.BoolPtr(true)
				credentialVariableMetadataModel.Position = core.Int64Ptr(int64(38))
				credentialVariableMetadataModel.GroupBy = core.StringPtr("testString")
				credentialVariableMetadataModel.Source = core.StringPtr("testString")
				Expect(credentialVariableMetadataModel.Type).To(Equal(core.StringPtr("string")))
				Expect(credentialVariableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(credentialVariableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(credentialVariableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(credentialVariableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(credentialVariableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(credentialVariableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(credentialVariableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableMetadataModel.Source).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CredentialVariableData model
				credentialVariableDataModel := new(schematicsv1.CredentialVariableData)
				Expect(credentialVariableDataModel).ToNot(BeNil())
				credentialVariableDataModel.Name = core.StringPtr("testString")
				credentialVariableDataModel.Value = core.StringPtr("testString")
				credentialVariableDataModel.UseDefault = core.BoolPtr(true)
				credentialVariableDataModel.Metadata = credentialVariableMetadataModel
				Expect(credentialVariableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(credentialVariableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(credentialVariableDataModel.Metadata).To(Equal(credentialVariableMetadataModel))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))

				// Construct an instance of the UpdateActionOptions model
				actionID := "testString"
				updateActionOptionsModel := schematicsService.NewUpdateActionOptions(actionID)
				updateActionOptionsModel.SetActionID("testString")
				updateActionOptionsModel.SetName("Stop Action")
				updateActionOptionsModel.SetDescription("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")
				updateActionOptionsModel.SetLocation("us-south")
				updateActionOptionsModel.SetResourceGroup("testString")
				updateActionOptionsModel.SetBastionConnectionType("ssh")
				updateActionOptionsModel.SetInventoryConnectionType("ssh")
				updateActionOptionsModel.SetTags([]string{"testString"})
				updateActionOptionsModel.SetUserState(userStateModel)
				updateActionOptionsModel.SetSourceReadmeURL("testString")
				updateActionOptionsModel.SetSource(externalSourceModel)
				updateActionOptionsModel.SetSourceType("local")
				updateActionOptionsModel.SetCommandParameter("testString")
				updateActionOptionsModel.SetInventory("testString")
				updateActionOptionsModel.SetCredentials([]schematicsv1.CredentialVariableData{*credentialVariableDataModel})
				updateActionOptionsModel.SetBastion(bastionResourceDefinitionModel)
				updateActionOptionsModel.SetBastionCredential(credentialVariableDataModel)
				updateActionOptionsModel.SetTargetsIni("testString")
				updateActionOptionsModel.SetInputs([]schematicsv1.VariableData{*variableDataModel})
				updateActionOptionsModel.SetOutputs([]schematicsv1.VariableData{*variableDataModel})
				updateActionOptionsModel.SetSettings([]schematicsv1.VariableData{*variableDataModel})
				updateActionOptionsModel.SetXGithubToken("testString")
				updateActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateActionOptionsModel).ToNot(BeNil())
				Expect(updateActionOptionsModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(updateActionOptionsModel.Name).To(Equal(core.StringPtr("Stop Action")))
				Expect(updateActionOptionsModel.Description).To(Equal(core.StringPtr("The description of your action. The description can be up to 2048 characters long in size. **Example** you can use the description to stop the targets.")))
				Expect(updateActionOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(updateActionOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(updateActionOptionsModel.BastionConnectionType).To(Equal(core.StringPtr("ssh")))
				Expect(updateActionOptionsModel.InventoryConnectionType).To(Equal(core.StringPtr("ssh")))
				Expect(updateActionOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(updateActionOptionsModel.UserState).To(Equal(userStateModel))
				Expect(updateActionOptionsModel.SourceReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(updateActionOptionsModel.Source).To(Equal(externalSourceModel))
				Expect(updateActionOptionsModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(updateActionOptionsModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(updateActionOptionsModel.Inventory).To(Equal(core.StringPtr("testString")))
				Expect(updateActionOptionsModel.Credentials).To(Equal([]schematicsv1.CredentialVariableData{*credentialVariableDataModel}))
				Expect(updateActionOptionsModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(updateActionOptionsModel.BastionCredential).To(Equal(credentialVariableDataModel))
				Expect(updateActionOptionsModel.TargetsIni).To(Equal(core.StringPtr("testString")))
				Expect(updateActionOptionsModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(updateActionOptionsModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(updateActionOptionsModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(updateActionOptionsModel.XGithubToken).To(Equal(core.StringPtr("testString")))
				Expect(updateActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateAgentDataOptions successfully`, func() {
				// Construct an instance of the AgentInfrastructure model
				agentInfrastructureModel := new(schematicsv1.AgentInfrastructure)
				Expect(agentInfrastructureModel).ToNot(BeNil())
				agentInfrastructureModel.InfraType = core.StringPtr("ibm_kubernetes")
				agentInfrastructureModel.ClusterID = core.StringPtr("testString")
				agentInfrastructureModel.ClusterResourceGroup = core.StringPtr("testString")
				agentInfrastructureModel.CosInstanceName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketName = core.StringPtr("testString")
				agentInfrastructureModel.CosBucketRegion = core.StringPtr("testString")
				Expect(agentInfrastructureModel.InfraType).To(Equal(core.StringPtr("ibm_kubernetes")))
				Expect(agentInfrastructureModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(agentInfrastructureModel.ClusterResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(agentInfrastructureModel.CosInstanceName).To(Equal(core.StringPtr("testString")))
				Expect(agentInfrastructureModel.CosBucketName).To(Equal(core.StringPtr("testString")))
				Expect(agentInfrastructureModel.CosBucketRegion).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the AgentMetadataInfo model
				agentMetadataInfoModel := new(schematicsv1.AgentMetadataInfo)
				Expect(agentMetadataInfoModel).ToNot(BeNil())
				agentMetadataInfoModel.Name = core.StringPtr("purpose")
				agentMetadataInfoModel.Value = []string{"git", "terraform", "ansible"}
				Expect(agentMetadataInfoModel.Name).To(Equal(core.StringPtr("purpose")))
				Expect(agentMetadataInfoModel.Value).To(Equal([]string{"git", "terraform", "ansible"}))

				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))

				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				Expect(agentUserStateModel).ToNot(BeNil())
				agentUserStateModel.State = core.StringPtr("enable")
				Expect(agentUserStateModel.State).To(Equal(core.StringPtr("enable")))

				// Construct an instance of the AgentKPIData model
				agentKpiDataModel := new(schematicsv1.AgentKPIData)
				Expect(agentKpiDataModel).ToNot(BeNil())
				agentKpiDataModel.AvailabilityIndicator = core.StringPtr("available")
				agentKpiDataModel.LifecycleIndicator = core.StringPtr("consistent")
				agentKpiDataModel.PercentUsageIndicator = core.StringPtr("testString")
				agentKpiDataModel.ApplicationIndicators = []interface{}{"testString"}
				agentKpiDataModel.InfraIndicators = []interface{}{"testString"}
				Expect(agentKpiDataModel.AvailabilityIndicator).To(Equal(core.StringPtr("available")))
				Expect(agentKpiDataModel.LifecycleIndicator).To(Equal(core.StringPtr("consistent")))
				Expect(agentKpiDataModel.PercentUsageIndicator).To(Equal(core.StringPtr("testString")))
				Expect(agentKpiDataModel.ApplicationIndicators).To(Equal([]interface{}{"testString"}))
				Expect(agentKpiDataModel.InfraIndicators).To(Equal([]interface{}{"testString"}))

				// Construct an instance of the UpdateAgentDataOptions model
				agentID := "testString"
				updateAgentDataOptionsName := "MyDevAgent"
				updateAgentDataOptionsResourceGroup := "Default"
				updateAgentDataOptionsVersion := "v1.0.0"
				updateAgentDataOptionsSchematicsLocation := "us-south"
				updateAgentDataOptionsAgentLocation := "us-south"
				var updateAgentDataOptionsAgentInfrastructure *schematicsv1.AgentInfrastructure = nil
				updateAgentDataOptionsModel := schematicsService.NewUpdateAgentDataOptions(agentID, updateAgentDataOptionsName, updateAgentDataOptionsResourceGroup, updateAgentDataOptionsVersion, updateAgentDataOptionsSchematicsLocation, updateAgentDataOptionsAgentLocation, updateAgentDataOptionsAgentInfrastructure)
				updateAgentDataOptionsModel.SetAgentID("testString")
				updateAgentDataOptionsModel.SetName("MyDevAgent")
				updateAgentDataOptionsModel.SetResourceGroup("Default")
				updateAgentDataOptionsModel.SetVersion("v1.0.0")
				updateAgentDataOptionsModel.SetSchematicsLocation("us-south")
				updateAgentDataOptionsModel.SetAgentLocation("us-south")
				updateAgentDataOptionsModel.SetAgentInfrastructure(agentInfrastructureModel)
				updateAgentDataOptionsModel.SetDescription("Create Agent")
				updateAgentDataOptionsModel.SetTags([]string{"testString"})
				updateAgentDataOptionsModel.SetAgentMetadata([]schematicsv1.AgentMetadataInfo{*agentMetadataInfoModel})
				updateAgentDataOptionsModel.SetAgentInputs([]schematicsv1.VariableData{*variableDataModel})
				updateAgentDataOptionsModel.SetUserState(agentUserStateModel)
				updateAgentDataOptionsModel.SetAgentKpi(agentKpiDataModel)
				updateAgentDataOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateAgentDataOptionsModel).ToNot(BeNil())
				Expect(updateAgentDataOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(updateAgentDataOptionsModel.Name).To(Equal(core.StringPtr("MyDevAgent")))
				Expect(updateAgentDataOptionsModel.ResourceGroup).To(Equal(core.StringPtr("Default")))
				Expect(updateAgentDataOptionsModel.Version).To(Equal(core.StringPtr("v1.0.0")))
				Expect(updateAgentDataOptionsModel.SchematicsLocation).To(Equal(core.StringPtr("us-south")))
				Expect(updateAgentDataOptionsModel.AgentLocation).To(Equal(core.StringPtr("us-south")))
				Expect(updateAgentDataOptionsModel.AgentInfrastructure).To(Equal(agentInfrastructureModel))
				Expect(updateAgentDataOptionsModel.Description).To(Equal(core.StringPtr("Create Agent")))
				Expect(updateAgentDataOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(updateAgentDataOptionsModel.AgentMetadata).To(Equal([]schematicsv1.AgentMetadataInfo{*agentMetadataInfoModel}))
				Expect(updateAgentDataOptionsModel.AgentInputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(updateAgentDataOptionsModel.UserState).To(Equal(agentUserStateModel))
				Expect(updateAgentDataOptionsModel.AgentKpi).To(Equal(agentKpiDataModel))
				Expect(updateAgentDataOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateAgentRegistrationOptions successfully`, func() {
				// Construct an instance of the AgentUserState model
				agentUserStateModel := new(schematicsv1.AgentUserState)
				Expect(agentUserStateModel).ToNot(BeNil())
				agentUserStateModel.State = core.StringPtr("enable")
				Expect(agentUserStateModel.State).To(Equal(core.StringPtr("enable")))

				// Construct an instance of the UpdateAgentRegistrationOptions model
				agentID := "testString"
				updateAgentRegistrationOptionsName := "MyDevAgent"
				updateAgentRegistrationOptionsAgentLocation := "us-south"
				updateAgentRegistrationOptionsLocation := "us-south"
				updateAgentRegistrationOptionsProfileID := "testString"
				updateAgentRegistrationOptionsModel := schematicsService.NewUpdateAgentRegistrationOptions(agentID, updateAgentRegistrationOptionsName, updateAgentRegistrationOptionsAgentLocation, updateAgentRegistrationOptionsLocation, updateAgentRegistrationOptionsProfileID)
				updateAgentRegistrationOptionsModel.SetAgentID("testString")
				updateAgentRegistrationOptionsModel.SetName("MyDevAgent")
				updateAgentRegistrationOptionsModel.SetAgentLocation("us-south")
				updateAgentRegistrationOptionsModel.SetLocation("us-south")
				updateAgentRegistrationOptionsModel.SetProfileID("testString")
				updateAgentRegistrationOptionsModel.SetDescription("Register agent")
				updateAgentRegistrationOptionsModel.SetResourceGroup("testString")
				updateAgentRegistrationOptionsModel.SetTags([]string{"testString"})
				updateAgentRegistrationOptionsModel.SetUserState(agentUserStateModel)
				updateAgentRegistrationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateAgentRegistrationOptionsModel).ToNot(BeNil())
				Expect(updateAgentRegistrationOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(updateAgentRegistrationOptionsModel.Name).To(Equal(core.StringPtr("MyDevAgent")))
				Expect(updateAgentRegistrationOptionsModel.AgentLocation).To(Equal(core.StringPtr("us-south")))
				Expect(updateAgentRegistrationOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(updateAgentRegistrationOptionsModel.ProfileID).To(Equal(core.StringPtr("testString")))
				Expect(updateAgentRegistrationOptionsModel.Description).To(Equal(core.StringPtr("Register agent")))
				Expect(updateAgentRegistrationOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(updateAgentRegistrationOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(updateAgentRegistrationOptionsModel.UserState).To(Equal(agentUserStateModel))
				Expect(updateAgentRegistrationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateJobOptions successfully`, func() {
				// Construct an instance of the VariableMetadata model
				variableMetadataModel := new(schematicsv1.VariableMetadata)
				Expect(variableMetadataModel).ToNot(BeNil())
				variableMetadataModel.Type = core.StringPtr("boolean")
				variableMetadataModel.Aliases = []string{"testString"}
				variableMetadataModel.Description = core.StringPtr("testString")
				variableMetadataModel.CloudDataType = core.StringPtr("testString")
				variableMetadataModel.DefaultValue = core.StringPtr("testString")
				variableMetadataModel.LinkStatus = core.StringPtr("normal")
				variableMetadataModel.Secure = core.BoolPtr(true)
				variableMetadataModel.Immutable = core.BoolPtr(true)
				variableMetadataModel.Hidden = core.BoolPtr(true)
				variableMetadataModel.Required = core.BoolPtr(true)
				variableMetadataModel.Options = []string{"testString"}
				variableMetadataModel.MinValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxValue = core.Int64Ptr(int64(38))
				variableMetadataModel.MinLength = core.Int64Ptr(int64(38))
				variableMetadataModel.MaxLength = core.Int64Ptr(int64(38))
				variableMetadataModel.Matches = core.StringPtr("testString")
				variableMetadataModel.Position = core.Int64Ptr(int64(38))
				variableMetadataModel.GroupBy = core.StringPtr("testString")
				variableMetadataModel.Source = core.StringPtr("testString")
				Expect(variableMetadataModel.Type).To(Equal(core.StringPtr("boolean")))
				Expect(variableMetadataModel.Aliases).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.CloudDataType).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.DefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.LinkStatus).To(Equal(core.StringPtr("normal")))
				Expect(variableMetadataModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Immutable).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Required).To(Equal(core.BoolPtr(true)))
				Expect(variableMetadataModel.Options).To(Equal([]string{"testString"}))
				Expect(variableMetadataModel.MinValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MinLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.MaxLength).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.Matches).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Position).To(Equal(core.Int64Ptr(int64(38))))
				Expect(variableMetadataModel.GroupBy).To(Equal(core.StringPtr("testString")))
				Expect(variableMetadataModel.Source).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the VariableData model
				variableDataModel := new(schematicsv1.VariableData)
				Expect(variableDataModel).ToNot(BeNil())
				variableDataModel.Name = core.StringPtr("testString")
				variableDataModel.Value = core.StringPtr("testString")
				variableDataModel.UseDefault = core.BoolPtr(true)
				variableDataModel.Metadata = variableMetadataModel
				Expect(variableDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(variableDataModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(variableDataModel.Metadata).To(Equal(variableMetadataModel))

				// Construct an instance of the JobStatusWorkitem model
				jobStatusWorkitemModel := new(schematicsv1.JobStatusWorkitem)
				Expect(jobStatusWorkitemModel).ToNot(BeNil())
				jobStatusWorkitemModel.WorkspaceID = core.StringPtr("testString")
				jobStatusWorkitemModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkitemModel.JobID = core.StringPtr("testString")
				jobStatusWorkitemModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkitemModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkitemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobStatusWorkitemModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkitemModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkitemModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobStatusFlow model
				jobStatusFlowModel := new(schematicsv1.JobStatusFlow)
				Expect(jobStatusFlowModel).ToNot(BeNil())
				jobStatusFlowModel.FlowID = core.StringPtr("testString")
				jobStatusFlowModel.FlowName = core.StringPtr("testString")
				jobStatusFlowModel.StatusCode = core.StringPtr("job_pending")
				jobStatusFlowModel.StatusMessage = core.StringPtr("testString")
				jobStatusFlowModel.Workitems = []schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}
				jobStatusFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobStatusFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusFlowModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusFlowModel.Workitems).To(Equal([]schematicsv1.JobStatusWorkitem{*jobStatusWorkitemModel}))
				Expect(jobStatusFlowModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobStatusTemplate model
				jobStatusTemplateModel := new(schematicsv1.JobStatusTemplate)
				Expect(jobStatusTemplateModel).ToNot(BeNil())
				jobStatusTemplateModel.TemplateID = core.StringPtr("testString")
				jobStatusTemplateModel.TemplateName = core.StringPtr("testString")
				jobStatusTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobStatusTemplateModel.StatusCode = core.StringPtr("job_pending")
				jobStatusTemplateModel.StatusMessage = core.StringPtr("testString")
				jobStatusTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobStatusTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobStatusTemplateModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusTemplateModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobStatusWorkspace model
				jobStatusWorkspaceModel := new(schematicsv1.JobStatusWorkspace)
				Expect(jobStatusWorkspaceModel).ToNot(BeNil())
				jobStatusWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobStatusWorkspaceModel.StatusCode = core.StringPtr("job_pending")
				jobStatusWorkspaceModel.StatusMessage = core.StringPtr("testString")
				jobStatusWorkspaceModel.FlowStatus = jobStatusFlowModel
				jobStatusWorkspaceModel.TemplateStatus = []schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}
				jobStatusWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobStatusWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusWorkspaceModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusWorkspaceModel.FlowStatus).To(Equal(jobStatusFlowModel))
				Expect(jobStatusWorkspaceModel.TemplateStatus).To(Equal([]schematicsv1.JobStatusTemplate{*jobStatusTemplateModel}))
				Expect(jobStatusWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobStatusAction model
				jobStatusActionModel := new(schematicsv1.JobStatusAction)
				Expect(jobStatusActionModel).ToNot(BeNil())
				jobStatusActionModel.ActionName = core.StringPtr("testString")
				jobStatusActionModel.StatusCode = core.StringPtr("job_pending")
				jobStatusActionModel.StatusMessage = core.StringPtr("testString")
				jobStatusActionModel.BastionStatusCode = core.StringPtr("none")
				jobStatusActionModel.BastionStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.TargetsStatusCode = core.StringPtr("none")
				jobStatusActionModel.TargetsStatusMessage = core.StringPtr("testString")
				jobStatusActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobStatusActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusActionModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.BastionStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.BastionStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.TargetsStatusCode).To(Equal(core.StringPtr("none")))
				Expect(jobStatusActionModel.TargetsStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusActionModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobStatusSchematicsResources model
				jobStatusSchematicsResourcesModel := new(schematicsv1.JobStatusSchematicsResources)
				Expect(jobStatusSchematicsResourcesModel).ToNot(BeNil())
				jobStatusSchematicsResourcesModel.StatusCode = core.StringPtr("job_pending")
				jobStatusSchematicsResourcesModel.StatusMessage = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.SchematicsResourceID = core.StringPtr("testString")
				jobStatusSchematicsResourcesModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobStatusSchematicsResourcesModel.StatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSchematicsResourcesModel.StatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.SchematicsResourceID).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSchematicsResourcesModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobStatusSystem model
				jobStatusSystemModel := new(schematicsv1.JobStatusSystem)
				Expect(jobStatusSystemModel).ToNot(BeNil())
				jobStatusSystemModel.SystemStatusMessage = core.StringPtr("testString")
				jobStatusSystemModel.SystemStatusCode = core.StringPtr("job_pending")
				jobStatusSystemModel.SchematicsResourceStatus = []schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}
				jobStatusSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobStatusSystemModel.SystemStatusMessage).To(Equal(core.StringPtr("testString")))
				Expect(jobStatusSystemModel.SystemStatusCode).To(Equal(core.StringPtr("job_pending")))
				Expect(jobStatusSystemModel.SchematicsResourceStatus).To(Equal([]schematicsv1.JobStatusSchematicsResources{*jobStatusSchematicsResourcesModel}))
				Expect(jobStatusSystemModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobStatus model
				jobStatusModel := new(schematicsv1.JobStatus)
				Expect(jobStatusModel).ToNot(BeNil())
				jobStatusModel.PositionInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.TotalInQueue = core.Float64Ptr(float64(72.5))
				jobStatusModel.WorkspaceJobStatus = jobStatusWorkspaceModel
				jobStatusModel.ActionJobStatus = jobStatusActionModel
				jobStatusModel.SystemJobStatus = jobStatusSystemModel
				jobStatusModel.FlowJobStatus = jobStatusFlowModel
				Expect(jobStatusModel.PositionInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.TotalInQueue).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobStatusModel.WorkspaceJobStatus).To(Equal(jobStatusWorkspaceModel))
				Expect(jobStatusModel.ActionJobStatus).To(Equal(jobStatusActionModel))
				Expect(jobStatusModel.SystemJobStatus).To(Equal(jobStatusSystemModel))
				Expect(jobStatusModel.FlowJobStatus).To(Equal(jobStatusFlowModel))

				// Construct an instance of the CartOrderData model
				cartOrderDataModel := new(schematicsv1.CartOrderData)
				Expect(cartOrderDataModel).ToNot(BeNil())
				cartOrderDataModel.Name = core.StringPtr("testString")
				cartOrderDataModel.Value = core.StringPtr("testString")
				cartOrderDataModel.Type = core.StringPtr("testString")
				cartOrderDataModel.UsageKind = []string{"servicetags"}
				Expect(cartOrderDataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(cartOrderDataModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(cartOrderDataModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(cartOrderDataModel.UsageKind).To(Equal([]string{"servicetags"}))

				// Construct an instance of the JobDataTemplate model
				jobDataTemplateModel := new(schematicsv1.JobDataTemplate)
				Expect(jobDataTemplateModel).ToNot(BeNil())
				jobDataTemplateModel.TemplateID = core.StringPtr("testString")
				jobDataTemplateModel.TemplateName = core.StringPtr("testString")
				jobDataTemplateModel.FlowIndex = core.Int64Ptr(int64(38))
				jobDataTemplateModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataTemplateModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobDataTemplateModel.TemplateID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.TemplateName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataTemplateModel.FlowIndex).To(Equal(core.Int64Ptr(int64(38))))
				Expect(jobDataTemplateModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataTemplateModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobDataWorkspace model
				jobDataWorkspaceModel := new(schematicsv1.JobDataWorkspace)
				Expect(jobDataWorkspaceModel).ToNot(BeNil())
				jobDataWorkspaceModel.WorkspaceName = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowID = core.StringPtr("testString")
				jobDataWorkspaceModel.FlowName = core.StringPtr("testString")
				jobDataWorkspaceModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkspaceModel.TemplateData = []schematicsv1.JobDataTemplate{*jobDataTemplateModel}
				jobDataWorkspaceModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobDataWorkspaceModel.WorkspaceName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkspaceModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkspaceModel.TemplateData).To(Equal([]schematicsv1.JobDataTemplate{*jobDataTemplateModel}))
				Expect(jobDataWorkspaceModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the InventoryResourceRecord model
				inventoryResourceRecordModel := new(schematicsv1.InventoryResourceRecord)
				Expect(inventoryResourceRecordModel).ToNot(BeNil())
				inventoryResourceRecordModel.Name = core.StringPtr("testString")
				inventoryResourceRecordModel.Description = core.StringPtr("testString")
				inventoryResourceRecordModel.Location = core.StringPtr("us-south")
				inventoryResourceRecordModel.ResourceGroup = core.StringPtr("testString")
				inventoryResourceRecordModel.InventoriesIni = core.StringPtr("testString")
				inventoryResourceRecordModel.ResourceQueries = []string{"testString"}
				Expect(inventoryResourceRecordModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(inventoryResourceRecordModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.InventoriesIni).To(Equal(core.StringPtr("testString")))
				Expect(inventoryResourceRecordModel.ResourceQueries).To(Equal([]string{"testString"}))

				// Construct an instance of the JobDataAction model
				jobDataActionModel := new(schematicsv1.JobDataAction)
				Expect(jobDataActionModel).ToNot(BeNil())
				jobDataActionModel.ActionName = core.StringPtr("testString")
				jobDataActionModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataActionModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				jobDataActionModel.InventoryRecord = inventoryResourceRecordModel
				jobDataActionModel.MaterializedInventory = core.StringPtr("testString")
				Expect(jobDataActionModel.ActionName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataActionModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataActionModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))
				Expect(jobDataActionModel.InventoryRecord).To(Equal(inventoryResourceRecordModel))
				Expect(jobDataActionModel.MaterializedInventory).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobDataSystem model
				jobDataSystemModel := new(schematicsv1.JobDataSystem)
				Expect(jobDataSystemModel).ToNot(BeNil())
				jobDataSystemModel.KeyID = core.StringPtr("testString")
				jobDataSystemModel.SchematicsResourceID = []string{"testString"}
				jobDataSystemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobDataSystemModel.KeyID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataSystemModel.SchematicsResourceID).To(Equal([]string{"testString"}))
				Expect(jobDataSystemModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the GitSource model
				gitSourceModel := new(schematicsv1.GitSource)
				Expect(gitSourceModel).ToNot(BeNil())
				gitSourceModel.ComputedGitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitRepoURL = core.StringPtr("testString")
				gitSourceModel.GitToken = core.StringPtr("testString")
				gitSourceModel.GitRepoFolder = core.StringPtr("testString")
				gitSourceModel.GitRelease = core.StringPtr("testString")
				gitSourceModel.GitBranch = core.StringPtr("testString")
				Expect(gitSourceModel.ComputedGitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitToken).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRepoFolder).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitRelease).To(Equal(core.StringPtr("testString")))
				Expect(gitSourceModel.GitBranch).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the CatalogSource model
				catalogSourceModel := new(schematicsv1.CatalogSource)
				Expect(catalogSourceModel).ToNot(BeNil())
				catalogSourceModel.CatalogName = core.StringPtr("testString")
				catalogSourceModel.CatalogID = core.StringPtr("testString")
				catalogSourceModel.OfferingName = core.StringPtr("testString")
				catalogSourceModel.OfferingVersion = core.StringPtr("testString")
				catalogSourceModel.OfferingKind = core.StringPtr("testString")
				catalogSourceModel.OfferingTargetKind = core.StringPtr("testString")
				catalogSourceModel.OfferingID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionID = core.StringPtr("testString")
				catalogSourceModel.OfferingVersionFlavourName = core.StringPtr("testString")
				catalogSourceModel.OfferingRepoURL = core.StringPtr("testString")
				catalogSourceModel.OfferingProvisionerWorkingDirectory = core.StringPtr("testString")
				catalogSourceModel.DryRun = core.BoolPtr(true)
				catalogSourceModel.OwningAccount = core.StringPtr("testString")
				catalogSourceModel.ItemIconURL = core.StringPtr("testString")
				catalogSourceModel.ItemID = core.StringPtr("testString")
				catalogSourceModel.ItemName = core.StringPtr("testString")
				catalogSourceModel.ItemReadmeURL = core.StringPtr("testString")
				catalogSourceModel.ItemURL = core.StringPtr("testString")
				catalogSourceModel.LaunchURL = core.StringPtr("testString")
				Expect(catalogSourceModel.CatalogName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.CatalogID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingKind).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingTargetKind).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersionID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingVersionFlavourName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingRepoURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.OfferingProvisionerWorkingDirectory).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.DryRun).To(Equal(core.BoolPtr(true)))
				Expect(catalogSourceModel.OwningAccount).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemIconURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemID).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemName).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.ItemURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogSourceModel.LaunchURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ExternalSource model
				externalSourceModel := new(schematicsv1.ExternalSource)
				Expect(externalSourceModel).ToNot(BeNil())
				externalSourceModel.SourceType = core.StringPtr("local")
				externalSourceModel.Git = gitSourceModel
				externalSourceModel.Catalog = catalogSourceModel
				Expect(externalSourceModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(externalSourceModel.Git).To(Equal(gitSourceModel))
				Expect(externalSourceModel.Catalog).To(Equal(catalogSourceModel))

				// Construct an instance of the JobDataWorkItemLastJob model
				jobDataWorkItemLastJobModel := new(schematicsv1.JobDataWorkItemLastJob)
				Expect(jobDataWorkItemLastJobModel).ToNot(BeNil())
				jobDataWorkItemLastJobModel.CommandObject = core.StringPtr("workspace")
				jobDataWorkItemLastJobModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.CommandName = core.StringPtr("workspace_plan")
				jobDataWorkItemLastJobModel.JobID = core.StringPtr("testString")
				jobDataWorkItemLastJobModel.JobStatus = core.StringPtr("job_pending")
				Expect(jobDataWorkItemLastJobModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(jobDataWorkItemLastJobModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemLastJobModel.JobStatus).To(Equal(core.StringPtr("job_pending")))

				// Construct an instance of the JobDataWorkItem model
				jobDataWorkItemModel := new(schematicsv1.JobDataWorkItem)
				Expect(jobDataWorkItemModel).ToNot(BeNil())
				jobDataWorkItemModel.CommandObjectID = core.StringPtr("testString")
				jobDataWorkItemModel.CommandObjectName = core.StringPtr("testString")
				jobDataWorkItemModel.Layers = core.StringPtr("testString")
				jobDataWorkItemModel.SourceType = core.StringPtr("local")
				jobDataWorkItemModel.Source = externalSourceModel
				jobDataWorkItemModel.Inputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Outputs = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.Settings = []schematicsv1.VariableData{*variableDataModel}
				jobDataWorkItemModel.LastJob = jobDataWorkItemLastJobModel
				jobDataWorkItemModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobDataWorkItemModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.CommandObjectName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.Layers).To(Equal(core.StringPtr("testString")))
				Expect(jobDataWorkItemModel.SourceType).To(Equal(core.StringPtr("local")))
				Expect(jobDataWorkItemModel.Source).To(Equal(externalSourceModel))
				Expect(jobDataWorkItemModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Outputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(jobDataWorkItemModel.LastJob).To(Equal(jobDataWorkItemLastJobModel))
				Expect(jobDataWorkItemModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobDataFlow model
				jobDataFlowModel := new(schematicsv1.JobDataFlow)
				Expect(jobDataFlowModel).ToNot(BeNil())
				jobDataFlowModel.FlowID = core.StringPtr("testString")
				jobDataFlowModel.FlowName = core.StringPtr("testString")
				jobDataFlowModel.Workitems = []schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}
				jobDataFlowModel.UpdatedAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(jobDataFlowModel.FlowID).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.FlowName).To(Equal(core.StringPtr("testString")))
				Expect(jobDataFlowModel.Workitems).To(Equal([]schematicsv1.JobDataWorkItem{*jobDataWorkItemModel}))
				Expect(jobDataFlowModel.UpdatedAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the JobData model
				jobDataModel := new(schematicsv1.JobData)
				Expect(jobDataModel).ToNot(BeNil())
				jobDataModel.JobType = core.StringPtr("repo_download_job")
				jobDataModel.WorkspaceJobData = jobDataWorkspaceModel
				jobDataModel.ActionJobData = jobDataActionModel
				jobDataModel.SystemJobData = jobDataSystemModel
				jobDataModel.FlowJobData = jobDataFlowModel
				Expect(jobDataModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobDataModel.WorkspaceJobData).To(Equal(jobDataWorkspaceModel))
				Expect(jobDataModel.ActionJobData).To(Equal(jobDataActionModel))
				Expect(jobDataModel.SystemJobData).To(Equal(jobDataSystemModel))
				Expect(jobDataModel.FlowJobData).To(Equal(jobDataFlowModel))

				// Construct an instance of the BastionResourceDefinition model
				bastionResourceDefinitionModel := new(schematicsv1.BastionResourceDefinition)
				Expect(bastionResourceDefinitionModel).ToNot(BeNil())
				bastionResourceDefinitionModel.Name = core.StringPtr("testString")
				bastionResourceDefinitionModel.Host = core.StringPtr("testString")
				Expect(bastionResourceDefinitionModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(bastionResourceDefinitionModel.Host).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryRepoDownloadJob model
				jobLogSummaryRepoDownloadJobModel := new(schematicsv1.JobLogSummaryRepoDownloadJob)
				Expect(jobLogSummaryRepoDownloadJobModel).ToNot(BeNil())

				// Construct an instance of the JobLogSummaryWorkspaceJob model
				jobLogSummaryWorkspaceJobModel := new(schematicsv1.JobLogSummaryWorkspaceJob)
				Expect(jobLogSummaryWorkspaceJobModel).ToNot(BeNil())

				// Construct an instance of the JobLogSummaryWorkitems model
				jobLogSummaryWorkitemsModel := new(schematicsv1.JobLogSummaryWorkitems)
				Expect(jobLogSummaryWorkitemsModel).ToNot(BeNil())
				jobLogSummaryWorkitemsModel.WorkspaceID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.JobID = core.StringPtr("testString")
				jobLogSummaryWorkitemsModel.LogURL = core.StringPtr("testString")
				Expect(jobLogSummaryWorkitemsModel.WorkspaceID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(jobLogSummaryWorkitemsModel.LogURL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the JobLogSummaryFlowJob model
				jobLogSummaryFlowJobModel := new(schematicsv1.JobLogSummaryFlowJob)
				Expect(jobLogSummaryFlowJobModel).ToNot(BeNil())
				jobLogSummaryFlowJobModel.Workitems = []schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}
				Expect(jobLogSummaryFlowJobModel.Workitems).To(Equal([]schematicsv1.JobLogSummaryWorkitems{*jobLogSummaryWorkitemsModel}))

				// Construct an instance of the JobLogSummaryActionJobRecap model
				jobLogSummaryActionJobRecapModel := new(schematicsv1.JobLogSummaryActionJobRecap)
				Expect(jobLogSummaryActionJobRecapModel).ToNot(BeNil())
				jobLogSummaryActionJobRecapModel.Target = []string{"testString"}
				jobLogSummaryActionJobRecapModel.Ok = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Changed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Failed = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Skipped = core.Float64Ptr(float64(72.5))
				jobLogSummaryActionJobRecapModel.Unreachable = core.Float64Ptr(float64(72.5))
				Expect(jobLogSummaryActionJobRecapModel.Target).To(Equal([]string{"testString"}))
				Expect(jobLogSummaryActionJobRecapModel.Ok).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Changed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Skipped).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummaryActionJobRecapModel.Unreachable).To(Equal(core.Float64Ptr(float64(72.5))))

				// Construct an instance of the JobLogSummaryActionJob model
				jobLogSummaryActionJobModel := new(schematicsv1.JobLogSummaryActionJob)
				Expect(jobLogSummaryActionJobModel).ToNot(BeNil())
				jobLogSummaryActionJobModel.Recap = jobLogSummaryActionJobRecapModel
				Expect(jobLogSummaryActionJobModel.Recap).To(Equal(jobLogSummaryActionJobRecapModel))

				// Construct an instance of the JobLogSummarySystemJob model
				jobLogSummarySystemJobModel := new(schematicsv1.JobLogSummarySystemJob)
				Expect(jobLogSummarySystemJobModel).ToNot(BeNil())
				jobLogSummarySystemJobModel.Success = core.Float64Ptr(float64(72.5))
				jobLogSummarySystemJobModel.Failed = core.Float64Ptr(float64(72.5))
				Expect(jobLogSummarySystemJobModel.Success).To(Equal(core.Float64Ptr(float64(72.5))))
				Expect(jobLogSummarySystemJobModel.Failed).To(Equal(core.Float64Ptr(float64(72.5))))

				// Construct an instance of the JobLogSummary model
				jobLogSummaryModel := new(schematicsv1.JobLogSummary)
				Expect(jobLogSummaryModel).ToNot(BeNil())
				jobLogSummaryModel.JobType = core.StringPtr("repo_download_job")
				jobLogSummaryModel.RepoDownloadJob = jobLogSummaryRepoDownloadJobModel
				jobLogSummaryModel.WorkspaceJob = jobLogSummaryWorkspaceJobModel
				jobLogSummaryModel.FlowJob = jobLogSummaryFlowJobModel
				jobLogSummaryModel.ActionJob = jobLogSummaryActionJobModel
				jobLogSummaryModel.SystemJob = jobLogSummarySystemJobModel
				Expect(jobLogSummaryModel.JobType).To(Equal(core.StringPtr("repo_download_job")))
				Expect(jobLogSummaryModel.RepoDownloadJob).To(Equal(jobLogSummaryRepoDownloadJobModel))
				Expect(jobLogSummaryModel.WorkspaceJob).To(Equal(jobLogSummaryWorkspaceJobModel))
				Expect(jobLogSummaryModel.FlowJob).To(Equal(jobLogSummaryFlowJobModel))
				Expect(jobLogSummaryModel.ActionJob).To(Equal(jobLogSummaryActionJobModel))
				Expect(jobLogSummaryModel.SystemJob).To(Equal(jobLogSummarySystemJobModel))

				// Construct an instance of the AgentInfo model
				agentInfoModel := new(schematicsv1.AgentInfo)
				Expect(agentInfoModel).ToNot(BeNil())
				agentInfoModel.ID = core.StringPtr("testString")
				agentInfoModel.Name = core.StringPtr("testString")
				agentInfoModel.AssignmentPolicyID = core.StringPtr("testString")
				Expect(agentInfoModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(agentInfoModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(agentInfoModel.AssignmentPolicyID).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateJobOptions model
				jobID := "testString"
				refreshToken := "testString"
				updateJobOptionsModel := schematicsService.NewUpdateJobOptions(jobID, refreshToken)
				updateJobOptionsModel.SetJobID("testString")
				updateJobOptionsModel.SetRefreshToken("testString")
				updateJobOptionsModel.SetCommandObject("workspace")
				updateJobOptionsModel.SetCommandObjectID("testString")
				updateJobOptionsModel.SetCommandName("workspace_plan")
				updateJobOptionsModel.SetCommandParameter("testString")
				updateJobOptionsModel.SetCommandOptions([]string{"testString"})
				updateJobOptionsModel.SetInputs([]schematicsv1.VariableData{*variableDataModel})
				updateJobOptionsModel.SetSettings([]schematicsv1.VariableData{*variableDataModel})
				updateJobOptionsModel.SetTags([]string{"testString"})
				updateJobOptionsModel.SetLocation("us-south")
				updateJobOptionsModel.SetStatus(jobStatusModel)
				updateJobOptionsModel.SetCartOrderData([]schematicsv1.CartOrderData{*cartOrderDataModel})
				updateJobOptionsModel.SetData(jobDataModel)
				updateJobOptionsModel.SetBastion(bastionResourceDefinitionModel)
				updateJobOptionsModel.SetLogSummary(jobLogSummaryModel)
				updateJobOptionsModel.SetAgent(agentInfoModel)
				updateJobOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateJobOptionsModel).ToNot(BeNil())
				Expect(updateJobOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(updateJobOptionsModel.RefreshToken).To(Equal(core.StringPtr("testString")))
				Expect(updateJobOptionsModel.CommandObject).To(Equal(core.StringPtr("workspace")))
				Expect(updateJobOptionsModel.CommandObjectID).To(Equal(core.StringPtr("testString")))
				Expect(updateJobOptionsModel.CommandName).To(Equal(core.StringPtr("workspace_plan")))
				Expect(updateJobOptionsModel.CommandParameter).To(Equal(core.StringPtr("testString")))
				Expect(updateJobOptionsModel.CommandOptions).To(Equal([]string{"testString"}))
				Expect(updateJobOptionsModel.Inputs).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(updateJobOptionsModel.Settings).To(Equal([]schematicsv1.VariableData{*variableDataModel}))
				Expect(updateJobOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(updateJobOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(updateJobOptionsModel.Status).To(Equal(jobStatusModel))
				Expect(updateJobOptionsModel.CartOrderData).To(Equal([]schematicsv1.CartOrderData{*cartOrderDataModel}))
				Expect(updateJobOptionsModel.Data).To(Equal(jobDataModel))
				Expect(updateJobOptionsModel.Bastion).To(Equal(bastionResourceDefinitionModel))
				Expect(updateJobOptionsModel.LogSummary).To(Equal(jobLogSummaryModel))
				Expect(updateJobOptionsModel.Agent).To(Equal(agentInfoModel))
				Expect(updateJobOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateKmsSettingsOptions successfully`, func() {
				// Construct an instance of the KMSSettingsPrimaryCrk model
				kmsSettingsPrimaryCrkModel := new(schematicsv1.KMSSettingsPrimaryCrk)
				Expect(kmsSettingsPrimaryCrkModel).ToNot(BeNil())
				kmsSettingsPrimaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsPrimaryCrkModel.KeyCrn = core.StringPtr("testString")
				Expect(kmsSettingsPrimaryCrkModel.KmsName).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsPrimaryCrkModel.KmsPrivateEndpoint).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsPrimaryCrkModel.KeyCrn).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the KMSSettingsSecondaryCrk model
				kmsSettingsSecondaryCrkModel := new(schematicsv1.KMSSettingsSecondaryCrk)
				Expect(kmsSettingsSecondaryCrkModel).ToNot(BeNil())
				kmsSettingsSecondaryCrkModel.KmsName = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint = core.StringPtr("testString")
				kmsSettingsSecondaryCrkModel.KeyCrn = core.StringPtr("testString")
				Expect(kmsSettingsSecondaryCrkModel.KmsName).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsSecondaryCrkModel.KmsPrivateEndpoint).To(Equal(core.StringPtr("testString")))
				Expect(kmsSettingsSecondaryCrkModel.KeyCrn).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateKmsSettingsOptions model
				updateKmsSettingsOptionsModel := schematicsService.NewUpdateKmsSettingsOptions()
				updateKmsSettingsOptionsModel.SetLocation("testString")
				updateKmsSettingsOptionsModel.SetEncryptionScheme("testString")
				updateKmsSettingsOptionsModel.SetResourceGroup("testString")
				updateKmsSettingsOptionsModel.SetPrimaryCrk(kmsSettingsPrimaryCrkModel)
				updateKmsSettingsOptionsModel.SetSecondaryCrk(kmsSettingsSecondaryCrkModel)
				updateKmsSettingsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateKmsSettingsOptionsModel).ToNot(BeNil())
				Expect(updateKmsSettingsOptionsModel.Location).To(Equal(core.StringPtr("testString")))
				Expect(updateKmsSettingsOptionsModel.EncryptionScheme).To(Equal(core.StringPtr("testString")))
				Expect(updateKmsSettingsOptionsModel.ResourceGroup).To(Equal(core.StringPtr("testString")))
				Expect(updateKmsSettingsOptionsModel.PrimaryCrk).To(Equal(kmsSettingsPrimaryCrkModel))
				Expect(updateKmsSettingsOptionsModel.SecondaryCrk).To(Equal(kmsSettingsSecondaryCrkModel))
				Expect(updateKmsSettingsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdatePolicyOptions successfully`, func() {
				// Construct an instance of the UserState model
				userStateModel := new(schematicsv1.UserState)
				Expect(userStateModel).ToNot(BeNil())
				userStateModel.State = core.StringPtr("draft")
				userStateModel.SetBy = core.StringPtr("testString")
				userStateModel.SetAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(userStateModel.State).To(Equal(core.StringPtr("draft")))
				Expect(userStateModel.SetBy).To(Equal(core.StringPtr("testString")))
				Expect(userStateModel.SetAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the PolicyObjectSelector model
				policyObjectSelectorModel := new(schematicsv1.PolicyObjectSelector)
				Expect(policyObjectSelectorModel).ToNot(BeNil())
				policyObjectSelectorModel.Kind = core.StringPtr("workspace")
				policyObjectSelectorModel.Tags = []string{"testString"}
				policyObjectSelectorModel.ResourceGroups = []string{"testString"}
				policyObjectSelectorModel.Locations = []string{"us-south"}
				Expect(policyObjectSelectorModel.Kind).To(Equal(core.StringPtr("workspace")))
				Expect(policyObjectSelectorModel.Tags).To(Equal([]string{"testString"}))
				Expect(policyObjectSelectorModel.ResourceGroups).To(Equal([]string{"testString"}))
				Expect(policyObjectSelectorModel.Locations).To(Equal([]string{"us-south"}))

				// Construct an instance of the PolicyObjects model
				policyObjectsModel := new(schematicsv1.PolicyObjects)
				Expect(policyObjectsModel).ToNot(BeNil())
				policyObjectsModel.SelectorKind = core.StringPtr("ids")
				policyObjectsModel.SelectorIds = []string{"testString"}
				policyObjectsModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}
				Expect(policyObjectsModel.SelectorKind).To(Equal(core.StringPtr("ids")))
				Expect(policyObjectsModel.SelectorIds).To(Equal([]string{"testString"}))
				Expect(policyObjectsModel.SelectorScope).To(Equal([]schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}))

				// Construct an instance of the AgentAssignmentPolicyParameter model
				agentAssignmentPolicyParameterModel := new(schematicsv1.AgentAssignmentPolicyParameter)
				Expect(agentAssignmentPolicyParameterModel).ToNot(BeNil())
				agentAssignmentPolicyParameterModel.SelectorKind = core.StringPtr("ids")
				agentAssignmentPolicyParameterModel.SelectorIds = []string{"testString"}
				agentAssignmentPolicyParameterModel.SelectorScope = []schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}
				Expect(agentAssignmentPolicyParameterModel.SelectorKind).To(Equal(core.StringPtr("ids")))
				Expect(agentAssignmentPolicyParameterModel.SelectorIds).To(Equal([]string{"testString"}))
				Expect(agentAssignmentPolicyParameterModel.SelectorScope).To(Equal([]schematicsv1.PolicyObjectSelector{*policyObjectSelectorModel}))

				// Construct an instance of the PolicyParameter model
				policyParameterModel := new(schematicsv1.PolicyParameter)
				Expect(policyParameterModel).ToNot(BeNil())
				policyParameterModel.AgentAssignmentPolicyParameter = agentAssignmentPolicyParameterModel
				Expect(policyParameterModel.AgentAssignmentPolicyParameter).To(Equal(agentAssignmentPolicyParameterModel))

				// Construct an instance of the ScopedResource model
				scopedResourceModel := new(schematicsv1.ScopedResource)
				Expect(scopedResourceModel).ToNot(BeNil())
				scopedResourceModel.Kind = core.StringPtr("workspace")
				scopedResourceModel.ID = core.StringPtr("testString")
				Expect(scopedResourceModel.Kind).To(Equal(core.StringPtr("workspace")))
				Expect(scopedResourceModel.ID).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdatePolicyOptions model
				policyID := "testString"
				updatePolicyOptionsModel := schematicsService.NewUpdatePolicyOptions(policyID)
				updatePolicyOptionsModel.SetPolicyID("testString")
				updatePolicyOptionsModel.SetName("Agent1-DevWS")
				updatePolicyOptionsModel.SetDescription("Policy for job execution of secured workspaces on agent1")
				updatePolicyOptionsModel.SetResourceGroup("Default")
				updatePolicyOptionsModel.SetTags([]string{"policy:secured-job"})
				updatePolicyOptionsModel.SetLocation("us-south")
				updatePolicyOptionsModel.SetState(userStateModel)
				updatePolicyOptionsModel.SetKind("agent_assignment_policy")
				updatePolicyOptionsModel.SetTarget(policyObjectsModel)
				updatePolicyOptionsModel.SetParameter(policyParameterModel)
				updatePolicyOptionsModel.SetScopedResources([]schematicsv1.ScopedResource{*scopedResourceModel})
				updatePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updatePolicyOptionsModel).ToNot(BeNil())
				Expect(updatePolicyOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(updatePolicyOptionsModel.Name).To(Equal(core.StringPtr("Agent1-DevWS")))
				Expect(updatePolicyOptionsModel.Description).To(Equal(core.StringPtr("Policy for job execution of secured workspaces on agent1")))
				Expect(updatePolicyOptionsModel.ResourceGroup).To(Equal(core.StringPtr("Default")))
				Expect(updatePolicyOptionsModel.Tags).To(Equal([]string{"policy:secured-job"}))
				Expect(updatePolicyOptionsModel.Location).To(Equal(core.StringPtr("us-south")))
				Expect(updatePolicyOptionsModel.State).To(Equal(userStateModel))
				Expect(updatePolicyOptionsModel.Kind).To(Equal(core.StringPtr("agent_assignment_policy")))
				Expect(updatePolicyOptionsModel.Target).To(Equal(policyObjectsModel))
				Expect(updatePolicyOptionsModel.Parameter).To(Equal(policyParameterModel))
				Expect(updatePolicyOptionsModel.ScopedResources).To(Equal([]schematicsv1.ScopedResource{*scopedResourceModel}))
				Expect(updatePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateWorkspaceOptions successfully`, func() {
				// Construct an instance of the ServiceExtensions model
				serviceExtensionsModel := new(schematicsv1.ServiceExtensions)
				Expect(serviceExtensionsModel).ToNot(BeNil())
				serviceExtensionsModel.Name = core.StringPtr("flavor")
				serviceExtensionsModel.Value = core.StringPtr("testString")
				serviceExtensionsModel.Type = core.StringPtr("string")
				Expect(serviceExtensionsModel.Name).To(Equal(core.StringPtr("flavor")))
				Expect(serviceExtensionsModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(serviceExtensionsModel.Type).To(Equal(core.StringPtr("string")))

				// Construct an instance of the CatalogRef model
				catalogRefModel := new(schematicsv1.CatalogRef)
				Expect(catalogRefModel).ToNot(BeNil())
				catalogRefModel.DryRun = core.BoolPtr(true)
				catalogRefModel.OwningAccount = core.StringPtr("testString")
				catalogRefModel.ItemIconURL = core.StringPtr("testString")
				catalogRefModel.ItemID = core.StringPtr("testString")
				catalogRefModel.ItemName = core.StringPtr("testString")
				catalogRefModel.ItemReadmeURL = core.StringPtr("testString")
				catalogRefModel.ItemURL = core.StringPtr("testString")
				catalogRefModel.LaunchURL = core.StringPtr("testString")
				catalogRefModel.OfferingVersion = core.StringPtr("testString")
				catalogRefModel.ServiceExtensions = []schematicsv1.ServiceExtensions{*serviceExtensionsModel}
				Expect(catalogRefModel.DryRun).To(Equal(core.BoolPtr(true)))
				Expect(catalogRefModel.OwningAccount).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemIconURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemID).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemName).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemReadmeURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ItemURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.LaunchURL).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.OfferingVersion).To(Equal(core.StringPtr("testString")))
				Expect(catalogRefModel.ServiceExtensions).To(Equal([]schematicsv1.ServiceExtensions{*serviceExtensionsModel}))

				// Construct an instance of the Dependencies model
				dependenciesModel := new(schematicsv1.Dependencies)
				Expect(dependenciesModel).ToNot(BeNil())
				dependenciesModel.Parents = []string{"testString"}
				dependenciesModel.Children = []string{"testString"}
				Expect(dependenciesModel.Parents).To(Equal([]string{"testString"}))
				Expect(dependenciesModel.Children).To(Equal([]string{"testString"}))

				// Construct an instance of the SharedTargetData model
				sharedTargetDataModel := new(schematicsv1.SharedTargetData)
				Expect(sharedTargetDataModel).ToNot(BeNil())
				sharedTargetDataModel.ClusterCreatedOn = core.StringPtr("testString")
				sharedTargetDataModel.ClusterID = core.StringPtr("testString")
				sharedTargetDataModel.ClusterName = core.StringPtr("testString")
				sharedTargetDataModel.ClusterType = core.StringPtr("testString")
				sharedTargetDataModel.EntitlementKeys = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				sharedTargetDataModel.Namespace = core.StringPtr("testString")
				sharedTargetDataModel.Region = core.StringPtr("testString")
				sharedTargetDataModel.ResourceGroupID = core.StringPtr("testString")
				sharedTargetDataModel.WorkerCount = core.Int64Ptr(int64(26))
				sharedTargetDataModel.WorkerMachineType = core.StringPtr("testString")
				Expect(sharedTargetDataModel.ClusterCreatedOn).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterID).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterName).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ClusterType).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.EntitlementKeys).To(Equal([]map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(sharedTargetDataModel.Namespace).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.Region).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(sharedTargetDataModel.WorkerCount).To(Equal(core.Int64Ptr(int64(26))))
				Expect(sharedTargetDataModel.WorkerMachineType).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the EnvironmentValuesMetadata model
				environmentValuesMetadataModel := new(schematicsv1.EnvironmentValuesMetadata)
				Expect(environmentValuesMetadataModel).ToNot(BeNil())
				environmentValuesMetadataModel.Hidden = core.BoolPtr(true)
				environmentValuesMetadataModel.Name = core.StringPtr("testString")
				environmentValuesMetadataModel.Secure = core.BoolPtr(true)
				Expect(environmentValuesMetadataModel.Hidden).To(Equal(core.BoolPtr(true)))
				Expect(environmentValuesMetadataModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(environmentValuesMetadataModel.Secure).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the InjectTerraformTemplateInnerTftParametersItem model
				injectTerraformTemplateInnerTftParametersItemModel := new(schematicsv1.InjectTerraformTemplateInnerTftParametersItem)
				Expect(injectTerraformTemplateInnerTftParametersItemModel).ToNot(BeNil())
				injectTerraformTemplateInnerTftParametersItemModel.Name = core.StringPtr("testString")
				injectTerraformTemplateInnerTftParametersItemModel.Value = core.StringPtr("testString")
				Expect(injectTerraformTemplateInnerTftParametersItemModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerTftParametersItemModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the InjectTerraformTemplateInner model
				injectTerraformTemplateInnerModel := new(schematicsv1.InjectTerraformTemplateInner)
				Expect(injectTerraformTemplateInnerModel).ToNot(BeNil())
				injectTerraformTemplateInnerModel.TftGitURL = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftGitToken = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftPrefix = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.InjectionType = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftName = core.StringPtr("testString")
				injectTerraformTemplateInnerModel.TftParameters = []schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}
				Expect(injectTerraformTemplateInnerModel.TftGitURL).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerModel.TftGitToken).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerModel.TftPrefix).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerModel.InjectionType).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerModel.TftName).To(Equal(core.StringPtr("testString")))
				Expect(injectTerraformTemplateInnerModel.TftParameters).To(Equal([]schematicsv1.InjectTerraformTemplateInnerTftParametersItem{*injectTerraformTemplateInnerTftParametersItemModel}))

				// Construct an instance of the WorkspaceVariableRequest model
				workspaceVariableRequestModel := new(schematicsv1.WorkspaceVariableRequest)
				Expect(workspaceVariableRequestModel).ToNot(BeNil())
				workspaceVariableRequestModel.Description = core.StringPtr("testString")
				workspaceVariableRequestModel.Name = core.StringPtr("testString")
				workspaceVariableRequestModel.Secure = core.BoolPtr(true)
				workspaceVariableRequestModel.Type = core.StringPtr("testString")
				workspaceVariableRequestModel.UseDefault = core.BoolPtr(true)
				workspaceVariableRequestModel.Value = core.StringPtr("testString")
				Expect(workspaceVariableRequestModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.Secure).To(Equal(core.BoolPtr(true)))
				Expect(workspaceVariableRequestModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(workspaceVariableRequestModel.UseDefault).To(Equal(core.BoolPtr(true)))
				Expect(workspaceVariableRequestModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the TemplateSourceDataRequest model
				templateSourceDataRequestModel := new(schematicsv1.TemplateSourceDataRequest)
				Expect(templateSourceDataRequestModel).ToNot(BeNil())
				templateSourceDataRequestModel.EnvValues = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.EnvValuesMetadata = []schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}
				templateSourceDataRequestModel.Folder = core.StringPtr("testString")
				templateSourceDataRequestModel.Compact = core.BoolPtr(true)
				templateSourceDataRequestModel.InitStateFile = core.StringPtr("testString")
				templateSourceDataRequestModel.Injectors = []schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}
				templateSourceDataRequestModel.Type = core.StringPtr("testString")
				templateSourceDataRequestModel.UninstallScriptName = core.StringPtr("testString")
				templateSourceDataRequestModel.Values = core.StringPtr("testString")
				templateSourceDataRequestModel.ValuesMetadata = []map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}
				templateSourceDataRequestModel.Variablestore = []schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}
				Expect(templateSourceDataRequestModel.EnvValues).To(Equal([]map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(templateSourceDataRequestModel.EnvValuesMetadata).To(Equal([]schematicsv1.EnvironmentValuesMetadata{*environmentValuesMetadataModel}))
				Expect(templateSourceDataRequestModel.Folder).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Compact).To(Equal(core.BoolPtr(true)))
				Expect(templateSourceDataRequestModel.InitStateFile).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Injectors).To(Equal([]schematicsv1.InjectTerraformTemplateInner{*injectTerraformTemplateInnerModel}))
				Expect(templateSourceDataRequestModel.Type).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.UninstallScriptName).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.Values).To(Equal(core.StringPtr("testString")))
				Expect(templateSourceDataRequestModel.ValuesMetadata).To(Equal([]map[string]interface{}{map[string]interface{}{"anyKey": "anyValue"}}))
				Expect(templateSourceDataRequestModel.Variablestore).To(Equal([]schematicsv1.WorkspaceVariableRequest{*workspaceVariableRequestModel}))

				// Construct an instance of the TemplateRepoUpdateRequest model
				templateRepoUpdateRequestModel := new(schematicsv1.TemplateRepoUpdateRequest)
				Expect(templateRepoUpdateRequestModel).ToNot(BeNil())
				templateRepoUpdateRequestModel.Branch = core.StringPtr("testString")
				templateRepoUpdateRequestModel.Release = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoShaValue = core.StringPtr("testString")
				templateRepoUpdateRequestModel.RepoURL = core.StringPtr("testString")
				templateRepoUpdateRequestModel.URL = core.StringPtr("testString")
				Expect(templateRepoUpdateRequestModel.Branch).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUpdateRequestModel.Release).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUpdateRequestModel.RepoShaValue).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUpdateRequestModel.RepoURL).To(Equal(core.StringPtr("testString")))
				Expect(templateRepoUpdateRequestModel.URL).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the WorkspaceStatusUpdateRequest model
				workspaceStatusUpdateRequestModel := new(schematicsv1.WorkspaceStatusUpdateRequest)
				Expect(workspaceStatusUpdateRequestModel).ToNot(BeNil())
				workspaceStatusUpdateRequestModel.Frozen = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.FrozenAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				workspaceStatusUpdateRequestModel.FrozenBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.Locked = core.BoolPtr(true)
				workspaceStatusUpdateRequestModel.LockedBy = core.StringPtr("testString")
				workspaceStatusUpdateRequestModel.LockedTime = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				Expect(workspaceStatusUpdateRequestModel.Frozen).To(Equal(core.BoolPtr(true)))
				Expect(workspaceStatusUpdateRequestModel.FrozenAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))
				Expect(workspaceStatusUpdateRequestModel.FrozenBy).To(Equal(core.StringPtr("testString")))
				Expect(workspaceStatusUpdateRequestModel.Locked).To(Equal(core.BoolPtr(true)))
				Expect(workspaceStatusUpdateRequestModel.LockedBy).To(Equal(core.StringPtr("testString")))
				Expect(workspaceStatusUpdateRequestModel.LockedTime).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))

				// Construct an instance of the WorkspaceStatusMessage model
				workspaceStatusMessageModel := new(schematicsv1.WorkspaceStatusMessage)
				Expect(workspaceStatusMessageModel).ToNot(BeNil())
				workspaceStatusMessageModel.StatusCode = core.StringPtr("testString")
				workspaceStatusMessageModel.StatusMsg = core.StringPtr("testString")
				Expect(workspaceStatusMessageModel.StatusCode).To(Equal(core.StringPtr("testString")))
				Expect(workspaceStatusMessageModel.StatusMsg).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpdateWorkspaceOptions model
				wID := "testString"
				updateWorkspaceOptionsModel := schematicsService.NewUpdateWorkspaceOptions(wID)
				updateWorkspaceOptionsModel.SetWID("testString")
				updateWorkspaceOptionsModel.SetCatalogRef(catalogRefModel)
				updateWorkspaceOptionsModel.SetDescription("testString")
				updateWorkspaceOptionsModel.SetDependencies(dependenciesModel)
				updateWorkspaceOptionsModel.SetName("testString")
				updateWorkspaceOptionsModel.SetSharedData(sharedTargetDataModel)
				updateWorkspaceOptionsModel.SetTags([]string{"testString"})
				updateWorkspaceOptionsModel.SetTemplateData([]schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel})
				updateWorkspaceOptionsModel.SetTemplateRepo(templateRepoUpdateRequestModel)
				updateWorkspaceOptionsModel.SetType([]string{"testString"})
				updateWorkspaceOptionsModel.SetWorkspaceStatus(workspaceStatusUpdateRequestModel)
				updateWorkspaceOptionsModel.SetWorkspaceStatusMsg(workspaceStatusMessageModel)
				updateWorkspaceOptionsModel.SetAgentID("testString")
				updateWorkspaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateWorkspaceOptionsModel).ToNot(BeNil())
				Expect(updateWorkspaceOptionsModel.WID).To(Equal(core.StringPtr("testString")))
				Expect(updateWorkspaceOptionsModel.CatalogRef).To(Equal(catalogRefModel))
				Expect(updateWorkspaceOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(updateWorkspaceOptionsModel.Dependencies).To(Equal(dependenciesModel))
				Expect(updateWorkspaceOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(updateWorkspaceOptionsModel.SharedData).To(Equal(sharedTargetDataModel))
				Expect(updateWorkspaceOptionsModel.Tags).To(Equal([]string{"testString"}))
				Expect(updateWorkspaceOptionsModel.TemplateData).To(Equal([]schematicsv1.TemplateSourceDataRequest{*templateSourceDataRequestModel}))
				Expect(updateWorkspaceOptionsModel.TemplateRepo).To(Equal(templateRepoUpdateRequestModel))
				Expect(updateWorkspaceOptionsModel.Type).To(Equal([]string{"testString"}))
				Expect(updateWorkspaceOptionsModel.WorkspaceStatus).To(Equal(workspaceStatusUpdateRequestModel))
				Expect(updateWorkspaceOptionsModel.WorkspaceStatusMsg).To(Equal(workspaceStatusMessageModel))
				Expect(updateWorkspaceOptionsModel.AgentID).To(Equal(core.StringPtr("testString")))
				Expect(updateWorkspaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUploadTemplateTarActionOptions successfully`, func() {
				// Construct an instance of the UploadTemplateTarActionOptions model
				actionID := "testString"
				uploadTemplateTarActionOptionsModel := schematicsService.NewUploadTemplateTarActionOptions(actionID)
				uploadTemplateTarActionOptionsModel.SetActionID("testString")
				uploadTemplateTarActionOptionsModel.SetFile(CreateMockReader("This is a mock file."))
				uploadTemplateTarActionOptionsModel.SetFileContentType("testString")
				uploadTemplateTarActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(uploadTemplateTarActionOptionsModel).ToNot(BeNil())
				Expect(uploadTemplateTarActionOptionsModel.ActionID).To(Equal(core.StringPtr("testString")))
				Expect(uploadTemplateTarActionOptionsModel.File).To(Equal(CreateMockReader("This is a mock file.")))
				Expect(uploadTemplateTarActionOptionsModel.FileContentType).To(Equal(core.StringPtr("testString")))
				Expect(uploadTemplateTarActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUploadTemplateTarBlueprintOptions successfully`, func() {
				// Construct an instance of the UploadTemplateTarBlueprintOptions model
				blueprintID := "testString"
				uploadTemplateTarBlueprintOptionsModel := schematicsService.NewUploadTemplateTarBlueprintOptions(blueprintID)
				uploadTemplateTarBlueprintOptionsModel.SetBlueprintID("testString")
				uploadTemplateTarBlueprintOptionsModel.SetFile(CreateMockReader("This is a mock file."))
				uploadTemplateTarBlueprintOptionsModel.SetFileContentType("testString")
				uploadTemplateTarBlueprintOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(uploadTemplateTarBlueprintOptionsModel).ToNot(BeNil())
				Expect(uploadTemplateTarBlueprintOptionsModel.BlueprintID).To(Equal(core.StringPtr("testString")))
				Expect(uploadTemplateTarBlueprintOptionsModel.File).To(Equal(CreateMockReader("This is a mock file.")))
				Expect(uploadTemplateTarBlueprintOptionsModel.FileContentType).To(Equal(core.StringPtr("testString")))
				Expect(uploadTemplateTarBlueprintOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
		})
	})
	Describe(`Utility function tests`, func() {
		It(`Invoke CreateMockByteArray() successfully`, func() {
			mockByteArray := CreateMockByteArray("This is a test")
			Expect(mockByteArray).ToNot(BeNil())
		})
		It(`Invoke CreateMockUUID() successfully`, func() {
			mockUUID := CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
			Expect(mockUUID).ToNot(BeNil())
		})
		It(`Invoke CreateMockReader() successfully`, func() {
			mockReader := CreateMockReader("This is a test.")
			Expect(mockReader).ToNot(BeNil())
		})
		It(`Invoke CreateMockDate() successfully`, func() {
			mockDate := CreateMockDate("2019-01-01")
			Expect(mockDate).ToNot(BeNil())
		})
		It(`Invoke CreateMockDateTime() successfully`, func() {
			mockDateTime := CreateMockDateTime("2019-01-01T12:00:00.000Z")
			Expect(mockDateTime).ToNot(BeNil())
		})
	})
})

//
// Utility functions used by the generated test code
//

func CreateMockByteArray(mockData string) *[]byte {
	ba := make([]byte, 0)
	ba = append(ba, mockData...)
	return &ba
}

func CreateMockUUID(mockData string) *strfmt.UUID {
	uuid := strfmt.UUID(mockData)
	return &uuid
}

func CreateMockReader(mockData string) io.ReadCloser {
	return io.NopCloser(bytes.NewReader([]byte(mockData)))
}

func CreateMockDate(mockData string) *strfmt.Date {
	d, err := core.ParseDate(mockData)
	if err != nil {
		return nil
	}
	return &d
}

func CreateMockDateTime(mockData string) *strfmt.DateTime {
	d, err := core.ParseDateTime(mockData)
	if err != nil {
		return nil
	}
	return &d
}

func SetTestEnvironment(testEnvironment map[string]string) {
	for key, value := range testEnvironment {
		os.Setenv(key, value)
	}
}

func ClearTestEnvironment(testEnvironment map[string]string) {
	for key := range testEnvironment {
		os.Unsetenv(key)
	}
}
